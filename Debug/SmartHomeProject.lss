
SmartHomeProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000041ee  00004262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000041b8  00000000  00000000  0000426c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012af  00000000  00000000  00008424  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000096d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00009813  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00009983  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000b5cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000c4b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000d264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000d3c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000d651  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000de1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 30 20 	call	0x4060	; 0x4060 <main>
      7a:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 be 20 	jmp	0x417c	; 0x417c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 be 20 	jmp	0x417c	; 0x417c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <EEPROM_enuRestoreData>:
/*services layer*/
#include "EEPROM_serv.h"


ES_t EEPROM_enuRestoreData(EEPROM_Handler_t *Copy_pstrEEPROMHandler)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	c3 54       	subi	r28, 0x43	; 67
     b40:	d0 40       	sbci	r29, 0x00	; 0
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	fe 01       	movw	r30, r28
     b4e:	ee 5b       	subi	r30, 0xBE	; 190
     b50:	ff 4f       	sbci	r31, 0xFF	; 255
     b52:	91 83       	std	Z+1, r25	; 0x01
     b54:	80 83       	st	Z, r24
	ES_t Local_enuErrState=ES_NOK;
     b56:	fe 01       	movw	r30, r28
     b58:	ef 5b       	subi	r30, 0xBF	; 191
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 83       	st	Z, r24

	u8 temp ;

	/*at first read the admins and users count*/
	EEPROM_enuReadDataByte(&(Copy_pstrEEPROMHandler->AdminsCount) , 90); // number of admins
     b60:	fe 01       	movw	r30, r28
     b62:	ee 5b       	subi	r30, 0xBE	; 190
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 81       	ld	r24, Z
     b68:	91 81       	ldd	r25, Z+1	; 0x01
     b6a:	88 96       	adiw	r24, 0x28	; 40
     b6c:	6a e5       	ldi	r22, 0x5A	; 90
     b6e:	70 e0       	ldi	r23, 0x00	; 0
     b70:	0e 94 04 16 	call	0x2c08	; 0x2c08 <EEPROM_enuReadDataByte>
	EEPROM_enuReadDataByte(&(Copy_pstrEEPROMHandler->UsersCount)  , 95); // number of users
     b74:	fe 01       	movw	r30, r28
     b76:	ee 5b       	subi	r30, 0xBE	; 190
     b78:	ff 4f       	sbci	r31, 0xFF	; 255
     b7a:	80 81       	ld	r24, Z
     b7c:	91 81       	ldd	r25, Z+1	; 0x01
     b7e:	8f 5a       	subi	r24, 0xAF	; 175
     b80:	9f 4f       	sbci	r25, 0xFF	; 255
     b82:	6f e5       	ldi	r22, 0x5F	; 95
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	0e 94 04 16 	call	0x2c08	; 0x2c08 <EEPROM_enuReadDataByte>
	/*******************************************************
	               array of admins IDs
	 ******************************************************/

	/*Admin ID from address 0 to 19*/
	temp = Copy_pstrEEPROMHandler->AdminsCount;
     b8a:	fe 01       	movw	r30, r28
     b8c:	ee 5b       	subi	r30, 0xBE	; 190
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	01 90       	ld	r0, Z+
     b92:	f0 81       	ld	r31, Z
     b94:	e0 2d       	mov	r30, r0
     b96:	80 a5       	ldd	r24, Z+40	; 0x28
     b98:	fe 01       	movw	r30, r28
     b9a:	e0 5c       	subi	r30, 0xC0	; 192
     b9c:	ff 4f       	sbci	r31, 0xFF	; 255
     b9e:	80 83       	st	Z, r24
	for(u8 i=0 ; i<temp; i++)
     ba0:	1f ae       	std	Y+63, r1	; 0x3f
     ba2:	87 c0       	rjmp	.+270    	; 0xcb2 <EEPROM_enuRestoreData+0x17c>
	{
		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->AdminID + i) , i);
     ba4:	fe 01       	movw	r30, r28
     ba6:	ee 5b       	subi	r30, 0xBE	; 190
     ba8:	ff 4f       	sbci	r31, 0xFF	; 255
     baa:	20 81       	ld	r18, Z
     bac:	31 81       	ldd	r19, Z+1	; 0x01
     bae:	8f ad       	ldd	r24, Y+63	; 0x3f
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	a9 01       	movw	r20, r18
     bb6:	48 0f       	add	r20, r24
     bb8:	59 1f       	adc	r21, r25
     bba:	8f ad       	ldd	r24, Y+63	; 0x3f
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	ca 01       	movw	r24, r20
     bc2:	b9 01       	movw	r22, r18
     bc4:	0e 94 04 16 	call	0x2c08	; 0x2c08 <EEPROM_enuReadDataByte>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a8 e4       	ldi	r26, 0x48	; 72
     bce:	b2 e4       	ldi	r27, 0x42	; 66
     bd0:	8d ab       	std	Y+53, r24	; 0x35
     bd2:	9e ab       	std	Y+54, r25	; 0x36
     bd4:	af ab       	std	Y+55, r26	; 0x37
     bd6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bd8:	6d a9       	ldd	r22, Y+53	; 0x35
     bda:	7e a9       	ldd	r23, Y+54	; 0x36
     bdc:	8f a9       	ldd	r24, Y+55	; 0x37
     bde:	98 ad       	ldd	r25, Y+56	; 0x38
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	4a e7       	ldi	r20, 0x7A	; 122
     be6:	53 e4       	ldi	r21, 0x43	; 67
     be8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	89 ab       	std	Y+49, r24	; 0x31
     bf2:	9a ab       	std	Y+50, r25	; 0x32
     bf4:	ab ab       	std	Y+51, r26	; 0x33
     bf6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     bf8:	69 a9       	ldd	r22, Y+49	; 0x31
     bfa:	7a a9       	ldd	r23, Y+50	; 0x32
     bfc:	8b a9       	ldd	r24, Y+51	; 0x33
     bfe:	9c a9       	ldd	r25, Y+52	; 0x34
     c00:	20 e0       	ldi	r18, 0x00	; 0
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	40 e8       	ldi	r20, 0x80	; 128
     c06:	5f e3       	ldi	r21, 0x3F	; 63
     c08:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c0c:	88 23       	and	r24, r24
     c0e:	2c f4       	brge	.+10     	; 0xc1a <EEPROM_enuRestoreData+0xe4>
		__ticks = 1;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	98 ab       	std	Y+48, r25	; 0x30
     c16:	8f a7       	std	Y+47, r24	; 0x2f
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <EEPROM_enuRestoreData+0x162>
	else if (__tmp > 65535)
     c1a:	69 a9       	ldd	r22, Y+49	; 0x31
     c1c:	7a a9       	ldd	r23, Y+50	; 0x32
     c1e:	8b a9       	ldd	r24, Y+51	; 0x33
     c20:	9c a9       	ldd	r25, Y+52	; 0x34
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	3f ef       	ldi	r19, 0xFF	; 255
     c26:	4f e7       	ldi	r20, 0x7F	; 127
     c28:	57 e4       	ldi	r21, 0x47	; 71
     c2a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     c2e:	18 16       	cp	r1, r24
     c30:	4c f5       	brge	.+82     	; 0xc84 <EEPROM_enuRestoreData+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c32:	6d a9       	ldd	r22, Y+53	; 0x35
     c34:	7e a9       	ldd	r23, Y+54	; 0x36
     c36:	8f a9       	ldd	r24, Y+55	; 0x37
     c38:	98 ad       	ldd	r25, Y+56	; 0x38
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e2       	ldi	r20, 0x20	; 32
     c40:	51 e4       	ldi	r21, 0x41	; 65
     c42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c46:	dc 01       	movw	r26, r24
     c48:	cb 01       	movw	r24, r22
     c4a:	bc 01       	movw	r22, r24
     c4c:	cd 01       	movw	r24, r26
     c4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	98 ab       	std	Y+48, r25	; 0x30
     c58:	8f a7       	std	Y+47, r24	; 0x2f
     c5a:	0f c0       	rjmp	.+30     	; 0xc7a <EEPROM_enuRestoreData+0x144>
     c5c:	89 e1       	ldi	r24, 0x19	; 25
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	9e a7       	std	Y+46, r25	; 0x2e
     c62:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c64:	8d a5       	ldd	r24, Y+45	; 0x2d
     c66:	9e a5       	ldd	r25, Y+46	; 0x2e
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <EEPROM_enuRestoreData+0x132>
     c6c:	9e a7       	std	Y+46, r25	; 0x2e
     c6e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c70:	8f a5       	ldd	r24, Y+47	; 0x2f
     c72:	98 a9       	ldd	r25, Y+48	; 0x30
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	98 ab       	std	Y+48, r25	; 0x30
     c78:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c7c:	98 a9       	ldd	r25, Y+48	; 0x30
     c7e:	00 97       	sbiw	r24, 0x00	; 0
     c80:	69 f7       	brne	.-38     	; 0xc5c <EEPROM_enuRestoreData+0x126>
     c82:	14 c0       	rjmp	.+40     	; 0xcac <EEPROM_enuRestoreData+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c84:	69 a9       	ldd	r22, Y+49	; 0x31
     c86:	7a a9       	ldd	r23, Y+50	; 0x32
     c88:	8b a9       	ldd	r24, Y+51	; 0x33
     c8a:	9c a9       	ldd	r25, Y+52	; 0x34
     c8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	98 ab       	std	Y+48, r25	; 0x30
     c96:	8f a7       	std	Y+47, r24	; 0x2f
     c98:	8f a5       	ldd	r24, Y+47	; 0x2f
     c9a:	98 a9       	ldd	r25, Y+48	; 0x30
     c9c:	9c a7       	std	Y+44, r25	; 0x2c
     c9e:	8b a7       	std	Y+43, r24	; 0x2b
     ca0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ca2:	9c a5       	ldd	r25, Y+44	; 0x2c
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	f1 f7       	brne	.-4      	; 0xca4 <EEPROM_enuRestoreData+0x16e>
     ca8:	9c a7       	std	Y+44, r25	; 0x2c
     caa:	8b a7       	std	Y+43, r24	; 0x2b
	               array of admins IDs
	 ******************************************************/

	/*Admin ID from address 0 to 19*/
	temp = Copy_pstrEEPROMHandler->AdminsCount;
	for(u8 i=0 ; i<temp; i++)
     cac:	8f ad       	ldd	r24, Y+63	; 0x3f
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	8f af       	std	Y+63, r24	; 0x3f
     cb2:	8f ad       	ldd	r24, Y+63	; 0x3f
     cb4:	fe 01       	movw	r30, r28
     cb6:	e0 5c       	subi	r30, 0xC0	; 192
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	90 81       	ld	r25, Z
     cbc:	89 17       	cp	r24, r25
     cbe:	08 f4       	brcc	.+2      	; 0xcc2 <EEPROM_enuRestoreData+0x18c>
     cc0:	71 cf       	rjmp	.-286    	; 0xba4 <EEPROM_enuRestoreData+0x6e>
	/*******************************************************
	               array of admins passwords
	 ******************************************************/

	/*Admin password from address 20 to 39*/
	temp = Copy_pstrEEPROMHandler->AdminsCount + 20;
     cc2:	fe 01       	movw	r30, r28
     cc4:	ee 5b       	subi	r30, 0xBE	; 190
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	01 90       	ld	r0, Z+
     cca:	f0 81       	ld	r31, Z
     ccc:	e0 2d       	mov	r30, r0
     cce:	80 a5       	ldd	r24, Z+40	; 0x28
     cd0:	8c 5e       	subi	r24, 0xEC	; 236
     cd2:	fe 01       	movw	r30, r28
     cd4:	e0 5c       	subi	r30, 0xC0	; 192
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 83       	st	Z, r24
	for(u8 i=20 ; i<temp ; i++)
     cda:	84 e1       	ldi	r24, 0x14	; 20
     cdc:	8e af       	std	Y+62, r24	; 0x3e
     cde:	8e c0       	rjmp	.+284    	; 0xdfc <EEPROM_enuRestoreData+0x2c6>
	{
		u8 Local_u8ArrIndex = 0;
     ce0:	1d ae       	std	Y+61, r1	; 0x3d

		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->AdminPAS + Local_u8ArrIndex) , i);
     ce2:	fe 01       	movw	r30, r28
     ce4:	ee 5b       	subi	r30, 0xBE	; 190
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	80 81       	ld	r24, Z
     cea:	91 81       	ldd	r25, Z+1	; 0x01
     cec:	9c 01       	movw	r18, r24
     cee:	2c 5e       	subi	r18, 0xEC	; 236
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	8d ad       	ldd	r24, Y+61	; 0x3d
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a9 01       	movw	r20, r18
     cfa:	48 0f       	add	r20, r24
     cfc:	59 1f       	adc	r21, r25
     cfe:	8e ad       	ldd	r24, Y+62	; 0x3e
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	ca 01       	movw	r24, r20
     d06:	b9 01       	movw	r22, r18
     d08:	0e 94 04 16 	call	0x2c08	; 0x2c08 <EEPROM_enuReadDataByte>
		Local_u8ArrIndex++;
     d0c:	8d ad       	ldd	r24, Y+61	; 0x3d
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	8d af       	std	Y+61, r24	; 0x3d
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	a8 e4       	ldi	r26, 0x48	; 72
     d18:	b2 e4       	ldi	r27, 0x42	; 66
     d1a:	8f a3       	std	Y+39, r24	; 0x27
     d1c:	98 a7       	std	Y+40, r25	; 0x28
     d1e:	a9 a7       	std	Y+41, r26	; 0x29
     d20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d22:	6f a1       	ldd	r22, Y+39	; 0x27
     d24:	78 a5       	ldd	r23, Y+40	; 0x28
     d26:	89 a5       	ldd	r24, Y+41	; 0x29
     d28:	9a a5       	ldd	r25, Y+42	; 0x2a
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	4a e7       	ldi	r20, 0x7A	; 122
     d30:	53 e4       	ldi	r21, 0x43	; 67
     d32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	8b a3       	std	Y+35, r24	; 0x23
     d3c:	9c a3       	std	Y+36, r25	; 0x24
     d3e:	ad a3       	std	Y+37, r26	; 0x25
     d40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d42:	6b a1       	ldd	r22, Y+35	; 0x23
     d44:	7c a1       	ldd	r23, Y+36	; 0x24
     d46:	8d a1       	ldd	r24, Y+37	; 0x25
     d48:	9e a1       	ldd	r25, Y+38	; 0x26
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e8       	ldi	r20, 0x80	; 128
     d50:	5f e3       	ldi	r21, 0x3F	; 63
     d52:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d56:	88 23       	and	r24, r24
     d58:	2c f4       	brge	.+10     	; 0xd64 <EEPROM_enuRestoreData+0x22e>
		__ticks = 1;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	9a a3       	std	Y+34, r25	; 0x22
     d60:	89 a3       	std	Y+33, r24	; 0x21
     d62:	3f c0       	rjmp	.+126    	; 0xde2 <EEPROM_enuRestoreData+0x2ac>
	else if (__tmp > 65535)
     d64:	6b a1       	ldd	r22, Y+35	; 0x23
     d66:	7c a1       	ldd	r23, Y+36	; 0x24
     d68:	8d a1       	ldd	r24, Y+37	; 0x25
     d6a:	9e a1       	ldd	r25, Y+38	; 0x26
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	3f ef       	ldi	r19, 0xFF	; 255
     d70:	4f e7       	ldi	r20, 0x7F	; 127
     d72:	57 e4       	ldi	r21, 0x47	; 71
     d74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d78:	18 16       	cp	r1, r24
     d7a:	4c f5       	brge	.+82     	; 0xdce <EEPROM_enuRestoreData+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d7c:	6f a1       	ldd	r22, Y+39	; 0x27
     d7e:	78 a5       	ldd	r23, Y+40	; 0x28
     d80:	89 a5       	ldd	r24, Y+41	; 0x29
     d82:	9a a5       	ldd	r25, Y+42	; 0x2a
     d84:	20 e0       	ldi	r18, 0x00	; 0
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	40 e2       	ldi	r20, 0x20	; 32
     d8a:	51 e4       	ldi	r21, 0x41	; 65
     d8c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d90:	dc 01       	movw	r26, r24
     d92:	cb 01       	movw	r24, r22
     d94:	bc 01       	movw	r22, r24
     d96:	cd 01       	movw	r24, r26
     d98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9a a3       	std	Y+34, r25	; 0x22
     da2:	89 a3       	std	Y+33, r24	; 0x21
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <EEPROM_enuRestoreData+0x28e>
     da6:	89 e1       	ldi	r24, 0x19	; 25
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	98 a3       	std	Y+32, r25	; 0x20
     dac:	8f 8f       	std	Y+31, r24	; 0x1f
     dae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     db0:	98 a1       	ldd	r25, Y+32	; 0x20
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	f1 f7       	brne	.-4      	; 0xdb2 <EEPROM_enuRestoreData+0x27c>
     db6:	98 a3       	std	Y+32, r25	; 0x20
     db8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dba:	89 a1       	ldd	r24, Y+33	; 0x21
     dbc:	9a a1       	ldd	r25, Y+34	; 0x22
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	9a a3       	std	Y+34, r25	; 0x22
     dc2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc4:	89 a1       	ldd	r24, Y+33	; 0x21
     dc6:	9a a1       	ldd	r25, Y+34	; 0x22
     dc8:	00 97       	sbiw	r24, 0x00	; 0
     dca:	69 f7       	brne	.-38     	; 0xda6 <EEPROM_enuRestoreData+0x270>
     dcc:	14 c0       	rjmp	.+40     	; 0xdf6 <EEPROM_enuRestoreData+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dce:	6b a1       	ldd	r22, Y+35	; 0x23
     dd0:	7c a1       	ldd	r23, Y+36	; 0x24
     dd2:	8d a1       	ldd	r24, Y+37	; 0x25
     dd4:	9e a1       	ldd	r25, Y+38	; 0x26
     dd6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	9a a3       	std	Y+34, r25	; 0x22
     de0:	89 a3       	std	Y+33, r24	; 0x21
     de2:	89 a1       	ldd	r24, Y+33	; 0x21
     de4:	9a a1       	ldd	r25, Y+34	; 0x22
     de6:	9e 8f       	std	Y+30, r25	; 0x1e
     de8:	8d 8f       	std	Y+29, r24	; 0x1d
     dea:	8d 8d       	ldd	r24, Y+29	; 0x1d
     dec:	9e 8d       	ldd	r25, Y+30	; 0x1e
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <EEPROM_enuRestoreData+0x2b8>
     df2:	9e 8f       	std	Y+30, r25	; 0x1e
     df4:	8d 8f       	std	Y+29, r24	; 0x1d
	               array of admins passwords
	 ******************************************************/

	/*Admin password from address 20 to 39*/
	temp = Copy_pstrEEPROMHandler->AdminsCount + 20;
	for(u8 i=20 ; i<temp ; i++)
     df6:	8e ad       	ldd	r24, Y+62	; 0x3e
     df8:	8f 5f       	subi	r24, 0xFF	; 255
     dfa:	8e af       	std	Y+62, r24	; 0x3e
     dfc:	8e ad       	ldd	r24, Y+62	; 0x3e
     dfe:	fe 01       	movw	r30, r28
     e00:	e0 5c       	subi	r30, 0xC0	; 192
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	90 81       	ld	r25, Z
     e06:	89 17       	cp	r24, r25
     e08:	08 f4       	brcc	.+2      	; 0xe0c <EEPROM_enuRestoreData+0x2d6>
     e0a:	6a cf       	rjmp	.-300    	; 0xce0 <EEPROM_enuRestoreData+0x1aa>

	/*******************************************************
	               array of users IDs
	 ******************************************************/
	/*User ID from address 40 to 59*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 40;
     e0c:	fe 01       	movw	r30, r28
     e0e:	ee 5b       	subi	r30, 0xBE	; 190
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 81       	ld	r24, Z
     e14:	91 81       	ldd	r25, Z+1	; 0x01
     e16:	fc 01       	movw	r30, r24
     e18:	ef 5a       	subi	r30, 0xAF	; 175
     e1a:	ff 4f       	sbci	r31, 0xFF	; 255
     e1c:	80 81       	ld	r24, Z
     e1e:	88 5d       	subi	r24, 0xD8	; 216
     e20:	fe 01       	movw	r30, r28
     e22:	e0 5c       	subi	r30, 0xC0	; 192
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 83       	st	Z, r24
	for(u8 i=40 ; i<temp ; i++)
     e28:	88 e2       	ldi	r24, 0x28	; 40
     e2a:	8c af       	std	Y+60, r24	; 0x3c
     e2c:	8e c0       	rjmp	.+284    	; 0xf4a <EEPROM_enuRestoreData+0x414>
	{
		u8 Local_u8ArrIndex = 0;
     e2e:	1b ae       	std	Y+59, r1	; 0x3b

		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->UserID + Local_u8ArrIndex) , i);
     e30:	fe 01       	movw	r30, r28
     e32:	ee 5b       	subi	r30, 0xBE	; 190
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	9c 01       	movw	r18, r24
     e3c:	27 5d       	subi	r18, 0xD7	; 215
     e3e:	3f 4f       	sbci	r19, 0xFF	; 255
     e40:	8b ad       	ldd	r24, Y+59	; 0x3b
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	a9 01       	movw	r20, r18
     e48:	48 0f       	add	r20, r24
     e4a:	59 1f       	adc	r21, r25
     e4c:	8c ad       	ldd	r24, Y+60	; 0x3c
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	ca 01       	movw	r24, r20
     e54:	b9 01       	movw	r22, r18
     e56:	0e 94 04 16 	call	0x2c08	; 0x2c08 <EEPROM_enuReadDataByte>
		Local_u8ArrIndex++;
     e5a:	8b ad       	ldd	r24, Y+59	; 0x3b
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	8b af       	std	Y+59, r24	; 0x3b
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	a8 e4       	ldi	r26, 0x48	; 72
     e66:	b2 e4       	ldi	r27, 0x42	; 66
     e68:	89 8f       	std	Y+25, r24	; 0x19
     e6a:	9a 8f       	std	Y+26, r25	; 0x1a
     e6c:	ab 8f       	std	Y+27, r26	; 0x1b
     e6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e70:	69 8d       	ldd	r22, Y+25	; 0x19
     e72:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e76:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	4a e7       	ldi	r20, 0x7A	; 122
     e7e:	53 e4       	ldi	r21, 0x43	; 67
     e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	8d 8b       	std	Y+21, r24	; 0x15
     e8a:	9e 8b       	std	Y+22, r25	; 0x16
     e8c:	af 8b       	std	Y+23, r26	; 0x17
     e8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e90:	6d 89       	ldd	r22, Y+21	; 0x15
     e92:	7e 89       	ldd	r23, Y+22	; 0x16
     e94:	8f 89       	ldd	r24, Y+23	; 0x17
     e96:	98 8d       	ldd	r25, Y+24	; 0x18
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 e8       	ldi	r20, 0x80	; 128
     e9e:	5f e3       	ldi	r21, 0x3F	; 63
     ea0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ea4:	88 23       	and	r24, r24
     ea6:	2c f4       	brge	.+10     	; 0xeb2 <EEPROM_enuRestoreData+0x37c>
		__ticks = 1;
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	9c 8b       	std	Y+20, r25	; 0x14
     eae:	8b 8b       	std	Y+19, r24	; 0x13
     eb0:	3f c0       	rjmp	.+126    	; 0xf30 <EEPROM_enuRestoreData+0x3fa>
	else if (__tmp > 65535)
     eb2:	6d 89       	ldd	r22, Y+21	; 0x15
     eb4:	7e 89       	ldd	r23, Y+22	; 0x16
     eb6:	8f 89       	ldd	r24, Y+23	; 0x17
     eb8:	98 8d       	ldd	r25, Y+24	; 0x18
     eba:	20 e0       	ldi	r18, 0x00	; 0
     ebc:	3f ef       	ldi	r19, 0xFF	; 255
     ebe:	4f e7       	ldi	r20, 0x7F	; 127
     ec0:	57 e4       	ldi	r21, 0x47	; 71
     ec2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     ec6:	18 16       	cp	r1, r24
     ec8:	4c f5       	brge	.+82     	; 0xf1c <EEPROM_enuRestoreData+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eca:	69 8d       	ldd	r22, Y+25	; 0x19
     ecc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ece:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ed0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e2       	ldi	r20, 0x20	; 32
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ede:	dc 01       	movw	r26, r24
     ee0:	cb 01       	movw	r24, r22
     ee2:	bc 01       	movw	r22, r24
     ee4:	cd 01       	movw	r24, r26
     ee6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eea:	dc 01       	movw	r26, r24
     eec:	cb 01       	movw	r24, r22
     eee:	9c 8b       	std	Y+20, r25	; 0x14
     ef0:	8b 8b       	std	Y+19, r24	; 0x13
     ef2:	0f c0       	rjmp	.+30     	; 0xf12 <EEPROM_enuRestoreData+0x3dc>
     ef4:	89 e1       	ldi	r24, 0x19	; 25
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	9a 8b       	std	Y+18, r25	; 0x12
     efa:	89 8b       	std	Y+17, r24	; 0x11
     efc:	89 89       	ldd	r24, Y+17	; 0x11
     efe:	9a 89       	ldd	r25, Y+18	; 0x12
     f00:	01 97       	sbiw	r24, 0x01	; 1
     f02:	f1 f7       	brne	.-4      	; 0xf00 <EEPROM_enuRestoreData+0x3ca>
     f04:	9a 8b       	std	Y+18, r25	; 0x12
     f06:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f08:	8b 89       	ldd	r24, Y+19	; 0x13
     f0a:	9c 89       	ldd	r25, Y+20	; 0x14
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9c 8b       	std	Y+20, r25	; 0x14
     f10:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f12:	8b 89       	ldd	r24, Y+19	; 0x13
     f14:	9c 89       	ldd	r25, Y+20	; 0x14
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	69 f7       	brne	.-38     	; 0xef4 <EEPROM_enuRestoreData+0x3be>
     f1a:	14 c0       	rjmp	.+40     	; 0xf44 <EEPROM_enuRestoreData+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f1c:	6d 89       	ldd	r22, Y+21	; 0x15
     f1e:	7e 89       	ldd	r23, Y+22	; 0x16
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9c 8b       	std	Y+20, r25	; 0x14
     f2e:	8b 8b       	std	Y+19, r24	; 0x13
     f30:	8b 89       	ldd	r24, Y+19	; 0x13
     f32:	9c 89       	ldd	r25, Y+20	; 0x14
     f34:	98 8b       	std	Y+16, r25	; 0x10
     f36:	8f 87       	std	Y+15, r24	; 0x0f
     f38:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3a:	98 89       	ldd	r25, Y+16	; 0x10
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <EEPROM_enuRestoreData+0x406>
     f40:	98 8b       	std	Y+16, r25	; 0x10
     f42:	8f 87       	std	Y+15, r24	; 0x0f
	/*******************************************************
	               array of users IDs
	 ******************************************************/
	/*User ID from address 40 to 59*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 40;
	for(u8 i=40 ; i<temp ; i++)
     f44:	8c ad       	ldd	r24, Y+60	; 0x3c
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	8c af       	std	Y+60, r24	; 0x3c
     f4a:	8c ad       	ldd	r24, Y+60	; 0x3c
     f4c:	fe 01       	movw	r30, r28
     f4e:	e0 5c       	subi	r30, 0xC0	; 192
     f50:	ff 4f       	sbci	r31, 0xFF	; 255
     f52:	90 81       	ld	r25, Z
     f54:	89 17       	cp	r24, r25
     f56:	08 f4       	brcc	.+2      	; 0xf5a <EEPROM_enuRestoreData+0x424>
     f58:	6a cf       	rjmp	.-300    	; 0xe2e <EEPROM_enuRestoreData+0x2f8>

	/*******************************************************
	               array of users passwords
	 ******************************************************/
	/*User password from address 60 to 79*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 60;
     f5a:	fe 01       	movw	r30, r28
     f5c:	ee 5b       	subi	r30, 0xBE	; 190
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	80 81       	ld	r24, Z
     f62:	91 81       	ldd	r25, Z+1	; 0x01
     f64:	fc 01       	movw	r30, r24
     f66:	ef 5a       	subi	r30, 0xAF	; 175
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 81       	ld	r24, Z
     f6c:	84 5c       	subi	r24, 0xC4	; 196
     f6e:	fe 01       	movw	r30, r28
     f70:	e0 5c       	subi	r30, 0xC0	; 192
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 83       	st	Z, r24
	for(u8 i=60 ; i<temp ;i++)
     f76:	8c e3       	ldi	r24, 0x3C	; 60
     f78:	8a af       	std	Y+58, r24	; 0x3a
     f7a:	8e c0       	rjmp	.+284    	; 0x1098 <EEPROM_enuRestoreData+0x562>
	{
		u8 Local_u8ArrIndex = 0;
     f7c:	19 ae       	std	Y+57, r1	; 0x39

		EEPROM_enuReadDataByte((Copy_pstrEEPROMHandler->UserPAS + Local_u8ArrIndex) , i);
     f7e:	fe 01       	movw	r30, r28
     f80:	ee 5b       	subi	r30, 0xBE	; 190
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	9c 01       	movw	r18, r24
     f8a:	23 5c       	subi	r18, 0xC3	; 195
     f8c:	3f 4f       	sbci	r19, 0xFF	; 255
     f8e:	89 ad       	ldd	r24, Y+57	; 0x39
     f90:	88 2f       	mov	r24, r24
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	a9 01       	movw	r20, r18
     f96:	48 0f       	add	r20, r24
     f98:	59 1f       	adc	r21, r25
     f9a:	8a ad       	ldd	r24, Y+58	; 0x3a
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	ca 01       	movw	r24, r20
     fa2:	b9 01       	movw	r22, r18
     fa4:	0e 94 04 16 	call	0x2c08	; 0x2c08 <EEPROM_enuReadDataByte>
		Local_u8ArrIndex++;
     fa8:	89 ad       	ldd	r24, Y+57	; 0x39
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	89 af       	std	Y+57, r24	; 0x39
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a8 e4       	ldi	r26, 0x48	; 72
     fb4:	b2 e4       	ldi	r27, 0x42	; 66
     fb6:	8b 87       	std	Y+11, r24	; 0x0b
     fb8:	9c 87       	std	Y+12, r25	; 0x0c
     fba:	ad 87       	std	Y+13, r26	; 0x0d
     fbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fbe:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc0:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc2:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc4:	9e 85       	ldd	r25, Y+14	; 0x0e
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	4a e7       	ldi	r20, 0x7A	; 122
     fcc:	53 e4       	ldi	r21, 0x43	; 67
     fce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	8f 83       	std	Y+7, r24	; 0x07
     fd8:	98 87       	std	Y+8, r25	; 0x08
     fda:	a9 87       	std	Y+9, r26	; 0x09
     fdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fde:	6f 81       	ldd	r22, Y+7	; 0x07
     fe0:	78 85       	ldd	r23, Y+8	; 0x08
     fe2:	89 85       	ldd	r24, Y+9	; 0x09
     fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e8       	ldi	r20, 0x80	; 128
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ff2:	88 23       	and	r24, r24
     ff4:	2c f4       	brge	.+10     	; 0x1000 <EEPROM_enuRestoreData+0x4ca>
		__ticks = 1;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	9e 83       	std	Y+6, r25	; 0x06
     ffc:	8d 83       	std	Y+5, r24	; 0x05
     ffe:	3f c0       	rjmp	.+126    	; 0x107e <EEPROM_enuRestoreData+0x548>
	else if (__tmp > 65535)
    1000:	6f 81       	ldd	r22, Y+7	; 0x07
    1002:	78 85       	ldd	r23, Y+8	; 0x08
    1004:	89 85       	ldd	r24, Y+9	; 0x09
    1006:	9a 85       	ldd	r25, Y+10	; 0x0a
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	3f ef       	ldi	r19, 0xFF	; 255
    100c:	4f e7       	ldi	r20, 0x7F	; 127
    100e:	57 e4       	ldi	r21, 0x47	; 71
    1010:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1014:	18 16       	cp	r1, r24
    1016:	4c f5       	brge	.+82     	; 0x106a <EEPROM_enuRestoreData+0x534>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1018:	6b 85       	ldd	r22, Y+11	; 0x0b
    101a:	7c 85       	ldd	r23, Y+12	; 0x0c
    101c:	8d 85       	ldd	r24, Y+13	; 0x0d
    101e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	40 e2       	ldi	r20, 0x20	; 32
    1026:	51 e4       	ldi	r21, 0x41	; 65
    1028:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	bc 01       	movw	r22, r24
    1032:	cd 01       	movw	r24, r26
    1034:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	9e 83       	std	Y+6, r25	; 0x06
    103e:	8d 83       	std	Y+5, r24	; 0x05
    1040:	0f c0       	rjmp	.+30     	; 0x1060 <EEPROM_enuRestoreData+0x52a>
    1042:	89 e1       	ldi	r24, 0x19	; 25
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9c 83       	std	Y+4, r25	; 0x04
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <EEPROM_enuRestoreData+0x518>
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	9e 83       	std	Y+6, r25	; 0x06
    105e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	69 f7       	brne	.-38     	; 0x1042 <EEPROM_enuRestoreData+0x50c>
    1068:	14 c0       	rjmp	.+40     	; 0x1092 <EEPROM_enuRestoreData+0x55c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	9a 81       	ldd	r25, Y+2	; 0x02
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	f1 f7       	brne	.-4      	; 0x108a <EEPROM_enuRestoreData+0x554>
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
	/*******************************************************
	               array of users passwords
	 ******************************************************/
	/*User password from address 60 to 79*/
	temp = Copy_pstrEEPROMHandler->UsersCount + 60;
	for(u8 i=60 ; i<temp ;i++)
    1092:	8a ad       	ldd	r24, Y+58	; 0x3a
    1094:	8f 5f       	subi	r24, 0xFF	; 255
    1096:	8a af       	std	Y+58, r24	; 0x3a
    1098:	8a ad       	ldd	r24, Y+58	; 0x3a
    109a:	fe 01       	movw	r30, r28
    109c:	e0 5c       	subi	r30, 0xC0	; 192
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	90 81       	ld	r25, Z
    10a2:	89 17       	cp	r24, r25
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <EEPROM_enuRestoreData+0x572>
    10a6:	6a cf       	rjmp	.-300    	; 0xf7c <EEPROM_enuRestoreData+0x446>
		Local_u8ArrIndex++;

		_delay_ms(50);
	}

	Local_enuErrState=ES_OK;
    10a8:	fe 01       	movw	r30, r28
    10aa:	ef 5b       	subi	r30, 0xBF	; 191
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	10 82       	st	Z, r1

	return Local_enuErrState;
    10b0:	fe 01       	movw	r30, r28
    10b2:	ef 5b       	subi	r30, 0xBF	; 191
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 81       	ld	r24, Z
}
    10b8:	cd 5b       	subi	r28, 0xBD	; 189
    10ba:	df 4f       	sbci	r29, 0xFF	; 255
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <EEPROM_enuAddAdmin>:

/*
 * add admin in system
 */
ES_t EEPROM_enuAddAdmin(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrAdmin)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	af 97       	sbiw	r28, 0x2f	; 47
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	9d a7       	std	Y+45, r25	; 0x2d
    10e2:	8c a7       	std	Y+44, r24	; 0x2c
    10e4:	7f a7       	std	Y+47, r23	; 0x2f
    10e6:	6e a7       	std	Y+46, r22	; 0x2e
	ES_t Local_enuErrState=ES_NOK;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	8b a7       	std	Y+43, r24	; 0x2b

	if(Copy_pstrEEPROMHandler->AdminsCount < 20)
    10ec:	ec a5       	ldd	r30, Y+44	; 0x2c
    10ee:	fd a5       	ldd	r31, Y+45	; 0x2d
    10f0:	80 a5       	ldd	r24, Z+40	; 0x28
    10f2:	84 31       	cpi	r24, 0x14	; 20
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <EEPROM_enuAddAdmin+0x2c>
    10f6:	9d c1       	rjmp	.+826    	; 0x1432 <EEPROM_enuAddAdmin+0x366>
	{
		/*add the admin in the array*/
		Copy_pstrEEPROMHandler->AdminID[Copy_pstrEEPROMHandler->AdminsCount] = Copy_pstrAdmin->ID ;
    10f8:	ec a5       	ldd	r30, Y+44	; 0x2c
    10fa:	fd a5       	ldd	r31, Y+45	; 0x2d
    10fc:	80 a5       	ldd	r24, Z+40	; 0x28
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	ee a5       	ldd	r30, Y+46	; 0x2e
    1104:	ff a5       	ldd	r31, Y+47	; 0x2f
    1106:	40 81       	ld	r20, Z
    1108:	8c a5       	ldd	r24, Y+44	; 0x2c
    110a:	9d a5       	ldd	r25, Y+45	; 0x2d
    110c:	fc 01       	movw	r30, r24
    110e:	e2 0f       	add	r30, r18
    1110:	f3 1f       	adc	r31, r19
    1112:	40 83       	st	Z, r20
		Copy_pstrEEPROMHandler->AdminPAS[Copy_pstrEEPROMHandler->AdminsCount] = Copy_pstrAdmin->Password ;
    1114:	ec a5       	ldd	r30, Y+44	; 0x2c
    1116:	fd a5       	ldd	r31, Y+45	; 0x2d
    1118:	80 a5       	ldd	r24, Z+40	; 0x28
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	ee a5       	ldd	r30, Y+46	; 0x2e
    1120:	ff a5       	ldd	r31, Y+47	; 0x2f
    1122:	41 81       	ldd	r20, Z+1	; 0x01
    1124:	8c a5       	ldd	r24, Y+44	; 0x2c
    1126:	9d a5       	ldd	r25, Y+45	; 0x2d
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	fc 01       	movw	r30, r24
    112e:	74 96       	adiw	r30, 0x14	; 20
    1130:	40 83       	st	Z, r20

		/*add the admin in EEPROM*/
		EEPROM_enuWriteDataByte(Copy_pstrAdmin->ID, Copy_pstrEEPROMHandler->AdminsCount);
    1132:	ee a5       	ldd	r30, Y+46	; 0x2e
    1134:	ff a5       	ldd	r31, Y+47	; 0x2f
    1136:	90 81       	ld	r25, Z
    1138:	ec a5       	ldd	r30, Y+44	; 0x2c
    113a:	fd a5       	ldd	r31, Y+45	; 0x2d
    113c:	80 a5       	ldd	r24, Z+40	; 0x28
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	89 2f       	mov	r24, r25
    1144:	b9 01       	movw	r22, r18
    1146:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a8 e4       	ldi	r26, 0x48	; 72
    1150:	b2 e4       	ldi	r27, 0x42	; 66
    1152:	8f a3       	std	Y+39, r24	; 0x27
    1154:	98 a7       	std	Y+40, r25	; 0x28
    1156:	a9 a7       	std	Y+41, r26	; 0x29
    1158:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    115a:	6f a1       	ldd	r22, Y+39	; 0x27
    115c:	78 a5       	ldd	r23, Y+40	; 0x28
    115e:	89 a5       	ldd	r24, Y+41	; 0x29
    1160:	9a a5       	ldd	r25, Y+42	; 0x2a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	4a e7       	ldi	r20, 0x7A	; 122
    1168:	53 e4       	ldi	r21, 0x43	; 67
    116a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8b a3       	std	Y+35, r24	; 0x23
    1174:	9c a3       	std	Y+36, r25	; 0x24
    1176:	ad a3       	std	Y+37, r26	; 0x25
    1178:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    117a:	6b a1       	ldd	r22, Y+35	; 0x23
    117c:	7c a1       	ldd	r23, Y+36	; 0x24
    117e:	8d a1       	ldd	r24, Y+37	; 0x25
    1180:	9e a1       	ldd	r25, Y+38	; 0x26
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    118e:	88 23       	and	r24, r24
    1190:	2c f4       	brge	.+10     	; 0x119c <EEPROM_enuAddAdmin+0xd0>
		__ticks = 1;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	9a a3       	std	Y+34, r25	; 0x22
    1198:	89 a3       	std	Y+33, r24	; 0x21
    119a:	3f c0       	rjmp	.+126    	; 0x121a <EEPROM_enuAddAdmin+0x14e>
	else if (__tmp > 65535)
    119c:	6b a1       	ldd	r22, Y+35	; 0x23
    119e:	7c a1       	ldd	r23, Y+36	; 0x24
    11a0:	8d a1       	ldd	r24, Y+37	; 0x25
    11a2:	9e a1       	ldd	r25, Y+38	; 0x26
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	3f ef       	ldi	r19, 0xFF	; 255
    11a8:	4f e7       	ldi	r20, 0x7F	; 127
    11aa:	57 e4       	ldi	r21, 0x47	; 71
    11ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11b0:	18 16       	cp	r1, r24
    11b2:	4c f5       	brge	.+82     	; 0x1206 <EEPROM_enuAddAdmin+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b4:	6f a1       	ldd	r22, Y+39	; 0x27
    11b6:	78 a5       	ldd	r23, Y+40	; 0x28
    11b8:	89 a5       	ldd	r24, Y+41	; 0x29
    11ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e2       	ldi	r20, 0x20	; 32
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	9a a3       	std	Y+34, r25	; 0x22
    11da:	89 a3       	std	Y+33, r24	; 0x21
    11dc:	0f c0       	rjmp	.+30     	; 0x11fc <EEPROM_enuAddAdmin+0x130>
    11de:	89 e1       	ldi	r24, 0x19	; 25
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	98 a3       	std	Y+32, r25	; 0x20
    11e4:	8f 8f       	std	Y+31, r24	; 0x1f
    11e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11e8:	98 a1       	ldd	r25, Y+32	; 0x20
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	f1 f7       	brne	.-4      	; 0x11ea <EEPROM_enuAddAdmin+0x11e>
    11ee:	98 a3       	std	Y+32, r25	; 0x20
    11f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f2:	89 a1       	ldd	r24, Y+33	; 0x21
    11f4:	9a a1       	ldd	r25, Y+34	; 0x22
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9a a3       	std	Y+34, r25	; 0x22
    11fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fc:	89 a1       	ldd	r24, Y+33	; 0x21
    11fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	69 f7       	brne	.-38     	; 0x11de <EEPROM_enuAddAdmin+0x112>
    1204:	14 c0       	rjmp	.+40     	; 0x122e <EEPROM_enuAddAdmin+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1206:	6b a1       	ldd	r22, Y+35	; 0x23
    1208:	7c a1       	ldd	r23, Y+36	; 0x24
    120a:	8d a1       	ldd	r24, Y+37	; 0x25
    120c:	9e a1       	ldd	r25, Y+38	; 0x26
    120e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1212:	dc 01       	movw	r26, r24
    1214:	cb 01       	movw	r24, r22
    1216:	9a a3       	std	Y+34, r25	; 0x22
    1218:	89 a3       	std	Y+33, r24	; 0x21
    121a:	89 a1       	ldd	r24, Y+33	; 0x21
    121c:	9a a1       	ldd	r25, Y+34	; 0x22
    121e:	9e 8f       	std	Y+30, r25	; 0x1e
    1220:	8d 8f       	std	Y+29, r24	; 0x1d
    1222:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1224:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	f1 f7       	brne	.-4      	; 0x1226 <EEPROM_enuAddAdmin+0x15a>
    122a:	9e 8f       	std	Y+30, r25	; 0x1e
    122c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		EEPROM_enuWriteDataByte(Copy_pstrAdmin->Password, Copy_pstrEEPROMHandler->AdminsCount+20);
    122e:	ee a5       	ldd	r30, Y+46	; 0x2e
    1230:	ff a5       	ldd	r31, Y+47	; 0x2f
    1232:	41 81       	ldd	r20, Z+1	; 0x01
    1234:	ec a5       	ldd	r30, Y+44	; 0x2c
    1236:	fd a5       	ldd	r31, Y+45	; 0x2d
    1238:	80 a5       	ldd	r24, Z+40	; 0x28
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	44 96       	adiw	r24, 0x14	; 20
    1240:	9c 01       	movw	r18, r24
    1242:	84 2f       	mov	r24, r20
    1244:	b9 01       	movw	r22, r18
    1246:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a8 e4       	ldi	r26, 0x48	; 72
    1250:	b2 e4       	ldi	r27, 0x42	; 66
    1252:	89 8f       	std	Y+25, r24	; 0x19
    1254:	9a 8f       	std	Y+26, r25	; 0x1a
    1256:	ab 8f       	std	Y+27, r26	; 0x1b
    1258:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125a:	69 8d       	ldd	r22, Y+25	; 0x19
    125c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    125e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1260:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	4a e7       	ldi	r20, 0x7A	; 122
    1268:	53 e4       	ldi	r21, 0x43	; 67
    126a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	8d 8b       	std	Y+21, r24	; 0x15
    1274:	9e 8b       	std	Y+22, r25	; 0x16
    1276:	af 8b       	std	Y+23, r26	; 0x17
    1278:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    127a:	6d 89       	ldd	r22, Y+21	; 0x15
    127c:	7e 89       	ldd	r23, Y+22	; 0x16
    127e:	8f 89       	ldd	r24, Y+23	; 0x17
    1280:	98 8d       	ldd	r25, Y+24	; 0x18
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e8       	ldi	r20, 0x80	; 128
    1288:	5f e3       	ldi	r21, 0x3F	; 63
    128a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    128e:	88 23       	and	r24, r24
    1290:	2c f4       	brge	.+10     	; 0x129c <EEPROM_enuAddAdmin+0x1d0>
		__ticks = 1;
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9c 8b       	std	Y+20, r25	; 0x14
    1298:	8b 8b       	std	Y+19, r24	; 0x13
    129a:	3f c0       	rjmp	.+126    	; 0x131a <EEPROM_enuAddAdmin+0x24e>
	else if (__tmp > 65535)
    129c:	6d 89       	ldd	r22, Y+21	; 0x15
    129e:	7e 89       	ldd	r23, Y+22	; 0x16
    12a0:	8f 89       	ldd	r24, Y+23	; 0x17
    12a2:	98 8d       	ldd	r25, Y+24	; 0x18
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	3f ef       	ldi	r19, 0xFF	; 255
    12a8:	4f e7       	ldi	r20, 0x7F	; 127
    12aa:	57 e4       	ldi	r21, 0x47	; 71
    12ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    12b0:	18 16       	cp	r1, r24
    12b2:	4c f5       	brge	.+82     	; 0x1306 <EEPROM_enuAddAdmin+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b4:	69 8d       	ldd	r22, Y+25	; 0x19
    12b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 e2       	ldi	r20, 0x20	; 32
    12c2:	51 e4       	ldi	r21, 0x41	; 65
    12c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	9c 8b       	std	Y+20, r25	; 0x14
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	0f c0       	rjmp	.+30     	; 0x12fc <EEPROM_enuAddAdmin+0x230>
    12de:	89 e1       	ldi	r24, 0x19	; 25
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9a 8b       	std	Y+18, r25	; 0x12
    12e4:	89 8b       	std	Y+17, r24	; 0x11
    12e6:	89 89       	ldd	r24, Y+17	; 0x11
    12e8:	9a 89       	ldd	r25, Y+18	; 0x12
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <EEPROM_enuAddAdmin+0x21e>
    12ee:	9a 8b       	std	Y+18, r25	; 0x12
    12f0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f2:	8b 89       	ldd	r24, Y+19	; 0x13
    12f4:	9c 89       	ldd	r25, Y+20	; 0x14
    12f6:	01 97       	sbiw	r24, 0x01	; 1
    12f8:	9c 8b       	std	Y+20, r25	; 0x14
    12fa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12fc:	8b 89       	ldd	r24, Y+19	; 0x13
    12fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	69 f7       	brne	.-38     	; 0x12de <EEPROM_enuAddAdmin+0x212>
    1304:	14 c0       	rjmp	.+40     	; 0x132e <EEPROM_enuAddAdmin+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1306:	6d 89       	ldd	r22, Y+21	; 0x15
    1308:	7e 89       	ldd	r23, Y+22	; 0x16
    130a:	8f 89       	ldd	r24, Y+23	; 0x17
    130c:	98 8d       	ldd	r25, Y+24	; 0x18
    130e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1312:	dc 01       	movw	r26, r24
    1314:	cb 01       	movw	r24, r22
    1316:	9c 8b       	std	Y+20, r25	; 0x14
    1318:	8b 8b       	std	Y+19, r24	; 0x13
    131a:	8b 89       	ldd	r24, Y+19	; 0x13
    131c:	9c 89       	ldd	r25, Y+20	; 0x14
    131e:	98 8b       	std	Y+16, r25	; 0x10
    1320:	8f 87       	std	Y+15, r24	; 0x0f
    1322:	8f 85       	ldd	r24, Y+15	; 0x0f
    1324:	98 89       	ldd	r25, Y+16	; 0x10
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	f1 f7       	brne	.-4      	; 0x1326 <EEPROM_enuAddAdmin+0x25a>
    132a:	98 8b       	std	Y+16, r25	; 0x10
    132c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		/*save the number of admins*/
		Copy_pstrEEPROMHandler->AdminsCount++;
    132e:	ec a5       	ldd	r30, Y+44	; 0x2c
    1330:	fd a5       	ldd	r31, Y+45	; 0x2d
    1332:	80 a5       	ldd	r24, Z+40	; 0x28
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	ec a5       	ldd	r30, Y+44	; 0x2c
    1338:	fd a5       	ldd	r31, Y+45	; 0x2d
    133a:	80 a7       	std	Z+40, r24	; 0x28
		EEPROM_enuWriteDataByte(Copy_pstrEEPROMHandler->AdminsCount, 90);
    133c:	ec a5       	ldd	r30, Y+44	; 0x2c
    133e:	fd a5       	ldd	r31, Y+45	; 0x2d
    1340:	80 a5       	ldd	r24, Z+40	; 0x28
    1342:	6a e5       	ldi	r22, 0x5A	; 90
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a8 e4       	ldi	r26, 0x48	; 72
    1350:	b2 e4       	ldi	r27, 0x42	; 66
    1352:	8b 87       	std	Y+11, r24	; 0x0b
    1354:	9c 87       	std	Y+12, r25	; 0x0c
    1356:	ad 87       	std	Y+13, r26	; 0x0d
    1358:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135a:	6b 85       	ldd	r22, Y+11	; 0x0b
    135c:	7c 85       	ldd	r23, Y+12	; 0x0c
    135e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1360:	9e 85       	ldd	r25, Y+14	; 0x0e
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	4a e7       	ldi	r20, 0x7A	; 122
    1368:	53 e4       	ldi	r21, 0x43	; 67
    136a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	8f 83       	std	Y+7, r24	; 0x07
    1374:	98 87       	std	Y+8, r25	; 0x08
    1376:	a9 87       	std	Y+9, r26	; 0x09
    1378:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    137a:	6f 81       	ldd	r22, Y+7	; 0x07
    137c:	78 85       	ldd	r23, Y+8	; 0x08
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	40 e8       	ldi	r20, 0x80	; 128
    1388:	5f e3       	ldi	r21, 0x3F	; 63
    138a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    138e:	88 23       	and	r24, r24
    1390:	2c f4       	brge	.+10     	; 0x139c <EEPROM_enuAddAdmin+0x2d0>
		__ticks = 1;
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
    139a:	3f c0       	rjmp	.+126    	; 0x141a <EEPROM_enuAddAdmin+0x34e>
	else if (__tmp > 65535)
    139c:	6f 81       	ldd	r22, Y+7	; 0x07
    139e:	78 85       	ldd	r23, Y+8	; 0x08
    13a0:	89 85       	ldd	r24, Y+9	; 0x09
    13a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	3f ef       	ldi	r19, 0xFF	; 255
    13a8:	4f e7       	ldi	r20, 0x7F	; 127
    13aa:	57 e4       	ldi	r21, 0x47	; 71
    13ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13b0:	18 16       	cp	r1, r24
    13b2:	4c f5       	brge	.+82     	; 0x1406 <EEPROM_enuAddAdmin+0x33a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    13b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    13bc:	20 e0       	ldi	r18, 0x00	; 0
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	40 e2       	ldi	r20, 0x20	; 32
    13c2:	51 e4       	ldi	r21, 0x41	; 65
    13c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	bc 01       	movw	r22, r24
    13ce:	cd 01       	movw	r24, r26
    13d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
    13dc:	0f c0       	rjmp	.+30     	; 0x13fc <EEPROM_enuAddAdmin+0x330>
    13de:	89 e1       	ldi	r24, 0x19	; 25
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	8b 83       	std	Y+3, r24	; 0x03
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	f1 f7       	brne	.-4      	; 0x13ea <EEPROM_enuAddAdmin+0x31e>
    13ee:	9c 83       	std	Y+4, r25	; 0x04
    13f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f2:	8d 81       	ldd	r24, Y+5	; 0x05
    13f4:	9e 81       	ldd	r25, Y+6	; 0x06
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	9e 83       	std	Y+6, r25	; 0x06
    13fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	69 f7       	brne	.-38     	; 0x13de <EEPROM_enuAddAdmin+0x312>
    1404:	14 c0       	rjmp	.+40     	; 0x142e <EEPROM_enuAddAdmin+0x362>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1406:	6f 81       	ldd	r22, Y+7	; 0x07
    1408:	78 85       	ldd	r23, Y+8	; 0x08
    140a:	89 85       	ldd	r24, Y+9	; 0x09
    140c:	9a 85       	ldd	r25, Y+10	; 0x0a
    140e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1412:	dc 01       	movw	r26, r24
    1414:	cb 01       	movw	r24, r22
    1416:	9e 83       	std	Y+6, r25	; 0x06
    1418:	8d 83       	std	Y+5, r24	; 0x05
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	89 83       	std	Y+1, r24	; 0x01
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <EEPROM_enuAddAdmin+0x35a>
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Local_enuErrState=ES_OK;
    142e:	1b a6       	std	Y+43, r1	; 0x2b
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <EEPROM_enuAddAdmin+0x36a>
	}
	else
	{
		/*the system has max number admins */
		Local_enuErrState=ES_NOK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	8b a7       	std	Y+43, r24	; 0x2b
	}

	return Local_enuErrState;
    1436:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    1438:	af 96       	adiw	r28, 0x2f	; 47
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	de bf       	out	0x3e, r29	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	cd bf       	out	0x3d, r28	; 61
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <EEPROM_enuAddUser>:

/*
 * add user in system
 */
ES_t EEPROM_enuAddUser(EEPROM_Handler_t *Copy_pstrEEPROMHandler , AdminORuser_t* Copy_pstrUser)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	af 97       	sbiw	r28, 0x2f	; 47
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	9d a7       	std	Y+45, r25	; 0x2d
    1460:	8c a7       	std	Y+44, r24	; 0x2c
    1462:	7f a7       	std	Y+47, r23	; 0x2f
    1464:	6e a7       	std	Y+46, r22	; 0x2e
	ES_t Local_enuErrState=ES_NOK;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	8b a7       	std	Y+43, r24	; 0x2b
	if(Copy_pstrEEPROMHandler->AdminsCount < 20)
    146a:	ec a5       	ldd	r30, Y+44	; 0x2c
    146c:	fd a5       	ldd	r31, Y+45	; 0x2d
    146e:	80 a5       	ldd	r24, Z+40	; 0x28
    1470:	84 31       	cpi	r24, 0x14	; 20
    1472:	08 f0       	brcs	.+2      	; 0x1476 <EEPROM_enuAddUser+0x2c>
    1474:	b6 c1       	rjmp	.+876    	; 0x17e2 <EEPROM_enuAddUser+0x398>
	{
		/*add the admin in the array*/
		Copy_pstrEEPROMHandler->UserID[Copy_pstrEEPROMHandler->UsersCount] = Copy_pstrUser->ID ;
    1476:	8c a5       	ldd	r24, Y+44	; 0x2c
    1478:	9d a5       	ldd	r25, Y+45	; 0x2d
    147a:	fc 01       	movw	r30, r24
    147c:	ef 5a       	subi	r30, 0xAF	; 175
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	80 81       	ld	r24, Z
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	ee a5       	ldd	r30, Y+46	; 0x2e
    1488:	ff a5       	ldd	r31, Y+47	; 0x2f
    148a:	40 81       	ld	r20, Z
    148c:	8c a5       	ldd	r24, Y+44	; 0x2c
    148e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	fc 01       	movw	r30, r24
    1496:	b9 96       	adiw	r30, 0x29	; 41
    1498:	40 83       	st	Z, r20
		Copy_pstrEEPROMHandler->UserPAS[Copy_pstrEEPROMHandler->UsersCount] = Copy_pstrUser->Password ;
    149a:	8c a5       	ldd	r24, Y+44	; 0x2c
    149c:	9d a5       	ldd	r25, Y+45	; 0x2d
    149e:	fc 01       	movw	r30, r24
    14a0:	ef 5a       	subi	r30, 0xAF	; 175
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	80 81       	ld	r24, Z
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	ee a5       	ldd	r30, Y+46	; 0x2e
    14ac:	ff a5       	ldd	r31, Y+47	; 0x2f
    14ae:	41 81       	ldd	r20, Z+1	; 0x01
    14b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    14b2:	9d a5       	ldd	r25, Y+45	; 0x2d
    14b4:	82 0f       	add	r24, r18
    14b6:	93 1f       	adc	r25, r19
    14b8:	fc 01       	movw	r30, r24
    14ba:	fd 96       	adiw	r30, 0x3d	; 61
    14bc:	40 83       	st	Z, r20

		/*add the admin in EEPROM*/
		EEPROM_enuWriteDataByte(Copy_pstrUser->ID, Copy_pstrEEPROMHandler->UsersCount + 40);
    14be:	ee a5       	ldd	r30, Y+46	; 0x2e
    14c0:	ff a5       	ldd	r31, Y+47	; 0x2f
    14c2:	40 81       	ld	r20, Z
    14c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    14c6:	9d a5       	ldd	r25, Y+45	; 0x2d
    14c8:	fc 01       	movw	r30, r24
    14ca:	ef 5a       	subi	r30, 0xAF	; 175
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 81       	ld	r24, Z
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	88 96       	adiw	r24, 0x28	; 40
    14d6:	9c 01       	movw	r18, r24
    14d8:	84 2f       	mov	r24, r20
    14da:	b9 01       	movw	r22, r18
    14dc:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a8 e4       	ldi	r26, 0x48	; 72
    14e6:	b2 e4       	ldi	r27, 0x42	; 66
    14e8:	8f a3       	std	Y+39, r24	; 0x27
    14ea:	98 a7       	std	Y+40, r25	; 0x28
    14ec:	a9 a7       	std	Y+41, r26	; 0x29
    14ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f0:	6f a1       	ldd	r22, Y+39	; 0x27
    14f2:	78 a5       	ldd	r23, Y+40	; 0x28
    14f4:	89 a5       	ldd	r24, Y+41	; 0x29
    14f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	4a e7       	ldi	r20, 0x7A	; 122
    14fe:	53 e4       	ldi	r21, 0x43	; 67
    1500:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	8b a3       	std	Y+35, r24	; 0x23
    150a:	9c a3       	std	Y+36, r25	; 0x24
    150c:	ad a3       	std	Y+37, r26	; 0x25
    150e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1510:	6b a1       	ldd	r22, Y+35	; 0x23
    1512:	7c a1       	ldd	r23, Y+36	; 0x24
    1514:	8d a1       	ldd	r24, Y+37	; 0x25
    1516:	9e a1       	ldd	r25, Y+38	; 0x26
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	40 e8       	ldi	r20, 0x80	; 128
    151e:	5f e3       	ldi	r21, 0x3F	; 63
    1520:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1524:	88 23       	and	r24, r24
    1526:	2c f4       	brge	.+10     	; 0x1532 <EEPROM_enuAddUser+0xe8>
		__ticks = 1;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9a a3       	std	Y+34, r25	; 0x22
    152e:	89 a3       	std	Y+33, r24	; 0x21
    1530:	3f c0       	rjmp	.+126    	; 0x15b0 <EEPROM_enuAddUser+0x166>
	else if (__tmp > 65535)
    1532:	6b a1       	ldd	r22, Y+35	; 0x23
    1534:	7c a1       	ldd	r23, Y+36	; 0x24
    1536:	8d a1       	ldd	r24, Y+37	; 0x25
    1538:	9e a1       	ldd	r25, Y+38	; 0x26
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	3f ef       	ldi	r19, 0xFF	; 255
    153e:	4f e7       	ldi	r20, 0x7F	; 127
    1540:	57 e4       	ldi	r21, 0x47	; 71
    1542:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1546:	18 16       	cp	r1, r24
    1548:	4c f5       	brge	.+82     	; 0x159c <EEPROM_enuAddUser+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    154a:	6f a1       	ldd	r22, Y+39	; 0x27
    154c:	78 a5       	ldd	r23, Y+40	; 0x28
    154e:	89 a5       	ldd	r24, Y+41	; 0x29
    1550:	9a a5       	ldd	r25, Y+42	; 0x2a
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e2       	ldi	r20, 0x20	; 32
    1558:	51 e4       	ldi	r21, 0x41	; 65
    155a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	bc 01       	movw	r22, r24
    1564:	cd 01       	movw	r24, r26
    1566:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	9a a3       	std	Y+34, r25	; 0x22
    1570:	89 a3       	std	Y+33, r24	; 0x21
    1572:	0f c0       	rjmp	.+30     	; 0x1592 <EEPROM_enuAddUser+0x148>
    1574:	89 e1       	ldi	r24, 0x19	; 25
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	98 a3       	std	Y+32, r25	; 0x20
    157a:	8f 8f       	std	Y+31, r24	; 0x1f
    157c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    157e:	98 a1       	ldd	r25, Y+32	; 0x20
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <EEPROM_enuAddUser+0x136>
    1584:	98 a3       	std	Y+32, r25	; 0x20
    1586:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1588:	89 a1       	ldd	r24, Y+33	; 0x21
    158a:	9a a1       	ldd	r25, Y+34	; 0x22
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	9a a3       	std	Y+34, r25	; 0x22
    1590:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1592:	89 a1       	ldd	r24, Y+33	; 0x21
    1594:	9a a1       	ldd	r25, Y+34	; 0x22
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	69 f7       	brne	.-38     	; 0x1574 <EEPROM_enuAddUser+0x12a>
    159a:	14 c0       	rjmp	.+40     	; 0x15c4 <EEPROM_enuAddUser+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159c:	6b a1       	ldd	r22, Y+35	; 0x23
    159e:	7c a1       	ldd	r23, Y+36	; 0x24
    15a0:	8d a1       	ldd	r24, Y+37	; 0x25
    15a2:	9e a1       	ldd	r25, Y+38	; 0x26
    15a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	9a a3       	std	Y+34, r25	; 0x22
    15ae:	89 a3       	std	Y+33, r24	; 0x21
    15b0:	89 a1       	ldd	r24, Y+33	; 0x21
    15b2:	9a a1       	ldd	r25, Y+34	; 0x22
    15b4:	9e 8f       	std	Y+30, r25	; 0x1e
    15b6:	8d 8f       	std	Y+29, r24	; 0x1d
    15b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	f1 f7       	brne	.-4      	; 0x15bc <EEPROM_enuAddUser+0x172>
    15c0:	9e 8f       	std	Y+30, r25	; 0x1e
    15c2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		EEPROM_enuWriteDataByte(Copy_pstrUser->Password, Copy_pstrEEPROMHandler->UsersCount +60);
    15c4:	ee a5       	ldd	r30, Y+46	; 0x2e
    15c6:	ff a5       	ldd	r31, Y+47	; 0x2f
    15c8:	41 81       	ldd	r20, Z+1	; 0x01
    15ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    15cc:	9d a5       	ldd	r25, Y+45	; 0x2d
    15ce:	fc 01       	movw	r30, r24
    15d0:	ef 5a       	subi	r30, 0xAF	; 175
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	cc 96       	adiw	r24, 0x3c	; 60
    15dc:	9c 01       	movw	r18, r24
    15de:	84 2f       	mov	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a8 e4       	ldi	r26, 0x48	; 72
    15ec:	b2 e4       	ldi	r27, 0x42	; 66
    15ee:	89 8f       	std	Y+25, r24	; 0x19
    15f0:	9a 8f       	std	Y+26, r25	; 0x1a
    15f2:	ab 8f       	std	Y+27, r26	; 0x1b
    15f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15f6:	69 8d       	ldd	r22, Y+25	; 0x19
    15f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	4a e7       	ldi	r20, 0x7A	; 122
    1604:	53 e4       	ldi	r21, 0x43	; 67
    1606:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    160a:	dc 01       	movw	r26, r24
    160c:	cb 01       	movw	r24, r22
    160e:	8d 8b       	std	Y+21, r24	; 0x15
    1610:	9e 8b       	std	Y+22, r25	; 0x16
    1612:	af 8b       	std	Y+23, r26	; 0x17
    1614:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1616:	6d 89       	ldd	r22, Y+21	; 0x15
    1618:	7e 89       	ldd	r23, Y+22	; 0x16
    161a:	8f 89       	ldd	r24, Y+23	; 0x17
    161c:	98 8d       	ldd	r25, Y+24	; 0x18
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e8       	ldi	r20, 0x80	; 128
    1624:	5f e3       	ldi	r21, 0x3F	; 63
    1626:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    162a:	88 23       	and	r24, r24
    162c:	2c f4       	brge	.+10     	; 0x1638 <EEPROM_enuAddUser+0x1ee>
		__ticks = 1;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	9c 8b       	std	Y+20, r25	; 0x14
    1634:	8b 8b       	std	Y+19, r24	; 0x13
    1636:	3f c0       	rjmp	.+126    	; 0x16b6 <EEPROM_enuAddUser+0x26c>
	else if (__tmp > 65535)
    1638:	6d 89       	ldd	r22, Y+21	; 0x15
    163a:	7e 89       	ldd	r23, Y+22	; 0x16
    163c:	8f 89       	ldd	r24, Y+23	; 0x17
    163e:	98 8d       	ldd	r25, Y+24	; 0x18
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	4f e7       	ldi	r20, 0x7F	; 127
    1646:	57 e4       	ldi	r21, 0x47	; 71
    1648:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    164c:	18 16       	cp	r1, r24
    164e:	4c f5       	brge	.+82     	; 0x16a2 <EEPROM_enuAddUser+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1650:	69 8d       	ldd	r22, Y+25	; 0x19
    1652:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1654:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1656:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e2       	ldi	r20, 0x20	; 32
    165e:	51 e4       	ldi	r21, 0x41	; 65
    1660:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1664:	dc 01       	movw	r26, r24
    1666:	cb 01       	movw	r24, r22
    1668:	bc 01       	movw	r22, r24
    166a:	cd 01       	movw	r24, r26
    166c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	9c 8b       	std	Y+20, r25	; 0x14
    1676:	8b 8b       	std	Y+19, r24	; 0x13
    1678:	0f c0       	rjmp	.+30     	; 0x1698 <EEPROM_enuAddUser+0x24e>
    167a:	89 e1       	ldi	r24, 0x19	; 25
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	9a 8b       	std	Y+18, r25	; 0x12
    1680:	89 8b       	std	Y+17, r24	; 0x11
    1682:	89 89       	ldd	r24, Y+17	; 0x11
    1684:	9a 89       	ldd	r25, Y+18	; 0x12
    1686:	01 97       	sbiw	r24, 0x01	; 1
    1688:	f1 f7       	brne	.-4      	; 0x1686 <EEPROM_enuAddUser+0x23c>
    168a:	9a 8b       	std	Y+18, r25	; 0x12
    168c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	8b 89       	ldd	r24, Y+19	; 0x13
    1690:	9c 89       	ldd	r25, Y+20	; 0x14
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	9c 8b       	std	Y+20, r25	; 0x14
    1696:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1698:	8b 89       	ldd	r24, Y+19	; 0x13
    169a:	9c 89       	ldd	r25, Y+20	; 0x14
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	69 f7       	brne	.-38     	; 0x167a <EEPROM_enuAddUser+0x230>
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <EEPROM_enuAddUser+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16ae:	dc 01       	movw	r26, r24
    16b0:	cb 01       	movw	r24, r22
    16b2:	9c 8b       	std	Y+20, r25	; 0x14
    16b4:	8b 8b       	std	Y+19, r24	; 0x13
    16b6:	8b 89       	ldd	r24, Y+19	; 0x13
    16b8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ba:	98 8b       	std	Y+16, r25	; 0x10
    16bc:	8f 87       	std	Y+15, r24	; 0x0f
    16be:	8f 85       	ldd	r24, Y+15	; 0x0f
    16c0:	98 89       	ldd	r25, Y+16	; 0x10
    16c2:	01 97       	sbiw	r24, 0x01	; 1
    16c4:	f1 f7       	brne	.-4      	; 0x16c2 <EEPROM_enuAddUser+0x278>
    16c6:	98 8b       	std	Y+16, r25	; 0x10
    16c8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);

		/*save the number of admins*/
		Copy_pstrEEPROMHandler->UsersCount++;
    16ca:	8c a5       	ldd	r24, Y+44	; 0x2c
    16cc:	9d a5       	ldd	r25, Y+45	; 0x2d
    16ce:	fc 01       	movw	r30, r24
    16d0:	ef 5a       	subi	r30, 0xAF	; 175
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	28 2f       	mov	r18, r24
    16d8:	2f 5f       	subi	r18, 0xFF	; 255
    16da:	8c a5       	ldd	r24, Y+44	; 0x2c
    16dc:	9d a5       	ldd	r25, Y+45	; 0x2d
    16de:	fc 01       	movw	r30, r24
    16e0:	ef 5a       	subi	r30, 0xAF	; 175
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	20 83       	st	Z, r18
		EEPROM_enuWriteDataByte(Copy_pstrEEPROMHandler->UsersCount, 95);
    16e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    16e8:	9d a5       	ldd	r25, Y+45	; 0x2d
    16ea:	fc 01       	movw	r30, r24
    16ec:	ef 5a       	subi	r30, 0xAF	; 175
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	6f e5       	ldi	r22, 0x5F	; 95
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a8 e4       	ldi	r26, 0x48	; 72
    1700:	b2 e4       	ldi	r27, 0x42	; 66
    1702:	8b 87       	std	Y+11, r24	; 0x0b
    1704:	9c 87       	std	Y+12, r25	; 0x0c
    1706:	ad 87       	std	Y+13, r26	; 0x0d
    1708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170a:	6b 85       	ldd	r22, Y+11	; 0x0b
    170c:	7c 85       	ldd	r23, Y+12	; 0x0c
    170e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1710:	9e 85       	ldd	r25, Y+14	; 0x0e
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	4a e7       	ldi	r20, 0x7A	; 122
    1718:	53 e4       	ldi	r21, 0x43	; 67
    171a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	8f 83       	std	Y+7, r24	; 0x07
    1724:	98 87       	std	Y+8, r25	; 0x08
    1726:	a9 87       	std	Y+9, r26	; 0x09
    1728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    172a:	6f 81       	ldd	r22, Y+7	; 0x07
    172c:	78 85       	ldd	r23, Y+8	; 0x08
    172e:	89 85       	ldd	r24, Y+9	; 0x09
    1730:	9a 85       	ldd	r25, Y+10	; 0x0a
    1732:	20 e0       	ldi	r18, 0x00	; 0
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	40 e8       	ldi	r20, 0x80	; 128
    1738:	5f e3       	ldi	r21, 0x3F	; 63
    173a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    173e:	88 23       	and	r24, r24
    1740:	2c f4       	brge	.+10     	; 0x174c <EEPROM_enuAddUser+0x302>
		__ticks = 1;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	9e 83       	std	Y+6, r25	; 0x06
    1748:	8d 83       	std	Y+5, r24	; 0x05
    174a:	3f c0       	rjmp	.+126    	; 0x17ca <EEPROM_enuAddUser+0x380>
	else if (__tmp > 65535)
    174c:	6f 81       	ldd	r22, Y+7	; 0x07
    174e:	78 85       	ldd	r23, Y+8	; 0x08
    1750:	89 85       	ldd	r24, Y+9	; 0x09
    1752:	9a 85       	ldd	r25, Y+10	; 0x0a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	3f ef       	ldi	r19, 0xFF	; 255
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	57 e4       	ldi	r21, 0x47	; 71
    175c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	4c f5       	brge	.+82     	; 0x17b6 <EEPROM_enuAddUser+0x36c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1764:	6b 85       	ldd	r22, Y+11	; 0x0b
    1766:	7c 85       	ldd	r23, Y+12	; 0x0c
    1768:	8d 85       	ldd	r24, Y+13	; 0x0d
    176a:	9e 85       	ldd	r25, Y+14	; 0x0e
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	40 e2       	ldi	r20, 0x20	; 32
    1772:	51 e4       	ldi	r21, 0x41	; 65
    1774:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	8d 83       	std	Y+5, r24	; 0x05
    178c:	0f c0       	rjmp	.+30     	; 0x17ac <EEPROM_enuAddUser+0x362>
    178e:	89 e1       	ldi	r24, 0x19	; 25
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	9c 83       	std	Y+4, r25	; 0x04
    1794:	8b 83       	std	Y+3, r24	; 0x03
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	f1 f7       	brne	.-4      	; 0x179a <EEPROM_enuAddUser+0x350>
    179e:	9c 83       	std	Y+4, r25	; 0x04
    17a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a2:	8d 81       	ldd	r24, Y+5	; 0x05
    17a4:	9e 81       	ldd	r25, Y+6	; 0x06
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	69 f7       	brne	.-38     	; 0x178e <EEPROM_enuAddUser+0x344>
    17b4:	14 c0       	rjmp	.+40     	; 0x17de <EEPROM_enuAddUser+0x394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b6:	6f 81       	ldd	r22, Y+7	; 0x07
    17b8:	78 85       	ldd	r23, Y+8	; 0x08
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17c2:	dc 01       	movw	r26, r24
    17c4:	cb 01       	movw	r24, r22
    17c6:	9e 83       	std	Y+6, r25	; 0x06
    17c8:	8d 83       	std	Y+5, r24	; 0x05
    17ca:	8d 81       	ldd	r24, Y+5	; 0x05
    17cc:	9e 81       	ldd	r25, Y+6	; 0x06
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	89 83       	std	Y+1, r24	; 0x01
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	9a 81       	ldd	r25, Y+2	; 0x02
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	f1 f7       	brne	.-4      	; 0x17d6 <EEPROM_enuAddUser+0x38c>
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		Local_enuErrState=ES_OK;
    17de:	1b a6       	std	Y+43, r1	; 0x2b
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <EEPROM_enuAddUser+0x39c>
	}
	else
	{
		/*the system has max number admins */
		Local_enuErrState=ES_NOK;
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	8b a7       	std	Y+43, r24	; 0x2b
	}

	return Local_enuErrState;
    17e6:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    17e8:	af 96       	adiw	r28, 0x2f	; 47
    17ea:	0f b6       	in	r0, 0x3f	; 63
    17ec:	f8 94       	cli
    17ee:	de bf       	out	0x3e, r29	; 62
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	cd bf       	out	0x3d, r28	; 61
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <EEPROM_enuRemoveAdmin>:

/*
 * remove admin from the system
 */
ES_t EEPROM_enuRemoveAdmin(EEPROM_Handler_t *Copy_pstrEEPROMHandler , u8 Copy_u8AdminId )
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <EEPROM_enuRemoveAdmin+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <EEPROM_enuRemoveAdmin+0x8>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	9c 83       	std	Y+4, r25	; 0x04
    180a:	8b 83       	std	Y+3, r24	; 0x03
    180c:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrState=ES_NOK;
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	8a 83       	std	Y+2, r24	; 0x02


	for(u8 i=0 ; i<20 ; i++)
    1812:	19 82       	std	Y+1, r1	; 0x01
    1814:	23 c0       	rjmp	.+70     	; 0x185c <EEPROM_enuRemoveAdmin+0x62>
	{
		if(Copy_pstrEEPROMHandler->AdminID[i] == Copy_u8AdminId )
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	9c 81       	ldd	r25, Y+4	; 0x04
    1820:	fc 01       	movw	r30, r24
    1822:	e2 0f       	add	r30, r18
    1824:	f3 1f       	adc	r31, r19
    1826:	90 81       	ld	r25, Z
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	98 17       	cp	r25, r24
    182c:	a1 f4       	brne	.+40     	; 0x1856 <EEPROM_enuRemoveAdmin+0x5c>
		{
			Copy_pstrEEPROMHandler->AdminID[i] = 0;
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	9c 81       	ldd	r25, Y+4	; 0x04
    1838:	fc 01       	movw	r30, r24
    183a:	e2 0f       	add	r30, r18
    183c:	f3 1f       	adc	r31, r19
    183e:	10 82       	st	Z, r1
			Copy_pstrEEPROMHandler->AdminPAS[i] = 0;
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	8b 81       	ldd	r24, Y+3	; 0x03
    1848:	9c 81       	ldd	r25, Y+4	; 0x04
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	fc 01       	movw	r30, r24
    1850:	74 96       	adiw	r30, 0x14	; 20
    1852:	10 82       	st	Z, r1
			Local_enuErrState=ES_OK;
    1854:	1a 82       	std	Y+2, r1	; 0x02
ES_t EEPROM_enuRemoveAdmin(EEPROM_Handler_t *Copy_pstrEEPROMHandler , u8 Copy_u8AdminId )
{
	ES_t Local_enuErrState=ES_NOK;


	for(u8 i=0 ; i<20 ; i++)
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	84 31       	cpi	r24, 0x14	; 20
    1860:	d0 f2       	brcs	.-76     	; 0x1816 <EEPROM_enuRemoveAdmin+0x1c>
			Copy_pstrEEPROMHandler->AdminPAS[i] = 0;
			Local_enuErrState=ES_OK;
		}
	}

	return Local_enuErrState;
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	cf 91       	pop	r28
    1870:	df 91       	pop	r29
    1872:	08 95       	ret

00001874 <EEPROM_enuRemoveUser>:

/*
 * remove user from the system
 */
ES_t EEPROM_enuRemoveUser(EEPROM_Handler_t *Copy_pstrEEPROMHandler , u8 Copy_u8UserId)
{
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	00 d0       	rcall	.+0      	; 0x187a <EEPROM_enuRemoveUser+0x6>
    187a:	00 d0       	rcall	.+0      	; 0x187c <EEPROM_enuRemoveUser+0x8>
    187c:	0f 92       	push	r0
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	9c 83       	std	Y+4, r25	; 0x04
    1884:	8b 83       	std	Y+3, r24	; 0x03
    1886:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrState=ES_NOK;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=20 ; i<60 ; i++)
    188c:	84 e1       	ldi	r24, 0x14	; 20
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	25 c0       	rjmp	.+74     	; 0x18dc <EEPROM_enuRemoveUser+0x68>
	{
		if(Copy_pstrEEPROMHandler->UserID[i] == Copy_u8UserId )
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	82 0f       	add	r24, r18
    189e:	93 1f       	adc	r25, r19
    18a0:	fc 01       	movw	r30, r24
    18a2:	b9 96       	adiw	r30, 0x29	; 41
    18a4:	90 81       	ld	r25, Z
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	98 17       	cp	r25, r24
    18aa:	a9 f4       	brne	.+42     	; 0x18d6 <EEPROM_enuRemoveUser+0x62>
		{
			Copy_pstrEEPROMHandler->UserID[i] = 0;
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	82 0f       	add	r24, r18
    18b8:	93 1f       	adc	r25, r19
    18ba:	fc 01       	movw	r30, r24
    18bc:	b9 96       	adiw	r30, 0x29	; 41
    18be:	10 82       	st	Z, r1
			Copy_pstrEEPROMHandler->UserPAS[i] = 0;
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	82 0f       	add	r24, r18
    18cc:	93 1f       	adc	r25, r19
    18ce:	fc 01       	movw	r30, r24
    18d0:	fd 96       	adiw	r30, 0x3d	; 61
    18d2:	10 82       	st	Z, r1
			Local_enuErrState=ES_OK;
    18d4:	1a 82       	std	Y+2, r1	; 0x02
 */
ES_t EEPROM_enuRemoveUser(EEPROM_Handler_t *Copy_pstrEEPROMHandler , u8 Copy_u8UserId)
{
	ES_t Local_enuErrState=ES_NOK;

	for(u8 i=20 ; i<60 ; i++)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8c 33       	cpi	r24, 0x3C	; 60
    18e0:	c0 f2       	brcs	.-80     	; 0x1892 <EEPROM_enuRemoveUser+0x1e>
			Copy_pstrEEPROMHandler->UserPAS[i] = 0;
			Local_enuErrState=ES_OK;
		}
	}

	return Local_enuErrState;
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <EEPROM_enuGetAdminLocation>:

ES_t EEPROM_enuGetAdminLocation(EEPROM_Handler_t *Copy_pstrEEPROMHandler , u8 Copy_u8AdminId ,u8 *Copy_pu8Location)
{
    18f4:	df 93       	push	r29
    18f6:	cf 93       	push	r28
    18f8:	cd b7       	in	r28, 0x3d	; 61
    18fa:	de b7       	in	r29, 0x3e	; 62
    18fc:	27 97       	sbiw	r28, 0x07	; 7
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	9c 83       	std	Y+4, r25	; 0x04
    190a:	8b 83       	std	Y+3, r24	; 0x03
    190c:	6d 83       	std	Y+5, r22	; 0x05
    190e:	5f 83       	std	Y+7, r21	; 0x07
    1910:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrState=ES_NOK;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	8a 83       	std	Y+2, r24	; 0x02


	for(u8 i=0 ; i<20 ; i++)
    1916:	19 82       	std	Y+1, r1	; 0x01
    1918:	14 c0       	rjmp	.+40     	; 0x1942 <EEPROM_enuGetAdminLocation+0x4e>
	{
		if(Copy_pstrEEPROMHandler->AdminID[i] == Copy_u8AdminId )
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	fc 01       	movw	r30, r24
    1926:	e2 0f       	add	r30, r18
    1928:	f3 1f       	adc	r31, r19
    192a:	90 81       	ld	r25, Z
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
    192e:	98 17       	cp	r25, r24
    1930:	29 f4       	brne	.+10     	; 0x193c <EEPROM_enuGetAdminLocation+0x48>
		{
			*Copy_pu8Location = i;
    1932:	ee 81       	ldd	r30, Y+6	; 0x06
    1934:	ff 81       	ldd	r31, Y+7	; 0x07
    1936:	89 81       	ldd	r24, Y+1	; 0x01
    1938:	80 83       	st	Z, r24
			Local_enuErrState=ES_OK;
    193a:	1a 82       	std	Y+2, r1	; 0x02
ES_t EEPROM_enuGetAdminLocation(EEPROM_Handler_t *Copy_pstrEEPROMHandler , u8 Copy_u8AdminId ,u8 *Copy_pu8Location)
{
	ES_t Local_enuErrState=ES_NOK;


	for(u8 i=0 ; i<20 ; i++)
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	8f 5f       	subi	r24, 0xFF	; 255
    1940:	89 83       	std	Y+1, r24	; 0x01
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	84 31       	cpi	r24, 0x14	; 20
    1946:	48 f3       	brcs	.-46     	; 0x191a <EEPROM_enuGetAdminLocation+0x26>
			*Copy_pu8Location = i;
			Local_enuErrState=ES_OK;
		}
	}

	return Local_enuErrState;
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
}
    194a:	27 96       	adiw	r28, 0x07	; 7
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	de bf       	out	0x3e, r29	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	cd bf       	out	0x3d, r28	; 61
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <EEPROM_enuGetUserLocation>:

ES_t EEPROM_enuGetUserLocation(EEPROM_Handler_t *Copy_pstrEEPROMHandler , u8 Copy_u8UserId ,u8 *Copy_pu8Location)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	27 97       	sbiw	r28, 0x07	; 7
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	9c 83       	std	Y+4, r25	; 0x04
    1972:	8b 83       	std	Y+3, r24	; 0x03
    1974:	6d 83       	std	Y+5, r22	; 0x05
    1976:	5f 83       	std	Y+7, r21	; 0x07
    1978:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_enuErrState=ES_NOK;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=20 ; i<60 ; i++)
    197e:	84 e1       	ldi	r24, 0x14	; 20
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	15 c0       	rjmp	.+42     	; 0x19ae <EEPROM_enuGetUserLocation+0x52>
	{
		if(Copy_pstrEEPROMHandler->UserID[i] == Copy_u8UserId )
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	82 0f       	add	r24, r18
    1990:	93 1f       	adc	r25, r19
    1992:	fc 01       	movw	r30, r24
    1994:	b9 96       	adiw	r30, 0x29	; 41
    1996:	90 81       	ld	r25, Z
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	98 17       	cp	r25, r24
    199c:	29 f4       	brne	.+10     	; 0x19a8 <EEPROM_enuGetUserLocation+0x4c>
		{
			*Copy_pu8Location = i;
    199e:	ee 81       	ldd	r30, Y+6	; 0x06
    19a0:	ff 81       	ldd	r31, Y+7	; 0x07
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	80 83       	st	Z, r24
			Local_enuErrState=ES_OK;
    19a6:	1a 82       	std	Y+2, r1	; 0x02

ES_t EEPROM_enuGetUserLocation(EEPROM_Handler_t *Copy_pstrEEPROMHandler , u8 Copy_u8UserId ,u8 *Copy_pu8Location)
{
	ES_t Local_enuErrState=ES_NOK;

	for(u8 i=20 ; i<60 ; i++)
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	8f 5f       	subi	r24, 0xFF	; 255
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	89 81       	ldd	r24, Y+1	; 0x01
    19b0:	8c 33       	cpi	r24, 0x3C	; 60
    19b2:	40 f3       	brcs	.-48     	; 0x1984 <EEPROM_enuGetUserLocation+0x28>
			*Copy_pu8Location = i;
			Local_enuErrState=ES_OK;
		}
	}

	return Local_enuErrState;
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    19b6:	27 96       	adiw	r28, 0x07	; 7
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <EEPROM_enuInit>:

void EEPROM_enuInit(void)
{
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	c4 55       	subi	r28, 0x54	; 84
    19d6:	d0 40       	sbci	r29, 0x00	; 0
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
	EEPROM_enuWriteDataByte(50,0); //admin0 id
    19e2:	82 e3       	ldi	r24, 0x32	; 50
    19e4:	60 e0       	ldi	r22, 0x00	; 0
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    19ec:	fe 01       	movw	r30, r28
    19ee:	ef 5a       	subi	r30, 0xAF	; 175
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	a8 e4       	ldi	r26, 0x48	; 72
    19f8:	b2 e4       	ldi	r27, 0x42	; 66
    19fa:	80 83       	st	Z, r24
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	a2 83       	std	Z+2, r26	; 0x02
    1a00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a02:	8e 01       	movw	r16, r28
    1a04:	03 5b       	subi	r16, 0xB3	; 179
    1a06:	1f 4f       	sbci	r17, 0xFF	; 255
    1a08:	fe 01       	movw	r30, r28
    1a0a:	ef 5a       	subi	r30, 0xAF	; 175
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	4a e7       	ldi	r20, 0x7A	; 122
    1a1c:	53 e4       	ldi	r21, 0x43	; 67
    1a1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	f8 01       	movw	r30, r16
    1a28:	80 83       	st	Z, r24
    1a2a:	91 83       	std	Z+1, r25	; 0x01
    1a2c:	a2 83       	std	Z+2, r26	; 0x02
    1a2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a30:	fe 01       	movw	r30, r28
    1a32:	e3 5b       	subi	r30, 0xB3	; 179
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	60 81       	ld	r22, Z
    1a38:	71 81       	ldd	r23, Z+1	; 0x01
    1a3a:	82 81       	ldd	r24, Z+2	; 0x02
    1a3c:	93 81       	ldd	r25, Z+3	; 0x03
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	5f e3       	ldi	r21, 0x3F	; 63
    1a46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a4a:	88 23       	and	r24, r24
    1a4c:	44 f4       	brge	.+16     	; 0x1a5e <EEPROM_enuInit+0x96>
		__ticks = 1;
    1a4e:	fe 01       	movw	r30, r28
    1a50:	e5 5b       	subi	r30, 0xB5	; 181
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	80 83       	st	Z, r24
    1a5c:	64 c0       	rjmp	.+200    	; 0x1b26 <EEPROM_enuInit+0x15e>
	else if (__tmp > 65535)
    1a5e:	fe 01       	movw	r30, r28
    1a60:	e3 5b       	subi	r30, 0xB3	; 179
    1a62:	ff 4f       	sbci	r31, 0xFF	; 255
    1a64:	60 81       	ld	r22, Z
    1a66:	71 81       	ldd	r23, Z+1	; 0x01
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	93 81       	ldd	r25, Z+3	; 0x03
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	0c f0       	brlt	.+2      	; 0x1a7e <EEPROM_enuInit+0xb6>
    1a7c:	43 c0       	rjmp	.+134    	; 0x1b04 <EEPROM_enuInit+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7e:	fe 01       	movw	r30, r28
    1a80:	ef 5a       	subi	r30, 0xAF	; 175
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	60 81       	ld	r22, Z
    1a86:	71 81       	ldd	r23, Z+1	; 0x01
    1a88:	82 81       	ldd	r24, Z+2	; 0x02
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	40 e2       	ldi	r20, 0x20	; 32
    1a92:	51 e4       	ldi	r21, 0x41	; 65
    1a94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8e 01       	movw	r16, r28
    1a9e:	05 5b       	subi	r16, 0xB5	; 181
    1aa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa2:	bc 01       	movw	r22, r24
    1aa4:	cd 01       	movw	r24, r26
    1aa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	f8 01       	movw	r30, r16
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    1ab4:	1f c0       	rjmp	.+62     	; 0x1af4 <EEPROM_enuInit+0x12c>
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e7 5b       	subi	r30, 0xB7	; 183
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	89 e1       	ldi	r24, 0x19	; 25
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	80 83       	st	Z, r24
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	e7 5b       	subi	r30, 0xB7	; 183
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <EEPROM_enuInit+0x106>
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	e7 5b       	subi	r30, 0xB7	; 183
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	de 01       	movw	r26, r28
    1ade:	a5 5b       	subi	r26, 0xB5	; 181
    1ae0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ae2:	fe 01       	movw	r30, r28
    1ae4:	e5 5b       	subi	r30, 0xB5	; 181
    1ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	01 97       	sbiw	r24, 0x01	; 1
    1aee:	11 96       	adiw	r26, 0x01	; 1
    1af0:	9c 93       	st	X, r25
    1af2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1af4:	fe 01       	movw	r30, r28
    1af6:	e5 5b       	subi	r30, 0xB5	; 181
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	00 97       	sbiw	r24, 0x00	; 0
    1b00:	d1 f6       	brne	.-76     	; 0x1ab6 <EEPROM_enuInit+0xee>
    1b02:	27 c0       	rjmp	.+78     	; 0x1b52 <EEPROM_enuInit+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b04:	8e 01       	movw	r16, r28
    1b06:	05 5b       	subi	r16, 0xB5	; 181
    1b08:	1f 4f       	sbci	r17, 0xFF	; 255
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e3 5b       	subi	r30, 0xB3	; 179
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	f8 01       	movw	r30, r16
    1b22:	91 83       	std	Z+1, r25	; 0x01
    1b24:	80 83       	st	Z, r24
    1b26:	de 01       	movw	r26, r28
    1b28:	a9 5b       	subi	r26, 0xB9	; 185
    1b2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e5 5b       	subi	r30, 0xB5	; 181
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	80 81       	ld	r24, Z
    1b34:	91 81       	ldd	r25, Z+1	; 0x01
    1b36:	8d 93       	st	X+, r24
    1b38:	9c 93       	st	X, r25
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	e9 5b       	subi	r30, 0xB9	; 185
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <EEPROM_enuInit+0x17c>
    1b48:	fe 01       	movw	r30, r28
    1b4a:	e9 5b       	subi	r30, 0xB9	; 185
    1b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
	_delay_ms(50);
	EEPROM_enuWriteDataByte(11,20); //admin0 pass
    1b52:	8b e0       	ldi	r24, 0x0B	; 11
    1b54:	64 e1       	ldi	r22, 0x14	; 20
    1b56:	70 e0       	ldi	r23, 0x00	; 0
    1b58:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ed 5b       	subi	r30, 0xBD	; 189
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a8 e4       	ldi	r26, 0x48	; 72
    1b68:	b2 e4       	ldi	r27, 0x42	; 66
    1b6a:	80 83       	st	Z, r24
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	a2 83       	std	Z+2, r26	; 0x02
    1b70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b72:	8e 01       	movw	r16, r28
    1b74:	01 5c       	subi	r16, 0xC1	; 193
    1b76:	1f 4f       	sbci	r17, 0xFF	; 255
    1b78:	fe 01       	movw	r30, r28
    1b7a:	ed 5b       	subi	r30, 0xBD	; 189
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	4a e7       	ldi	r20, 0x7A	; 122
    1b8c:	53 e4       	ldi	r21, 0x43	; 67
    1b8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	f8 01       	movw	r30, r16
    1b98:	80 83       	st	Z, r24
    1b9a:	91 83       	std	Z+1, r25	; 0x01
    1b9c:	a2 83       	std	Z+2, r26	; 0x02
    1b9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	ff 96       	adiw	r30, 0x3f	; 63
    1ba4:	60 81       	ld	r22, Z
    1ba6:	71 81       	ldd	r23, Z+1	; 0x01
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	93 81       	ldd	r25, Z+3	; 0x03
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5f e3       	ldi	r21, 0x3F	; 63
    1bb4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bb8:	88 23       	and	r24, r24
    1bba:	2c f4       	brge	.+10     	; 0x1bc6 <EEPROM_enuInit+0x1fe>
		__ticks = 1;
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9e af       	std	Y+62, r25	; 0x3e
    1bc2:	8d af       	std	Y+61, r24	; 0x3d
    1bc4:	46 c0       	rjmp	.+140    	; 0x1c52 <EEPROM_enuInit+0x28a>
	else if (__tmp > 65535)
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	ff 96       	adiw	r30, 0x3f	; 63
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	64 f5       	brge	.+88     	; 0x1c3a <EEPROM_enuInit+0x272>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be2:	fe 01       	movw	r30, r28
    1be4:	ed 5b       	subi	r30, 0xBD	; 189
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e2       	ldi	r20, 0x20	; 32
    1bf6:	51 e4       	ldi	r21, 0x41	; 65
    1bf8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	bc 01       	movw	r22, r24
    1c02:	cd 01       	movw	r24, r26
    1c04:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	9e af       	std	Y+62, r25	; 0x3e
    1c0e:	8d af       	std	Y+61, r24	; 0x3d
    1c10:	0f c0       	rjmp	.+30     	; 0x1c30 <EEPROM_enuInit+0x268>
    1c12:	89 e1       	ldi	r24, 0x19	; 25
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	9c af       	std	Y+60, r25	; 0x3c
    1c18:	8b af       	std	Y+59, r24	; 0x3b
    1c1a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c1c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <EEPROM_enuInit+0x256>
    1c22:	9c af       	std	Y+60, r25	; 0x3c
    1c24:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c26:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c28:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	9e af       	std	Y+62, r25	; 0x3e
    1c2e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c30:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c32:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	69 f7       	brne	.-38     	; 0x1c12 <EEPROM_enuInit+0x24a>
    1c38:	16 c0       	rjmp	.+44     	; 0x1c66 <EEPROM_enuInit+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ff 96       	adiw	r30, 0x3f	; 63
    1c3e:	60 81       	ld	r22, Z
    1c40:	71 81       	ldd	r23, Z+1	; 0x01
    1c42:	82 81       	ldd	r24, Z+2	; 0x02
    1c44:	93 81       	ldd	r25, Z+3	; 0x03
    1c46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9e af       	std	Y+62, r25	; 0x3e
    1c50:	8d af       	std	Y+61, r24	; 0x3d
    1c52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c56:	9a af       	std	Y+58, r25	; 0x3a
    1c58:	89 af       	std	Y+57, r24	; 0x39
    1c5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1c5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <EEPROM_enuInit+0x296>
    1c62:	9a af       	std	Y+58, r25	; 0x3a
    1c64:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);

	EEPROM_enuWriteDataByte(92,40); //user0 id
    1c66:	8c e5       	ldi	r24, 0x5C	; 92
    1c68:	68 e2       	ldi	r22, 0x28	; 40
    1c6a:	70 e0       	ldi	r23, 0x00	; 0
    1c6c:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a8 e4       	ldi	r26, 0x48	; 72
    1c76:	b2 e4       	ldi	r27, 0x42	; 66
    1c78:	8d ab       	std	Y+53, r24	; 0x35
    1c7a:	9e ab       	std	Y+54, r25	; 0x36
    1c7c:	af ab       	std	Y+55, r26	; 0x37
    1c7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c80:	6d a9       	ldd	r22, Y+53	; 0x35
    1c82:	7e a9       	ldd	r23, Y+54	; 0x36
    1c84:	8f a9       	ldd	r24, Y+55	; 0x37
    1c86:	98 ad       	ldd	r25, Y+56	; 0x38
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	4a e7       	ldi	r20, 0x7A	; 122
    1c8e:	53 e4       	ldi	r21, 0x43	; 67
    1c90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	89 ab       	std	Y+49, r24	; 0x31
    1c9a:	9a ab       	std	Y+50, r25	; 0x32
    1c9c:	ab ab       	std	Y+51, r26	; 0x33
    1c9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <EEPROM_enuInit+0x2fa>
		__ticks = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	98 ab       	std	Y+48, r25	; 0x30
    1cbe:	8f a7       	std	Y+47, r24	; 0x2f
    1cc0:	3f c0       	rjmp	.+126    	; 0x1d40 <EEPROM_enuInit+0x378>
	else if (__tmp > 65535)
    1cc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1cc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	3f ef       	ldi	r19, 0xFF	; 255
    1cce:	4f e7       	ldi	r20, 0x7F	; 127
    1cd0:	57 e4       	ldi	r21, 0x47	; 71
    1cd2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cd6:	18 16       	cp	r1, r24
    1cd8:	4c f5       	brge	.+82     	; 0x1d2c <EEPROM_enuInit+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cda:	6d a9       	ldd	r22, Y+53	; 0x35
    1cdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1cde:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	40 e2       	ldi	r20, 0x20	; 32
    1ce8:	51 e4       	ldi	r21, 0x41	; 65
    1cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	bc 01       	movw	r22, r24
    1cf4:	cd 01       	movw	r24, r26
    1cf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	98 ab       	std	Y+48, r25	; 0x30
    1d00:	8f a7       	std	Y+47, r24	; 0x2f
    1d02:	0f c0       	rjmp	.+30     	; 0x1d22 <EEPROM_enuInit+0x35a>
    1d04:	89 e1       	ldi	r24, 0x19	; 25
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	9e a7       	std	Y+46, r25	; 0x2e
    1d0a:	8d a7       	std	Y+45, r24	; 0x2d
    1d0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <EEPROM_enuInit+0x348>
    1d14:	9e a7       	std	Y+46, r25	; 0x2e
    1d16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d1c:	01 97       	sbiw	r24, 0x01	; 1
    1d1e:	98 ab       	std	Y+48, r25	; 0x30
    1d20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d24:	98 a9       	ldd	r25, Y+48	; 0x30
    1d26:	00 97       	sbiw	r24, 0x00	; 0
    1d28:	69 f7       	brne	.-38     	; 0x1d04 <EEPROM_enuInit+0x33c>
    1d2a:	14 c0       	rjmp	.+40     	; 0x1d54 <EEPROM_enuInit+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1d30:	8b a9       	ldd	r24, Y+51	; 0x33
    1d32:	9c a9       	ldd	r25, Y+52	; 0x34
    1d34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	98 ab       	std	Y+48, r25	; 0x30
    1d3e:	8f a7       	std	Y+47, r24	; 0x2f
    1d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d42:	98 a9       	ldd	r25, Y+48	; 0x30
    1d44:	9c a7       	std	Y+44, r25	; 0x2c
    1d46:	8b a7       	std	Y+43, r24	; 0x2b
    1d48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <EEPROM_enuInit+0x384>
    1d50:	9c a7       	std	Y+44, r25	; 0x2c
    1d52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);
	EEPROM_enuWriteDataByte(15,60); // user0 pass
    1d54:	8f e0       	ldi	r24, 0x0F	; 15
    1d56:	6c e3       	ldi	r22, 0x3C	; 60
    1d58:	70 e0       	ldi	r23, 0x00	; 0
    1d5a:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a8 e4       	ldi	r26, 0x48	; 72
    1d64:	b2 e4       	ldi	r27, 0x42	; 66
    1d66:	8f a3       	std	Y+39, r24	; 0x27
    1d68:	98 a7       	std	Y+40, r25	; 0x28
    1d6a:	a9 a7       	std	Y+41, r26	; 0x29
    1d6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6e:	6f a1       	ldd	r22, Y+39	; 0x27
    1d70:	78 a5       	ldd	r23, Y+40	; 0x28
    1d72:	89 a5       	ldd	r24, Y+41	; 0x29
    1d74:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	4a e7       	ldi	r20, 0x7A	; 122
    1d7c:	53 e4       	ldi	r21, 0x43	; 67
    1d7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	8b a3       	std	Y+35, r24	; 0x23
    1d88:	9c a3       	std	Y+36, r25	; 0x24
    1d8a:	ad a3       	std	Y+37, r26	; 0x25
    1d8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d90:	7c a1       	ldd	r23, Y+36	; 0x24
    1d92:	8d a1       	ldd	r24, Y+37	; 0x25
    1d94:	9e a1       	ldd	r25, Y+38	; 0x26
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e8       	ldi	r20, 0x80	; 128
    1d9c:	5f e3       	ldi	r21, 0x3F	; 63
    1d9e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1da2:	88 23       	and	r24, r24
    1da4:	2c f4       	brge	.+10     	; 0x1db0 <EEPROM_enuInit+0x3e8>
		__ticks = 1;
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9a a3       	std	Y+34, r25	; 0x22
    1dac:	89 a3       	std	Y+33, r24	; 0x21
    1dae:	3f c0       	rjmp	.+126    	; 0x1e2e <EEPROM_enuInit+0x466>
	else if (__tmp > 65535)
    1db0:	6b a1       	ldd	r22, Y+35	; 0x23
    1db2:	7c a1       	ldd	r23, Y+36	; 0x24
    1db4:	8d a1       	ldd	r24, Y+37	; 0x25
    1db6:	9e a1       	ldd	r25, Y+38	; 0x26
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	3f ef       	ldi	r19, 0xFF	; 255
    1dbc:	4f e7       	ldi	r20, 0x7F	; 127
    1dbe:	57 e4       	ldi	r21, 0x47	; 71
    1dc0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1dc4:	18 16       	cp	r1, r24
    1dc6:	4c f5       	brge	.+82     	; 0x1e1a <EEPROM_enuInit+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dca:	78 a5       	ldd	r23, Y+40	; 0x28
    1dcc:	89 a5       	ldd	r24, Y+41	; 0x29
    1dce:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	40 e2       	ldi	r20, 0x20	; 32
    1dd6:	51 e4       	ldi	r21, 0x41	; 65
    1dd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ddc:	dc 01       	movw	r26, r24
    1dde:	cb 01       	movw	r24, r22
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de8:	dc 01       	movw	r26, r24
    1dea:	cb 01       	movw	r24, r22
    1dec:	9a a3       	std	Y+34, r25	; 0x22
    1dee:	89 a3       	std	Y+33, r24	; 0x21
    1df0:	0f c0       	rjmp	.+30     	; 0x1e10 <EEPROM_enuInit+0x448>
    1df2:	89 e1       	ldi	r24, 0x19	; 25
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	98 a3       	std	Y+32, r25	; 0x20
    1df8:	8f 8f       	std	Y+31, r24	; 0x1f
    1dfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dfc:	98 a1       	ldd	r25, Y+32	; 0x20
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <EEPROM_enuInit+0x436>
    1e02:	98 a3       	std	Y+32, r25	; 0x20
    1e04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e06:	89 a1       	ldd	r24, Y+33	; 0x21
    1e08:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	9a a3       	std	Y+34, r25	; 0x22
    1e0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e10:	89 a1       	ldd	r24, Y+33	; 0x21
    1e12:	9a a1       	ldd	r25, Y+34	; 0x22
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	69 f7       	brne	.-38     	; 0x1df2 <EEPROM_enuInit+0x42a>
    1e18:	14 c0       	rjmp	.+40     	; 0x1e42 <EEPROM_enuInit+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e20:	9e a1       	ldd	r25, Y+38	; 0x26
    1e22:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	9a a3       	std	Y+34, r25	; 0x22
    1e2c:	89 a3       	std	Y+33, r24	; 0x21
    1e2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1e30:	9a a1       	ldd	r25, Y+34	; 0x22
    1e32:	9e 8f       	std	Y+30, r25	; 0x1e
    1e34:	8d 8f       	std	Y+29, r24	; 0x1d
    1e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e3a:	01 97       	sbiw	r24, 0x01	; 1
    1e3c:	f1 f7       	brne	.-4      	; 0x1e3a <EEPROM_enuInit+0x472>
    1e3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e40:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(50);

	EEPROM_enuWriteDataByte(1,90); // number of admins
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	6a e5       	ldi	r22, 0x5A	; 90
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	a8 e4       	ldi	r26, 0x48	; 72
    1e52:	b2 e4       	ldi	r27, 0x42	; 66
    1e54:	89 8f       	std	Y+25, r24	; 0x19
    1e56:	9a 8f       	std	Y+26, r25	; 0x1a
    1e58:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	4a e7       	ldi	r20, 0x7A	; 122
    1e6a:	53 e4       	ldi	r21, 0x43	; 67
    1e6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	8d 8b       	std	Y+21, r24	; 0x15
    1e76:	9e 8b       	std	Y+22, r25	; 0x16
    1e78:	af 8b       	std	Y+23, r26	; 0x17
    1e7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e80:	8f 89       	ldd	r24, Y+23	; 0x17
    1e82:	98 8d       	ldd	r25, Y+24	; 0x18
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e90:	88 23       	and	r24, r24
    1e92:	2c f4       	brge	.+10     	; 0x1e9e <EEPROM_enuInit+0x4d6>
		__ticks = 1;
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	9c 8b       	std	Y+20, r25	; 0x14
    1e9a:	8b 8b       	std	Y+19, r24	; 0x13
    1e9c:	3f c0       	rjmp	.+126    	; 0x1f1c <EEPROM_enuInit+0x554>
	else if (__tmp > 65535)
    1e9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	4c f5       	brge	.+82     	; 0x1f08 <EEPROM_enuInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	69 8d       	ldd	r22, Y+25	; 0x19
    1eb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ebc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e2       	ldi	r20, 0x20	; 32
    1ec4:	51 e4       	ldi	r21, 0x41	; 65
    1ec6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9c 8b       	std	Y+20, r25	; 0x14
    1edc:	8b 8b       	std	Y+19, r24	; 0x13
    1ede:	0f c0       	rjmp	.+30     	; 0x1efe <EEPROM_enuInit+0x536>
    1ee0:	89 e1       	ldi	r24, 0x19	; 25
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9a 8b       	std	Y+18, r25	; 0x12
    1ee6:	89 8b       	std	Y+17, r24	; 0x11
    1ee8:	89 89       	ldd	r24, Y+17	; 0x11
    1eea:	9a 89       	ldd	r25, Y+18	; 0x12
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	f1 f7       	brne	.-4      	; 0x1eec <EEPROM_enuInit+0x524>
    1ef0:	9a 8b       	std	Y+18, r25	; 0x12
    1ef2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	9c 8b       	std	Y+20, r25	; 0x14
    1efc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efe:	8b 89       	ldd	r24, Y+19	; 0x13
    1f00:	9c 89       	ldd	r25, Y+20	; 0x14
    1f02:	00 97       	sbiw	r24, 0x00	; 0
    1f04:	69 f7       	brne	.-38     	; 0x1ee0 <EEPROM_enuInit+0x518>
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <EEPROM_enuInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f08:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f10:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	9c 8b       	std	Y+20, r25	; 0x14
    1f1a:	8b 8b       	std	Y+19, r24	; 0x13
    1f1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f20:	98 8b       	std	Y+16, r25	; 0x10
    1f22:	8f 87       	std	Y+15, r24	; 0x0f
    1f24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f26:	98 89       	ldd	r25, Y+16	; 0x10
    1f28:	01 97       	sbiw	r24, 0x01	; 1
    1f2a:	f1 f7       	brne	.-4      	; 0x1f28 <EEPROM_enuInit+0x560>
    1f2c:	98 8b       	std	Y+16, r25	; 0x10
    1f2e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);
	EEPROM_enuWriteDataByte(1,95); // number of users
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	6f e5       	ldi	r22, 0x5F	; 95
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	0e 94 da 15 	call	0x2bb4	; 0x2bb4 <EEPROM_enuWriteDataByte>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	a8 e4       	ldi	r26, 0x48	; 72
    1f40:	b2 e4       	ldi	r27, 0x42	; 66
    1f42:	8b 87       	std	Y+11, r24	; 0x0b
    1f44:	9c 87       	std	Y+12, r25	; 0x0c
    1f46:	ad 87       	std	Y+13, r26	; 0x0d
    1f48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4a e7       	ldi	r20, 0x7A	; 122
    1f58:	53 e4       	ldi	r21, 0x43	; 67
    1f5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	8f 83       	std	Y+7, r24	; 0x07
    1f64:	98 87       	std	Y+8, r25	; 0x08
    1f66:	a9 87       	std	Y+9, r26	; 0x09
    1f68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f6c:	78 85       	ldd	r23, Y+8	; 0x08
    1f6e:	89 85       	ldd	r24, Y+9	; 0x09
    1f70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e8       	ldi	r20, 0x80	; 128
    1f78:	5f e3       	ldi	r21, 0x3F	; 63
    1f7a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	2c f4       	brge	.+10     	; 0x1f8c <EEPROM_enuInit+0x5c4>
		__ticks = 1;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9e 83       	std	Y+6, r25	; 0x06
    1f88:	8d 83       	std	Y+5, r24	; 0x05
    1f8a:	3f c0       	rjmp	.+126    	; 0x200a <EEPROM_enuInit+0x642>
	else if (__tmp > 65535)
    1f8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f8e:	78 85       	ldd	r23, Y+8	; 0x08
    1f90:	89 85       	ldd	r24, Y+9	; 0x09
    1f92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	3f ef       	ldi	r19, 0xFF	; 255
    1f98:	4f e7       	ldi	r20, 0x7F	; 127
    1f9a:	57 e4       	ldi	r21, 0x47	; 71
    1f9c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fa0:	18 16       	cp	r1, r24
    1fa2:	4c f5       	brge	.+82     	; 0x1ff6 <EEPROM_enuInit+0x62e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1faa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e 83       	std	Y+6, r25	; 0x06
    1fca:	8d 83       	std	Y+5, r24	; 0x05
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <EEPROM_enuInit+0x624>
    1fce:	89 e1       	ldi	r24, 0x19	; 25
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 83       	std	Y+4, r25	; 0x04
    1fd4:	8b 83       	std	Y+3, r24	; 0x03
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <EEPROM_enuInit+0x612>
    1fde:	9c 83       	std	Y+4, r25	; 0x04
    1fe0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9e 83       	std	Y+6, r25	; 0x06
    1fea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <EEPROM_enuInit+0x606>
    1ff4:	14 c0       	rjmp	.+40     	; 0x201e <EEPROM_enuInit+0x656>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ff8:	78 85       	ldd	r23, Y+8	; 0x08
    1ffa:	89 85       	ldd	r24, Y+9	; 0x09
    1ffc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ffe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	8d 81       	ldd	r24, Y+5	; 0x05
    200c:	9e 81       	ldd	r25, Y+6	; 0x06
    200e:	9a 83       	std	Y+2, r25	; 0x02
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	9a 81       	ldd	r25, Y+2	; 0x02
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	f1 f7       	brne	.-4      	; 0x2016 <EEPROM_enuInit+0x64e>
    201a:	9a 83       	std	Y+2, r25	; 0x02
    201c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

}
    201e:	cc 5a       	subi	r28, 0xAC	; 172
    2020:	df 4f       	sbci	r29, 0xFF	; 255
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	de bf       	out	0x3e, r29	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	cd bf       	out	0x3d, r28	; 61
    202c:	cf 91       	pop	r28
    202e:	df 91       	pop	r29
    2030:	1f 91       	pop	r17
    2032:	0f 91       	pop	r16
    2034:	08 95       	ret

00002036 <DIO_enuInit>:


/*****************************************************************/

ES_t DIO_enuInit(void)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	89 83       	std	Y+1, r24	; 0x01

	/*Setting the directions of all pins*/
	DDRA=CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
    2044:	ea e3       	ldi	r30, 0x3A	; 58
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	8f ef       	ldi	r24, 0xFF	; 255
    204a:	80 83       	st	Z, r24
	DDRB=CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
    204c:	e7 e3       	ldi	r30, 0x37	; 55
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	80 83       	st	Z, r24
	DDRC=CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
    2054:	e4 e3       	ldi	r30, 0x34	; 52
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	8f ef       	ldi	r24, 0xFF	; 255
    205a:	80 83       	st	Z, r24
	DDRD=CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
    205c:	e1 e3       	ldi	r30, 0x31	; 49
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	10 82       	st	Z, r1

	/*Set a value for each pin*/
	PORTA=CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
    2062:	eb e3       	ldi	r30, 0x3B	; 59
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	10 82       	st	Z, r1
	PORTB=CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
    2068:	e8 e3       	ldi	r30, 0x38	; 56
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	10 82       	st	Z, r1
	PORTC=CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
    206e:	e5 e3       	ldi	r30, 0x35	; 53
    2070:	f0 e0       	ldi	r31, 0x00	; 0
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	80 83       	st	Z, r24
	PORTD=CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
    2076:	e2 e3       	ldi	r30, 0x32	; 50
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	80 83       	st	Z, r24

	/*After all set the error state variable by "OK" state*/
	Local_enuErrorState = ES_OK;
    207e:	19 82       	std	Y+1, r1	; 0x01

	/*Then return error state variable*/
	return Local_enuErrorState;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
}//End of DIO_enuInit()
    2082:	0f 90       	pop	r0
    2084:	cf 91       	pop	r28
    2086:	df 91       	pop	r29
    2088:	08 95       	ret

0000208a <DIO_enuSetPortDirection>:


/*****************************************************************/

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8PortDir)
{
    208a:	df 93       	push	r29
    208c:	cf 93       	push	r28
    208e:	00 d0       	rcall	.+0      	; 0x2090 <DIO_enuSetPortDirection+0x6>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <DIO_enuSetPortDirection+0x8>
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
    2098:	8a 83       	std	Y+2, r24	; 0x02
    209a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8PortID)
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	3d 83       	std	Y+5, r19	; 0x05
    20a8:	2c 83       	std	Y+4, r18	; 0x04
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	9d 81       	ldd	r25, Y+5	; 0x05
    20ae:	81 30       	cpi	r24, 0x01	; 1
    20b0:	91 05       	cpc	r25, r1
    20b2:	d9 f0       	breq	.+54     	; 0x20ea <DIO_enuSetPortDirection+0x60>
    20b4:	2c 81       	ldd	r18, Y+4	; 0x04
    20b6:	3d 81       	ldd	r19, Y+5	; 0x05
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	2c f4       	brge	.+10     	; 0x20c8 <DIO_enuSetPortDirection+0x3e>
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	61 f0       	breq	.+24     	; 0x20de <DIO_enuSetPortDirection+0x54>
    20c6:	23 c0       	rjmp	.+70     	; 0x210e <DIO_enuSetPortDirection+0x84>
    20c8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ca:	3d 81       	ldd	r19, Y+5	; 0x05
    20cc:	22 30       	cpi	r18, 0x02	; 2
    20ce:	31 05       	cpc	r19, r1
    20d0:	91 f0       	breq	.+36     	; 0x20f6 <DIO_enuSetPortDirection+0x6c>
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9d 81       	ldd	r25, Y+5	; 0x05
    20d6:	83 30       	cpi	r24, 0x03	; 3
    20d8:	91 05       	cpc	r25, r1
    20da:	99 f0       	breq	.+38     	; 0x2102 <DIO_enuSetPortDirection+0x78>
    20dc:	18 c0       	rjmp	.+48     	; 0x210e <DIO_enuSetPortDirection+0x84>
	{
	case DIO_PORTA :
		DDRA =Copy_u8PortDir;
    20de:	ea e3       	ldi	r30, 0x3A	; 58
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    20e6:	19 82       	std	Y+1, r1	; 0x01
    20e8:	14 c0       	rjmp	.+40     	; 0x2112 <DIO_enuSetPortDirection+0x88>
		break;
	case DIO_PORTB :
		DDRB =Copy_u8PortDir;
    20ea:	e7 e3       	ldi	r30, 0x37	; 55
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    20f2:	19 82       	std	Y+1, r1	; 0x01
    20f4:	0e c0       	rjmp	.+28     	; 0x2112 <DIO_enuSetPortDirection+0x88>
		break;
	case DIO_PORTC :
		DDRC =Copy_u8PortDir;
    20f6:	e4 e3       	ldi	r30, 0x34	; 52
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    20fe:	19 82       	std	Y+1, r1	; 0x01
    2100:	08 c0       	rjmp	.+16     	; 0x2112 <DIO_enuSetPortDirection+0x88>
		break;
	case DIO_PORTD :
		DDRD =Copy_u8PortDir;
    2102:	e1 e3       	ldi	r30, 0x31	; 49
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	8b 81       	ldd	r24, Y+3	; 0x03
    2108:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    210a:	19 82       	std	Y+1, r1	; 0x01
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <DIO_enuSetPortDirection+0x88>
		break;
	default :
		Local_enuErrorState = ES_OUT_OF_RANGE;
    210e:	83 e0       	ldi	r24, 0x03	; 3
    2110:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return Local_enuErrorState;
    2112:	89 81       	ldd	r24, Y+1	; 0x01
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <DIO_enuSetPortValue>:
/*****************************************************************/

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <DIO_enuSetPortValue+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <DIO_enuSetPortValue+0x8>
    212c:	0f 92       	push	r0
    212e:	cd b7       	in	r28, 0x3d	; 61
    2130:	de b7       	in	r29, 0x3e	; 62
    2132:	8a 83       	std	Y+2, r24	; 0x02
    2134:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	28 2f       	mov	r18, r24
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	3d 83       	std	Y+5, r19	; 0x05
    2142:	2c 83       	std	Y+4, r18	; 0x04
    2144:	8c 81       	ldd	r24, Y+4	; 0x04
    2146:	9d 81       	ldd	r25, Y+5	; 0x05
    2148:	81 30       	cpi	r24, 0x01	; 1
    214a:	91 05       	cpc	r25, r1
    214c:	d9 f0       	breq	.+54     	; 0x2184 <DIO_enuSetPortValue+0x60>
    214e:	2c 81       	ldd	r18, Y+4	; 0x04
    2150:	3d 81       	ldd	r19, Y+5	; 0x05
    2152:	22 30       	cpi	r18, 0x02	; 2
    2154:	31 05       	cpc	r19, r1
    2156:	2c f4       	brge	.+10     	; 0x2162 <DIO_enuSetPortValue+0x3e>
    2158:	8c 81       	ldd	r24, Y+4	; 0x04
    215a:	9d 81       	ldd	r25, Y+5	; 0x05
    215c:	00 97       	sbiw	r24, 0x00	; 0
    215e:	61 f0       	breq	.+24     	; 0x2178 <DIO_enuSetPortValue+0x54>
    2160:	23 c0       	rjmp	.+70     	; 0x21a8 <DIO_enuSetPortValue+0x84>
    2162:	2c 81       	ldd	r18, Y+4	; 0x04
    2164:	3d 81       	ldd	r19, Y+5	; 0x05
    2166:	22 30       	cpi	r18, 0x02	; 2
    2168:	31 05       	cpc	r19, r1
    216a:	91 f0       	breq	.+36     	; 0x2190 <DIO_enuSetPortValue+0x6c>
    216c:	8c 81       	ldd	r24, Y+4	; 0x04
    216e:	9d 81       	ldd	r25, Y+5	; 0x05
    2170:	83 30       	cpi	r24, 0x03	; 3
    2172:	91 05       	cpc	r25, r1
    2174:	99 f0       	breq	.+38     	; 0x219c <DIO_enuSetPortValue+0x78>
    2176:	18 c0       	rjmp	.+48     	; 0x21a8 <DIO_enuSetPortValue+0x84>
	{
	case DIO_PORTA :
		PORTA =Copy_u8Value;
    2178:	eb e3       	ldi	r30, 0x3B	; 59
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    2180:	19 82       	std	Y+1, r1	; 0x01
    2182:	14 c0       	rjmp	.+40     	; 0x21ac <DIO_enuSetPortValue+0x88>
		break;
	case DIO_PORTB :
		PORTB =Copy_u8Value;
    2184:	e8 e3       	ldi	r30, 0x38	; 56
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    218c:	19 82       	std	Y+1, r1	; 0x01
    218e:	0e c0       	rjmp	.+28     	; 0x21ac <DIO_enuSetPortValue+0x88>
		break;
	case DIO_PORTC :
		PORTC =Copy_u8Value;
    2190:	e5 e3       	ldi	r30, 0x35	; 53
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    2198:	19 82       	std	Y+1, r1	; 0x01
    219a:	08 c0       	rjmp	.+16     	; 0x21ac <DIO_enuSetPortValue+0x88>
		break;
	case DIO_PORTD :
		PORTD =Copy_u8Value;
    219c:	e2 e3       	ldi	r30, 0x32	; 50
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	8b 81       	ldd	r24, Y+3	; 0x03
    21a2:	80 83       	st	Z, r24
		Local_enuErrorState = ES_OK;
    21a4:	19 82       	std	Y+1, r1	; 0x01
    21a6:	02 c0       	rjmp	.+4      	; 0x21ac <DIO_enuSetPortValue+0x88>
		break;
	default :
		Local_enuErrorState = ES_OUT_OF_RANGE;
    21a8:	83 e0       	ldi	r24, 0x03	; 3
    21aa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorState;
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	cf 91       	pop	r28
    21ba:	df 91       	pop	r29
    21bc:	08 95       	ret

000021be <DIO_enuTogPort>:
/*****************************************************************/

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
    21be:	df 93       	push	r29
    21c0:	cf 93       	push	r28
    21c2:	00 d0       	rcall	.+0      	; 0x21c4 <DIO_enuTogPort+0x6>
    21c4:	00 d0       	rcall	.+0      	; 0x21c6 <DIO_enuTogPort+0x8>
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8PortID)
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	3c 83       	std	Y+4, r19	; 0x04
    21d8:	2b 83       	std	Y+3, r18	; 0x03
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	91 05       	cpc	r25, r1
    21e2:	f1 f0       	breq	.+60     	; 0x2220 <DIO_enuTogPort+0x62>
    21e4:	2b 81       	ldd	r18, Y+3	; 0x03
    21e6:	3c 81       	ldd	r19, Y+4	; 0x04
    21e8:	22 30       	cpi	r18, 0x02	; 2
    21ea:	31 05       	cpc	r19, r1
    21ec:	2c f4       	brge	.+10     	; 0x21f8 <DIO_enuTogPort+0x3a>
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	9c 81       	ldd	r25, Y+4	; 0x04
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	61 f0       	breq	.+24     	; 0x220e <DIO_enuTogPort+0x50>
    21f6:	2f c0       	rjmp	.+94     	; 0x2256 <DIO_enuTogPort+0x98>
    21f8:	2b 81       	ldd	r18, Y+3	; 0x03
    21fa:	3c 81       	ldd	r19, Y+4	; 0x04
    21fc:	22 30       	cpi	r18, 0x02	; 2
    21fe:	31 05       	cpc	r19, r1
    2200:	c1 f0       	breq	.+48     	; 0x2232 <DIO_enuTogPort+0x74>
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	9c 81       	ldd	r25, Y+4	; 0x04
    2206:	83 30       	cpi	r24, 0x03	; 3
    2208:	91 05       	cpc	r25, r1
    220a:	e1 f0       	breq	.+56     	; 0x2244 <DIO_enuTogPort+0x86>
    220c:	24 c0       	rjmp	.+72     	; 0x2256 <DIO_enuTogPort+0x98>
	{
	case DIO_PORTA :
		PORTA = ~PORTA;
    220e:	ab e3       	ldi	r26, 0x3B	; 59
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	eb e3       	ldi	r30, 0x3B	; 59
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	80 95       	com	r24
    221a:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    221c:	19 82       	std	Y+1, r1	; 0x01
    221e:	1d c0       	rjmp	.+58     	; 0x225a <DIO_enuTogPort+0x9c>
		break;
	case DIO_PORTB :
		PORTB = ~PORTB;
    2220:	a8 e3       	ldi	r26, 0x38	; 56
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	e8 e3       	ldi	r30, 0x38	; 56
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	80 95       	com	r24
    222c:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    222e:	19 82       	std	Y+1, r1	; 0x01
    2230:	14 c0       	rjmp	.+40     	; 0x225a <DIO_enuTogPort+0x9c>
		break;
	case DIO_PORTC :
		PORTC = ~PORTC;
    2232:	a5 e3       	ldi	r26, 0x35	; 53
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	e5 e3       	ldi	r30, 0x35	; 53
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	80 95       	com	r24
    223e:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    2240:	19 82       	std	Y+1, r1	; 0x01
    2242:	0b c0       	rjmp	.+22     	; 0x225a <DIO_enuTogPort+0x9c>
		break;
	case DIO_PORTD :
		PORTD = ~PORTD;
    2244:	a2 e3       	ldi	r26, 0x32	; 50
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	e2 e3       	ldi	r30, 0x32	; 50
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	80 95       	com	r24
    2250:	8c 93       	st	X, r24
		Local_enuErrorState = ES_OK;
    2252:	19 82       	std	Y+1, r1	; 0x01
    2254:	02 c0       	rjmp	.+4      	; 0x225a <DIO_enuTogPort+0x9c>
		break;
	default :
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2256:	83 e0       	ldi	r24, 0x03	; 3
    2258:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return Local_enuErrorState;
    225a:	89 81       	ldd	r24, Y+1	; 0x01
}
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	0f 90       	pop	r0
    2264:	cf 91       	pop	r28
    2266:	df 91       	pop	r29
    2268:	08 95       	ret

0000226a <DIO_enuGetPortValue>:
/*****************************************************************/

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8* Copy_pu8Value)
{
    226a:	df 93       	push	r29
    226c:	cf 93       	push	r28
    226e:	00 d0       	rcall	.+0      	; 0x2270 <DIO_enuGetPortValue+0x6>
    2270:	00 d0       	rcall	.+0      	; 0x2272 <DIO_enuGetPortValue+0x8>
    2272:	00 d0       	rcall	.+0      	; 0x2274 <DIO_enuGetPortValue+0xa>
    2274:	cd b7       	in	r28, 0x3d	; 61
    2276:	de b7       	in	r29, 0x3e	; 62
    2278:	8a 83       	std	Y+2, r24	; 0x02
    227a:	7c 83       	std	Y+4, r23	; 0x04
    227c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Value != NULL)
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	9c 81       	ldd	r25, Y+4	; 0x04
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	09 f4       	brne	.+2      	; 0x228c <DIO_enuGetPortValue+0x22>
    228a:	42 c0       	rjmp	.+132    	; 0x2310 <DIO_enuGetPortValue+0xa6>
	{
		switch(Copy_u8PortID)
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	3e 83       	std	Y+6, r19	; 0x06
    2294:	2d 83       	std	Y+5, r18	; 0x05
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	9e 81       	ldd	r25, Y+6	; 0x06
    229a:	81 30       	cpi	r24, 0x01	; 1
    229c:	91 05       	cpc	r25, r1
    229e:	e9 f0       	breq	.+58     	; 0x22da <DIO_enuGetPortValue+0x70>
    22a0:	2d 81       	ldd	r18, Y+5	; 0x05
    22a2:	3e 81       	ldd	r19, Y+6	; 0x06
    22a4:	22 30       	cpi	r18, 0x02	; 2
    22a6:	31 05       	cpc	r19, r1
    22a8:	2c f4       	brge	.+10     	; 0x22b4 <DIO_enuGetPortValue+0x4a>
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	00 97       	sbiw	r24, 0x00	; 0
    22b0:	61 f0       	breq	.+24     	; 0x22ca <DIO_enuGetPortValue+0x60>
    22b2:	2b c0       	rjmp	.+86     	; 0x230a <DIO_enuGetPortValue+0xa0>
    22b4:	2d 81       	ldd	r18, Y+5	; 0x05
    22b6:	3e 81       	ldd	r19, Y+6	; 0x06
    22b8:	22 30       	cpi	r18, 0x02	; 2
    22ba:	31 05       	cpc	r19, r1
    22bc:	b1 f0       	breq	.+44     	; 0x22ea <DIO_enuGetPortValue+0x80>
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	83 30       	cpi	r24, 0x03	; 3
    22c4:	91 05       	cpc	r25, r1
    22c6:	c9 f0       	breq	.+50     	; 0x22fa <DIO_enuGetPortValue+0x90>
    22c8:	20 c0       	rjmp	.+64     	; 0x230a <DIO_enuGetPortValue+0xa0>
		{
		case DIO_PORTA:
			*Copy_pu8Value = PINA;
    22ca:	e9 e3       	ldi	r30, 0x39	; 57
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	eb 81       	ldd	r30, Y+3	; 0x03
    22d2:	fc 81       	ldd	r31, Y+4	; 0x04
    22d4:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    22d6:	19 82       	std	Y+1, r1	; 0x01
    22d8:	1d c0       	rjmp	.+58     	; 0x2314 <DIO_enuGetPortValue+0xaa>
			break;
		case DIO_PORTB:
			*Copy_pu8Value = PIND;
    22da:	e0 e3       	ldi	r30, 0x30	; 48
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	eb 81       	ldd	r30, Y+3	; 0x03
    22e2:	fc 81       	ldd	r31, Y+4	; 0x04
    22e4:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    22e6:	19 82       	std	Y+1, r1	; 0x01
    22e8:	15 c0       	rjmp	.+42     	; 0x2314 <DIO_enuGetPortValue+0xaa>
			break;
		case DIO_PORTC:
			*Copy_pu8Value = PINC;
    22ea:	e3 e3       	ldi	r30, 0x33	; 51
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	eb 81       	ldd	r30, Y+3	; 0x03
    22f2:	fc 81       	ldd	r31, Y+4	; 0x04
    22f4:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    22f6:	19 82       	std	Y+1, r1	; 0x01
    22f8:	0d c0       	rjmp	.+26     	; 0x2314 <DIO_enuGetPortValue+0xaa>
			break;
		case DIO_PORTD:
			*Copy_pu8Value = PIND;
    22fa:	e0 e3       	ldi	r30, 0x30	; 48
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	eb 81       	ldd	r30, Y+3	; 0x03
    2302:	fc 81       	ldd	r31, Y+4	; 0x04
    2304:	80 83       	st	Z, r24
			Local_enuErrorState = ES_OK;
    2306:	19 82       	std	Y+1, r1	; 0x01
    2308:	05 c0       	rjmp	.+10     	; 0x2314 <DIO_enuGetPortValue+0xaa>
			break;
		default :
			Local_enuErrorState = ES_OUT_OF_RANGE;
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	02 c0       	rjmp	.+4      	; 0x2314 <DIO_enuGetPortValue+0xaa>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2310:	82 e0       	ldi	r24, 0x02	; 2
    2312:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2314:	89 81       	ldd	r24, Y+1	; 0x01
}
    2316:	26 96       	adiw	r28, 0x06	; 6
    2318:	0f b6       	in	r0, 0x3f	; 63
    231a:	f8 94       	cli
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	0f be       	out	0x3f, r0	; 63
    2320:	cd bf       	out	0x3d, r28	; 61
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <DIO_enuSetPinDirection>:
/*****************************************************************/

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8PinDir)
{
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	00 d0       	rcall	.+0      	; 0x232e <DIO_enuSetPinDirection+0x6>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <DIO_enuSetPinDirection+0x8>
    2330:	00 d0       	rcall	.+0      	; 0x2332 <DIO_enuSetPinDirection+0xa>
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	8a 83       	std	Y+2, r24	; 0x02
    2338:	6b 83       	std	Y+3, r22	; 0x03
    233a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PinID <= DIO_PIN7 && Copy_u8PinDir<=OUTPUT)
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	88 30       	cpi	r24, 0x08	; 8
    2344:	08 f0       	brcs	.+2      	; 0x2348 <DIO_enuSetPinDirection+0x20>
    2346:	d2 c0       	rjmp	.+420    	; 0x24ec <DIO_enuSetPinDirection+0x1c4>
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	82 30       	cpi	r24, 0x02	; 2
    234c:	08 f0       	brcs	.+2      	; 0x2350 <DIO_enuSetPinDirection+0x28>
    234e:	ce c0       	rjmp	.+412    	; 0x24ec <DIO_enuSetPinDirection+0x1c4>
	{
		switch(Copy_u8PortID)
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	3e 83       	std	Y+6, r19	; 0x06
    2358:	2d 83       	std	Y+5, r18	; 0x05
    235a:	6d 81       	ldd	r22, Y+5	; 0x05
    235c:	7e 81       	ldd	r23, Y+6	; 0x06
    235e:	61 30       	cpi	r22, 0x01	; 1
    2360:	71 05       	cpc	r23, r1
    2362:	09 f4       	brne	.+2      	; 0x2366 <DIO_enuSetPinDirection+0x3e>
    2364:	42 c0       	rjmp	.+132    	; 0x23ea <DIO_enuSetPinDirection+0xc2>
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	82 30       	cpi	r24, 0x02	; 2
    236c:	91 05       	cpc	r25, r1
    236e:	34 f4       	brge	.+12     	; 0x237c <DIO_enuSetPinDirection+0x54>
    2370:	2d 81       	ldd	r18, Y+5	; 0x05
    2372:	3e 81       	ldd	r19, Y+6	; 0x06
    2374:	21 15       	cp	r18, r1
    2376:	31 05       	cpc	r19, r1
    2378:	71 f0       	breq	.+28     	; 0x2396 <DIO_enuSetPinDirection+0x6e>
    237a:	b5 c0       	rjmp	.+362    	; 0x24e6 <DIO_enuSetPinDirection+0x1be>
    237c:	6d 81       	ldd	r22, Y+5	; 0x05
    237e:	7e 81       	ldd	r23, Y+6	; 0x06
    2380:	62 30       	cpi	r22, 0x02	; 2
    2382:	71 05       	cpc	r23, r1
    2384:	09 f4       	brne	.+2      	; 0x2388 <DIO_enuSetPinDirection+0x60>
    2386:	5b c0       	rjmp	.+182    	; 0x243e <DIO_enuSetPinDirection+0x116>
    2388:	8d 81       	ldd	r24, Y+5	; 0x05
    238a:	9e 81       	ldd	r25, Y+6	; 0x06
    238c:	83 30       	cpi	r24, 0x03	; 3
    238e:	91 05       	cpc	r25, r1
    2390:	09 f4       	brne	.+2      	; 0x2394 <DIO_enuSetPinDirection+0x6c>
    2392:	7f c0       	rjmp	.+254    	; 0x2492 <DIO_enuSetPinDirection+0x16a>
    2394:	a8 c0       	rjmp	.+336    	; 0x24e6 <DIO_enuSetPinDirection+0x1be>
		{
		case DIO_PORTA:
			DDRA &=~(1<<Copy_u8PinID); //clear bit
    2396:	aa e3       	ldi	r26, 0x3A	; 58
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	ea e3       	ldi	r30, 0x3A	; 58
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	48 2f       	mov	r20, r24
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <DIO_enuSetPinDirection+0x8a>
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	2a 95       	dec	r18
    23b4:	e2 f7       	brpl	.-8      	; 0x23ae <DIO_enuSetPinDirection+0x86>
    23b6:	80 95       	com	r24
    23b8:	84 23       	and	r24, r20
    23ba:	8c 93       	st	X, r24
			DDRA |=(Copy_u8PinDir<<Copy_u8PinID); //bit or with the value
    23bc:	aa e3       	ldi	r26, 0x3A	; 58
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	ea e3       	ldi	r30, 0x3A	; 58
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	80 81       	ld	r24, Z
    23c6:	48 2f       	mov	r20, r24
    23c8:	8c 81       	ldd	r24, Y+4	; 0x04
    23ca:	28 2f       	mov	r18, r24
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	88 2f       	mov	r24, r24
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	b9 01       	movw	r22, r18
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <DIO_enuSetPinDirection+0xb4>
    23d8:	66 0f       	add	r22, r22
    23da:	77 1f       	adc	r23, r23
    23dc:	8a 95       	dec	r24
    23de:	e2 f7       	brpl	.-8      	; 0x23d8 <DIO_enuSetPinDirection+0xb0>
    23e0:	cb 01       	movw	r24, r22
    23e2:	84 2b       	or	r24, r20
    23e4:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    23e6:	19 82       	std	Y+1, r1	; 0x01
    23e8:	83 c0       	rjmp	.+262    	; 0x24f0 <DIO_enuSetPinDirection+0x1c8>
			break;
		case DIO_PORTB:
			DDRB &=~(1<<Copy_u8PinID);
    23ea:	a7 e3       	ldi	r26, 0x37	; 55
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e7 e3       	ldi	r30, 0x37	; 55
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	48 2f       	mov	r20, r24
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	02 c0       	rjmp	.+4      	; 0x2406 <DIO_enuSetPinDirection+0xde>
    2402:	88 0f       	add	r24, r24
    2404:	99 1f       	adc	r25, r25
    2406:	2a 95       	dec	r18
    2408:	e2 f7       	brpl	.-8      	; 0x2402 <DIO_enuSetPinDirection+0xda>
    240a:	80 95       	com	r24
    240c:	84 23       	and	r24, r20
    240e:	8c 93       	st	X, r24
			DDRB |=(Copy_u8PinDir<<Copy_u8PinID);
    2410:	a7 e3       	ldi	r26, 0x37	; 55
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	e7 e3       	ldi	r30, 0x37	; 55
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	80 81       	ld	r24, Z
    241a:	48 2f       	mov	r20, r24
    241c:	8c 81       	ldd	r24, Y+4	; 0x04
    241e:	28 2f       	mov	r18, r24
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	88 2f       	mov	r24, r24
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	b9 01       	movw	r22, r18
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <DIO_enuSetPinDirection+0x108>
    242c:	66 0f       	add	r22, r22
    242e:	77 1f       	adc	r23, r23
    2430:	8a 95       	dec	r24
    2432:	e2 f7       	brpl	.-8      	; 0x242c <DIO_enuSetPinDirection+0x104>
    2434:	cb 01       	movw	r24, r22
    2436:	84 2b       	or	r24, r20
    2438:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    243a:	19 82       	std	Y+1, r1	; 0x01
    243c:	59 c0       	rjmp	.+178    	; 0x24f0 <DIO_enuSetPinDirection+0x1c8>
			break;
		case DIO_PORTC:
			DDRC &=~(1<<Copy_u8PinID);
    243e:	a4 e3       	ldi	r26, 0x34	; 52
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e4 e3       	ldi	r30, 0x34	; 52
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	48 2f       	mov	r20, r24
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	02 c0       	rjmp	.+4      	; 0x245a <DIO_enuSetPinDirection+0x132>
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	2a 95       	dec	r18
    245c:	e2 f7       	brpl	.-8      	; 0x2456 <DIO_enuSetPinDirection+0x12e>
    245e:	80 95       	com	r24
    2460:	84 23       	and	r24, r20
    2462:	8c 93       	st	X, r24
			DDRC |=(Copy_u8PinDir<<Copy_u8PinID);
    2464:	a4 e3       	ldi	r26, 0x34	; 52
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e4 e3       	ldi	r30, 0x34	; 52
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	48 2f       	mov	r20, r24
    2470:	8c 81       	ldd	r24, Y+4	; 0x04
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	8b 81       	ldd	r24, Y+3	; 0x03
    2478:	88 2f       	mov	r24, r24
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	b9 01       	movw	r22, r18
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <DIO_enuSetPinDirection+0x15c>
    2480:	66 0f       	add	r22, r22
    2482:	77 1f       	adc	r23, r23
    2484:	8a 95       	dec	r24
    2486:	e2 f7       	brpl	.-8      	; 0x2480 <DIO_enuSetPinDirection+0x158>
    2488:	cb 01       	movw	r24, r22
    248a:	84 2b       	or	r24, r20
    248c:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    248e:	19 82       	std	Y+1, r1	; 0x01
    2490:	2f c0       	rjmp	.+94     	; 0x24f0 <DIO_enuSetPinDirection+0x1c8>
			break;
		case DIO_PORTD:
			DDRD &=~(1<<Copy_u8PinID);
    2492:	a1 e3       	ldi	r26, 0x31	; 49
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	e1 e3       	ldi	r30, 0x31	; 49
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	48 2f       	mov	r20, r24
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	28 2f       	mov	r18, r24
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <DIO_enuSetPinDirection+0x186>
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	2a 95       	dec	r18
    24b0:	e2 f7       	brpl	.-8      	; 0x24aa <DIO_enuSetPinDirection+0x182>
    24b2:	80 95       	com	r24
    24b4:	84 23       	and	r24, r20
    24b6:	8c 93       	st	X, r24
			DDRD |=(Copy_u8PinDir<<Copy_u8PinID);
    24b8:	a1 e3       	ldi	r26, 0x31	; 49
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	e1 e3       	ldi	r30, 0x31	; 49
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	48 2f       	mov	r20, r24
    24c4:	8c 81       	ldd	r24, Y+4	; 0x04
    24c6:	28 2f       	mov	r18, r24
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	b9 01       	movw	r22, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <DIO_enuSetPinDirection+0x1b0>
    24d4:	66 0f       	add	r22, r22
    24d6:	77 1f       	adc	r23, r23
    24d8:	8a 95       	dec	r24
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <DIO_enuSetPinDirection+0x1ac>
    24dc:	cb 01       	movw	r24, r22
    24de:	84 2b       	or	r24, r20
    24e0:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    24e2:	19 82       	std	Y+1, r1	; 0x01
    24e4:	05 c0       	rjmp	.+10     	; 0x24f0 <DIO_enuSetPinDirection+0x1c8>
			break;
		default :
			Local_enuErrorState = ES_OUT_OF_RANGE;
    24e6:	83 e0       	ldi	r24, 0x03	; 3
    24e8:	89 83       	std	Y+1, r24	; 0x01
    24ea:	02 c0       	rjmp	.+4      	; 0x24f0 <DIO_enuSetPinDirection+0x1c8>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    24ec:	83 e0       	ldi	r24, 0x03	; 3
    24ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f2:	26 96       	adiw	r28, 0x06	; 6
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	cf 91       	pop	r28
    2500:	df 91       	pop	r29
    2502:	08 95       	ret

00002504 <DIO_enuSetPinValue>:

/*****************************************************************/
ES_t DIO_enuSetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8 Copy_u8Value)
{
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	00 d0       	rcall	.+0      	; 0x250a <DIO_enuSetPinValue+0x6>
    250a:	00 d0       	rcall	.+0      	; 0x250c <DIO_enuSetPinValue+0x8>
    250c:	00 d0       	rcall	.+0      	; 0x250e <DIO_enuSetPinValue+0xa>
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	8a 83       	std	Y+2, r24	; 0x02
    2514:	6b 83       	std	Y+3, r22	; 0x03
    2516:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinID <= DIO_PIN7 && Copy_u8Value<=OUTPUT)
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	88 30       	cpi	r24, 0x08	; 8
    2520:	08 f0       	brcs	.+2      	; 0x2524 <DIO_enuSetPinValue+0x20>
    2522:	d2 c0       	rjmp	.+420    	; 0x26c8 <DIO_enuSetPinValue+0x1c4>
    2524:	8c 81       	ldd	r24, Y+4	; 0x04
    2526:	82 30       	cpi	r24, 0x02	; 2
    2528:	08 f0       	brcs	.+2      	; 0x252c <DIO_enuSetPinValue+0x28>
    252a:	ce c0       	rjmp	.+412    	; 0x26c8 <DIO_enuSetPinValue+0x1c4>
	{
		switch(Copy_u8PortID)
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	3e 83       	std	Y+6, r19	; 0x06
    2534:	2d 83       	std	Y+5, r18	; 0x05
    2536:	6d 81       	ldd	r22, Y+5	; 0x05
    2538:	7e 81       	ldd	r23, Y+6	; 0x06
    253a:	61 30       	cpi	r22, 0x01	; 1
    253c:	71 05       	cpc	r23, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <DIO_enuSetPinValue+0x3e>
    2540:	42 c0       	rjmp	.+132    	; 0x25c6 <DIO_enuSetPinValue+0xc2>
    2542:	8d 81       	ldd	r24, Y+5	; 0x05
    2544:	9e 81       	ldd	r25, Y+6	; 0x06
    2546:	82 30       	cpi	r24, 0x02	; 2
    2548:	91 05       	cpc	r25, r1
    254a:	34 f4       	brge	.+12     	; 0x2558 <DIO_enuSetPinValue+0x54>
    254c:	2d 81       	ldd	r18, Y+5	; 0x05
    254e:	3e 81       	ldd	r19, Y+6	; 0x06
    2550:	21 15       	cp	r18, r1
    2552:	31 05       	cpc	r19, r1
    2554:	71 f0       	breq	.+28     	; 0x2572 <DIO_enuSetPinValue+0x6e>
    2556:	b5 c0       	rjmp	.+362    	; 0x26c2 <DIO_enuSetPinValue+0x1be>
    2558:	6d 81       	ldd	r22, Y+5	; 0x05
    255a:	7e 81       	ldd	r23, Y+6	; 0x06
    255c:	62 30       	cpi	r22, 0x02	; 2
    255e:	71 05       	cpc	r23, r1
    2560:	09 f4       	brne	.+2      	; 0x2564 <DIO_enuSetPinValue+0x60>
    2562:	5b c0       	rjmp	.+182    	; 0x261a <DIO_enuSetPinValue+0x116>
    2564:	8d 81       	ldd	r24, Y+5	; 0x05
    2566:	9e 81       	ldd	r25, Y+6	; 0x06
    2568:	83 30       	cpi	r24, 0x03	; 3
    256a:	91 05       	cpc	r25, r1
    256c:	09 f4       	brne	.+2      	; 0x2570 <DIO_enuSetPinValue+0x6c>
    256e:	7f c0       	rjmp	.+254    	; 0x266e <DIO_enuSetPinValue+0x16a>
    2570:	a8 c0       	rjmp	.+336    	; 0x26c2 <DIO_enuSetPinValue+0x1be>
		{
		case DIO_PORTA:
			PORTA &=~(1<<Copy_u8PinID);
    2572:	ab e3       	ldi	r26, 0x3B	; 59
    2574:	b0 e0       	ldi	r27, 0x00	; 0
    2576:	eb e3       	ldi	r30, 0x3B	; 59
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	48 2f       	mov	r20, r24
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	28 2f       	mov	r18, r24
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	02 c0       	rjmp	.+4      	; 0x258e <DIO_enuSetPinValue+0x8a>
    258a:	88 0f       	add	r24, r24
    258c:	99 1f       	adc	r25, r25
    258e:	2a 95       	dec	r18
    2590:	e2 f7       	brpl	.-8      	; 0x258a <DIO_enuSetPinValue+0x86>
    2592:	80 95       	com	r24
    2594:	84 23       	and	r24, r20
    2596:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    2598:	ab e3       	ldi	r26, 0x3B	; 59
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	eb e3       	ldi	r30, 0x3B	; 59
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	48 2f       	mov	r20, r24
    25a4:	8c 81       	ldd	r24, Y+4	; 0x04
    25a6:	28 2f       	mov	r18, r24
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	88 2f       	mov	r24, r24
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	b9 01       	movw	r22, r18
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <DIO_enuSetPinValue+0xb4>
    25b4:	66 0f       	add	r22, r22
    25b6:	77 1f       	adc	r23, r23
    25b8:	8a 95       	dec	r24
    25ba:	e2 f7       	brpl	.-8      	; 0x25b4 <DIO_enuSetPinValue+0xb0>
    25bc:	cb 01       	movw	r24, r22
    25be:	84 2b       	or	r24, r20
    25c0:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    25c2:	19 82       	std	Y+1, r1	; 0x01
    25c4:	83 c0       	rjmp	.+262    	; 0x26cc <DIO_enuSetPinValue+0x1c8>
			break;
		case DIO_PORTB:
			PORTB &=~(1<<Copy_u8PinID);
    25c6:	a8 e3       	ldi	r26, 0x38	; 56
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	e8 e3       	ldi	r30, 0x38	; 56
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	80 81       	ld	r24, Z
    25d0:	48 2f       	mov	r20, r24
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	28 2f       	mov	r18, r24
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	02 c0       	rjmp	.+4      	; 0x25e2 <DIO_enuSetPinValue+0xde>
    25de:	88 0f       	add	r24, r24
    25e0:	99 1f       	adc	r25, r25
    25e2:	2a 95       	dec	r18
    25e4:	e2 f7       	brpl	.-8      	; 0x25de <DIO_enuSetPinValue+0xda>
    25e6:	80 95       	com	r24
    25e8:	84 23       	and	r24, r20
    25ea:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    25ec:	a8 e3       	ldi	r26, 0x38	; 56
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e8 e3       	ldi	r30, 0x38	; 56
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	80 81       	ld	r24, Z
    25f6:	48 2f       	mov	r20, r24
    25f8:	8c 81       	ldd	r24, Y+4	; 0x04
    25fa:	28 2f       	mov	r18, r24
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	b9 01       	movw	r22, r18
    2606:	02 c0       	rjmp	.+4      	; 0x260c <DIO_enuSetPinValue+0x108>
    2608:	66 0f       	add	r22, r22
    260a:	77 1f       	adc	r23, r23
    260c:	8a 95       	dec	r24
    260e:	e2 f7       	brpl	.-8      	; 0x2608 <DIO_enuSetPinValue+0x104>
    2610:	cb 01       	movw	r24, r22
    2612:	84 2b       	or	r24, r20
    2614:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    2616:	19 82       	std	Y+1, r1	; 0x01
    2618:	59 c0       	rjmp	.+178    	; 0x26cc <DIO_enuSetPinValue+0x1c8>
			break;
		case DIO_PORTC:
			PORTC &=~(1<<Copy_u8PinID);
    261a:	a5 e3       	ldi	r26, 0x35	; 53
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e5 e3       	ldi	r30, 0x35	; 53
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	48 2f       	mov	r20, r24
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	02 c0       	rjmp	.+4      	; 0x2636 <DIO_enuSetPinValue+0x132>
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	2a 95       	dec	r18
    2638:	e2 f7       	brpl	.-8      	; 0x2632 <DIO_enuSetPinValue+0x12e>
    263a:	80 95       	com	r24
    263c:	84 23       	and	r24, r20
    263e:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    2640:	a5 e3       	ldi	r26, 0x35	; 53
    2642:	b0 e0       	ldi	r27, 0x00	; 0
    2644:	e5 e3       	ldi	r30, 0x35	; 53
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	80 81       	ld	r24, Z
    264a:	48 2f       	mov	r20, r24
    264c:	8c 81       	ldd	r24, Y+4	; 0x04
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	8b 81       	ldd	r24, Y+3	; 0x03
    2654:	88 2f       	mov	r24, r24
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	b9 01       	movw	r22, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <DIO_enuSetPinValue+0x15c>
    265c:	66 0f       	add	r22, r22
    265e:	77 1f       	adc	r23, r23
    2660:	8a 95       	dec	r24
    2662:	e2 f7       	brpl	.-8      	; 0x265c <DIO_enuSetPinValue+0x158>
    2664:	cb 01       	movw	r24, r22
    2666:	84 2b       	or	r24, r20
    2668:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    266a:	19 82       	std	Y+1, r1	; 0x01
    266c:	2f c0       	rjmp	.+94     	; 0x26cc <DIO_enuSetPinValue+0x1c8>
			break;
		case DIO_PORTD:
			PORTD &=~(1<<Copy_u8PinID);
    266e:	a2 e3       	ldi	r26, 0x32	; 50
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	e2 e3       	ldi	r30, 0x32	; 50
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	48 2f       	mov	r20, r24
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	28 2f       	mov	r18, r24
    267e:	30 e0       	ldi	r19, 0x00	; 0
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	02 c0       	rjmp	.+4      	; 0x268a <DIO_enuSetPinValue+0x186>
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	2a 95       	dec	r18
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <DIO_enuSetPinValue+0x182>
    268e:	80 95       	com	r24
    2690:	84 23       	and	r24, r20
    2692:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    2694:	a2 e3       	ldi	r26, 0x32	; 50
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e2 e3       	ldi	r30, 0x32	; 50
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	48 2f       	mov	r20, r24
    26a0:	8c 81       	ldd	r24, Y+4	; 0x04
    26a2:	28 2f       	mov	r18, r24
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	88 2f       	mov	r24, r24
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	b9 01       	movw	r22, r18
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <DIO_enuSetPinValue+0x1b0>
    26b0:	66 0f       	add	r22, r22
    26b2:	77 1f       	adc	r23, r23
    26b4:	8a 95       	dec	r24
    26b6:	e2 f7       	brpl	.-8      	; 0x26b0 <DIO_enuSetPinValue+0x1ac>
    26b8:	cb 01       	movw	r24, r22
    26ba:	84 2b       	or	r24, r20
    26bc:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    26be:	19 82       	std	Y+1, r1	; 0x01
    26c0:	05 c0       	rjmp	.+10     	; 0x26cc <DIO_enuSetPinValue+0x1c8>
			break;
		default :
			Local_enuErrorState = ES_OUT_OF_RANGE;
    26c2:	83 e0       	ldi	r24, 0x03	; 3
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	02 c0       	rjmp	.+4      	; 0x26cc <DIO_enuSetPinValue+0x1c8>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26ce:	26 96       	adiw	r28, 0x06	; 6
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61
    26da:	cf 91       	pop	r28
    26dc:	df 91       	pop	r29
    26de:	08 95       	ret

000026e0 <DIO_enuTogPin>:
/*****************************************************************/
ES_t DIO_enuTogPin(u8 Copy_u8PortID ,u8 Copy_u8PinID )
{
    26e0:	df 93       	push	r29
    26e2:	cf 93       	push	r28
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <DIO_enuTogPin+0x6>
    26e6:	00 d0       	rcall	.+0      	; 0x26e8 <DIO_enuTogPin+0x8>
    26e8:	0f 92       	push	r0
    26ea:	cd b7       	in	r28, 0x3d	; 61
    26ec:	de b7       	in	r29, 0x3e	; 62
    26ee:	8a 83       	std	Y+2, r24	; 0x02
    26f0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinID <= DIO_PIN7)
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	88 30       	cpi	r24, 0x08	; 8
    26fa:	08 f0       	brcs	.+2      	; 0x26fe <DIO_enuTogPin+0x1e>
    26fc:	77 c0       	rjmp	.+238    	; 0x27ec <DIO_enuTogPin+0x10c>
	{
		switch(Copy_u8PortID)
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	3d 83       	std	Y+5, r19	; 0x05
    2706:	2c 83       	std	Y+4, r18	; 0x04
    2708:	8c 81       	ldd	r24, Y+4	; 0x04
    270a:	9d 81       	ldd	r25, Y+5	; 0x05
    270c:	81 30       	cpi	r24, 0x01	; 1
    270e:	91 05       	cpc	r25, r1
    2710:	59 f1       	breq	.+86     	; 0x2768 <DIO_enuTogPin+0x88>
    2712:	2c 81       	ldd	r18, Y+4	; 0x04
    2714:	3d 81       	ldd	r19, Y+5	; 0x05
    2716:	22 30       	cpi	r18, 0x02	; 2
    2718:	31 05       	cpc	r19, r1
    271a:	2c f4       	brge	.+10     	; 0x2726 <DIO_enuTogPin+0x46>
    271c:	8c 81       	ldd	r24, Y+4	; 0x04
    271e:	9d 81       	ldd	r25, Y+5	; 0x05
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f0       	breq	.+26     	; 0x273e <DIO_enuTogPin+0x5e>
    2724:	60 c0       	rjmp	.+192    	; 0x27e6 <DIO_enuTogPin+0x106>
    2726:	2c 81       	ldd	r18, Y+4	; 0x04
    2728:	3d 81       	ldd	r19, Y+5	; 0x05
    272a:	22 30       	cpi	r18, 0x02	; 2
    272c:	31 05       	cpc	r19, r1
    272e:	89 f1       	breq	.+98     	; 0x2792 <DIO_enuTogPin+0xb2>
    2730:	8c 81       	ldd	r24, Y+4	; 0x04
    2732:	9d 81       	ldd	r25, Y+5	; 0x05
    2734:	83 30       	cpi	r24, 0x03	; 3
    2736:	91 05       	cpc	r25, r1
    2738:	09 f4       	brne	.+2      	; 0x273c <DIO_enuTogPin+0x5c>
    273a:	40 c0       	rjmp	.+128    	; 0x27bc <DIO_enuTogPin+0xdc>
    273c:	54 c0       	rjmp	.+168    	; 0x27e6 <DIO_enuTogPin+0x106>
		{
		case DIO_PORTA:
			PORTA ^=(1<<Copy_u8PinID); //toggle bit
    273e:	ab e3       	ldi	r26, 0x3B	; 59
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	eb e3       	ldi	r30, 0x3B	; 59
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	48 2f       	mov	r20, r24
    274a:	8b 81       	ldd	r24, Y+3	; 0x03
    274c:	28 2f       	mov	r18, r24
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	81 e0       	ldi	r24, 0x01	; 1
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	02 2e       	mov	r0, r18
    2756:	02 c0       	rjmp	.+4      	; 0x275c <DIO_enuTogPin+0x7c>
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	0a 94       	dec	r0
    275e:	e2 f7       	brpl	.-8      	; 0x2758 <DIO_enuTogPin+0x78>
    2760:	84 27       	eor	r24, r20
    2762:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    2764:	19 82       	std	Y+1, r1	; 0x01
    2766:	44 c0       	rjmp	.+136    	; 0x27f0 <DIO_enuTogPin+0x110>
			break;
		case DIO_PORTB:
			PORTB ^=(1<<Copy_u8PinID);
    2768:	a8 e3       	ldi	r26, 0x38	; 56
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	e8 e3       	ldi	r30, 0x38	; 56
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	48 2f       	mov	r20, r24
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	28 2f       	mov	r18, r24
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	02 2e       	mov	r0, r18
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <DIO_enuTogPin+0xa6>
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	0a 94       	dec	r0
    2788:	e2 f7       	brpl	.-8      	; 0x2782 <DIO_enuTogPin+0xa2>
    278a:	84 27       	eor	r24, r20
    278c:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    278e:	19 82       	std	Y+1, r1	; 0x01
    2790:	2f c0       	rjmp	.+94     	; 0x27f0 <DIO_enuTogPin+0x110>
			break;
		case DIO_PORTC:
			PORTC ^=(1<<Copy_u8PinID);
    2792:	a5 e3       	ldi	r26, 0x35	; 53
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e5 e3       	ldi	r30, 0x35	; 53
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	48 2f       	mov	r20, r24
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	28 2f       	mov	r18, r24
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	02 2e       	mov	r0, r18
    27aa:	02 c0       	rjmp	.+4      	; 0x27b0 <DIO_enuTogPin+0xd0>
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	0a 94       	dec	r0
    27b2:	e2 f7       	brpl	.-8      	; 0x27ac <DIO_enuTogPin+0xcc>
    27b4:	84 27       	eor	r24, r20
    27b6:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    27b8:	19 82       	std	Y+1, r1	; 0x01
    27ba:	1a c0       	rjmp	.+52     	; 0x27f0 <DIO_enuTogPin+0x110>
			break;
		case DIO_PORTD:
			PORTD ^=(1<<Copy_u8PinID);
    27bc:	a2 e3       	ldi	r26, 0x32	; 50
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	e2 e3       	ldi	r30, 0x32	; 50
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	80 81       	ld	r24, Z
    27c6:	48 2f       	mov	r20, r24
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	28 2f       	mov	r18, r24
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	02 2e       	mov	r0, r18
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <DIO_enuTogPin+0xfa>
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	0a 94       	dec	r0
    27dc:	e2 f7       	brpl	.-8      	; 0x27d6 <DIO_enuTogPin+0xf6>
    27de:	84 27       	eor	r24, r20
    27e0:	8c 93       	st	X, r24
			Local_enuErrorState = ES_OK;
    27e2:	19 82       	std	Y+1, r1	; 0x01
    27e4:	05 c0       	rjmp	.+10     	; 0x27f0 <DIO_enuTogPin+0x110>
			break;
		default :
			Local_enuErrorState = ES_OUT_OF_RANGE;
    27e6:	83 e0       	ldi	r24, 0x03	; 3
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <DIO_enuTogPin+0x110>
			break;
		}
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    27ec:	83 e0       	ldi	r24, 0x03	; 3
    27ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <DIO_enuGetPinValue>:
/*****************************************************************/
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID ,u8 Copy_u8PinID , u8* Copy_pu8Value)
{
    2802:	df 93       	push	r29
    2804:	cf 93       	push	r28
    2806:	cd b7       	in	r28, 0x3d	; 61
    2808:	de b7       	in	r29, 0x3e	; 62
    280a:	27 97       	sbiw	r28, 0x07	; 7
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	8a 83       	std	Y+2, r24	; 0x02
    2818:	6b 83       	std	Y+3, r22	; 0x03
    281a:	5d 83       	std	Y+5, r21	; 0x05
    281c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_pu8Value != NULL)
    2822:	8c 81       	ldd	r24, Y+4	; 0x04
    2824:	9d 81       	ldd	r25, Y+5	; 0x05
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	09 f4       	brne	.+2      	; 0x282c <DIO_enuGetPinValue+0x2a>
    282a:	7b c0       	rjmp	.+246    	; 0x2922 <DIO_enuGetPinValue+0x120>
	{
		if(Copy_u8PinID<=DIO_PIN7)
    282c:	8b 81       	ldd	r24, Y+3	; 0x03
    282e:	88 30       	cpi	r24, 0x08	; 8
    2830:	08 f0       	brcs	.+2      	; 0x2834 <DIO_enuGetPinValue+0x32>
    2832:	74 c0       	rjmp	.+232    	; 0x291c <DIO_enuGetPinValue+0x11a>
		{
			switch(Copy_u8PortID)
    2834:	8a 81       	ldd	r24, Y+2	; 0x02
    2836:	28 2f       	mov	r18, r24
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	3f 83       	std	Y+7, r19	; 0x07
    283c:	2e 83       	std	Y+6, r18	; 0x06
    283e:	4e 81       	ldd	r20, Y+6	; 0x06
    2840:	5f 81       	ldd	r21, Y+7	; 0x07
    2842:	41 30       	cpi	r20, 0x01	; 1
    2844:	51 05       	cpc	r21, r1
    2846:	59 f1       	breq	.+86     	; 0x289e <DIO_enuGetPinValue+0x9c>
    2848:	8e 81       	ldd	r24, Y+6	; 0x06
    284a:	9f 81       	ldd	r25, Y+7	; 0x07
    284c:	82 30       	cpi	r24, 0x02	; 2
    284e:	91 05       	cpc	r25, r1
    2850:	34 f4       	brge	.+12     	; 0x285e <DIO_enuGetPinValue+0x5c>
    2852:	2e 81       	ldd	r18, Y+6	; 0x06
    2854:	3f 81       	ldd	r19, Y+7	; 0x07
    2856:	21 15       	cp	r18, r1
    2858:	31 05       	cpc	r19, r1
    285a:	69 f0       	breq	.+26     	; 0x2876 <DIO_enuGetPinValue+0x74>
    285c:	5c c0       	rjmp	.+184    	; 0x2916 <DIO_enuGetPinValue+0x114>
    285e:	4e 81       	ldd	r20, Y+6	; 0x06
    2860:	5f 81       	ldd	r21, Y+7	; 0x07
    2862:	42 30       	cpi	r20, 0x02	; 2
    2864:	51 05       	cpc	r21, r1
    2866:	79 f1       	breq	.+94     	; 0x28c6 <DIO_enuGetPinValue+0xc4>
    2868:	8e 81       	ldd	r24, Y+6	; 0x06
    286a:	9f 81       	ldd	r25, Y+7	; 0x07
    286c:	83 30       	cpi	r24, 0x03	; 3
    286e:	91 05       	cpc	r25, r1
    2870:	09 f4       	brne	.+2      	; 0x2874 <DIO_enuGetPinValue+0x72>
    2872:	3d c0       	rjmp	.+122    	; 0x28ee <DIO_enuGetPinValue+0xec>
    2874:	50 c0       	rjmp	.+160    	; 0x2916 <DIO_enuGetPinValue+0x114>
			{
			case DIO_PORTA:
				*Copy_pu8Value=((PINA>>Copy_u8PinID)&DIO_MASK_BIT);
    2876:	e9 e3       	ldi	r30, 0x39	; 57
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	8b 81       	ldd	r24, Y+3	; 0x03
    2882:	88 2f       	mov	r24, r24
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	a9 01       	movw	r20, r18
    2888:	02 c0       	rjmp	.+4      	; 0x288e <DIO_enuGetPinValue+0x8c>
    288a:	55 95       	asr	r21
    288c:	47 95       	ror	r20
    288e:	8a 95       	dec	r24
    2890:	e2 f7       	brpl	.-8      	; 0x288a <DIO_enuGetPinValue+0x88>
    2892:	ca 01       	movw	r24, r20
    2894:	81 70       	andi	r24, 0x01	; 1
    2896:	ec 81       	ldd	r30, Y+4	; 0x04
    2898:	fd 81       	ldd	r31, Y+5	; 0x05
    289a:	80 83       	st	Z, r24
    289c:	44 c0       	rjmp	.+136    	; 0x2926 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTB:
				*Copy_pu8Value=((PINB>>Copy_u8PinID)&DIO_MASK_BIT);
    289e:	e6 e3       	ldi	r30, 0x36	; 54
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	28 2f       	mov	r18, r24
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a9 01       	movw	r20, r18
    28b0:	02 c0       	rjmp	.+4      	; 0x28b6 <DIO_enuGetPinValue+0xb4>
    28b2:	55 95       	asr	r21
    28b4:	47 95       	ror	r20
    28b6:	8a 95       	dec	r24
    28b8:	e2 f7       	brpl	.-8      	; 0x28b2 <DIO_enuGetPinValue+0xb0>
    28ba:	ca 01       	movw	r24, r20
    28bc:	81 70       	andi	r24, 0x01	; 1
    28be:	ec 81       	ldd	r30, Y+4	; 0x04
    28c0:	fd 81       	ldd	r31, Y+5	; 0x05
    28c2:	80 83       	st	Z, r24
    28c4:	30 c0       	rjmp	.+96     	; 0x2926 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTC:
				*Copy_pu8Value=((PINC>>Copy_u8PinID)&DIO_MASK_BIT);
    28c6:	e3 e3       	ldi	r30, 0x33	; 51
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	80 81       	ld	r24, Z
    28cc:	28 2f       	mov	r18, r24
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	8b 81       	ldd	r24, Y+3	; 0x03
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	a9 01       	movw	r20, r18
    28d8:	02 c0       	rjmp	.+4      	; 0x28de <DIO_enuGetPinValue+0xdc>
    28da:	55 95       	asr	r21
    28dc:	47 95       	ror	r20
    28de:	8a 95       	dec	r24
    28e0:	e2 f7       	brpl	.-8      	; 0x28da <DIO_enuGetPinValue+0xd8>
    28e2:	ca 01       	movw	r24, r20
    28e4:	81 70       	andi	r24, 0x01	; 1
    28e6:	ec 81       	ldd	r30, Y+4	; 0x04
    28e8:	fd 81       	ldd	r31, Y+5	; 0x05
    28ea:	80 83       	st	Z, r24
    28ec:	1c c0       	rjmp	.+56     	; 0x2926 <DIO_enuGetPinValue+0x124>
				break;
			case DIO_PORTD:
				*Copy_pu8Value=((PIND>>Copy_u8PinID)&DIO_MASK_BIT);
    28ee:	e0 e3       	ldi	r30, 0x30	; 48
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	28 2f       	mov	r18, r24
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	88 2f       	mov	r24, r24
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	a9 01       	movw	r20, r18
    2900:	02 c0       	rjmp	.+4      	; 0x2906 <DIO_enuGetPinValue+0x104>
    2902:	55 95       	asr	r21
    2904:	47 95       	ror	r20
    2906:	8a 95       	dec	r24
    2908:	e2 f7       	brpl	.-8      	; 0x2902 <DIO_enuGetPinValue+0x100>
    290a:	ca 01       	movw	r24, r20
    290c:	81 70       	andi	r24, 0x01	; 1
    290e:	ec 81       	ldd	r30, Y+4	; 0x04
    2910:	fd 81       	ldd	r31, Y+5	; 0x05
    2912:	80 83       	st	Z, r24
    2914:	08 c0       	rjmp	.+16     	; 0x2926 <DIO_enuGetPinValue+0x124>
				break;
			default :
				Local_enuErrorState = ES_OUT_OF_RANGE;
    2916:	83 e0       	ldi	r24, 0x03	; 3
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	05 c0       	rjmp	.+10     	; 0x2926 <DIO_enuGetPinValue+0x124>
				break;
			}
		}
		else
		{
			Local_enuErrorState=ES_OUT_OF_RANGE;
    291c:	83 e0       	ldi	r24, 0x03	; 3
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <DIO_enuGetPinValue+0x124>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2926:	89 81       	ldd	r24, Y+1	; 0x01
}
    2928:	27 96       	adiw	r28, 0x07	; 7
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	cf 91       	pop	r28
    2936:	df 91       	pop	r29
    2938:	08 95       	ret

0000293a <TWI_enuInitMaster>:
#include "TWI_int.h"
#include "TWI_config.h"
#include "TWI_priv.h"

ES_t TWI_enuInitMaster(void)
{
    293a:	df 93       	push	r29
    293c:	cf 93       	push	r28
    293e:	0f 92       	push	r0
    2940:	cd b7       	in	r28, 0x3d	; 61
    2942:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	89 83       	std	Y+1, r24	; 0x01

	TWBR = 0x02;
    2948:	e0 e2       	ldi	r30, 0x20	; 32
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	82 e0       	ldi	r24, 0x02	; 2
    294e:	80 83       	st	Z, r24
	TWSR = 0x00;
    2950:	e1 e2       	ldi	r30, 0x21	; 33
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	10 82       	st	Z, r1

	TWAR = TWI_MC_ADDRESS<<1;
    2956:	e2 e2       	ldi	r30, 0x22	; 34
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	82 e8       	ldi	r24, 0x82	; 130
    295c:	80 83       	st	Z, r24
	TWCR = (1<<TWEN);
    295e:	e6 e5       	ldi	r30, 0x56	; 86
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	84 e0       	ldi	r24, 0x04	; 4
    2964:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    2966:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    2968:	89 81       	ldd	r24, Y+1	; 0x01
}
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <TWI_enuInitSlave>:

ES_t TWI_enuInitSlave(void)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	0f 92       	push	r0
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	89 83       	std	Y+1, r24	; 0x01

	TWAR = TWI_MC_ADDRESS<<1;
    2980:	e2 e2       	ldi	r30, 0x22	; 34
    2982:	f0 e0       	ldi	r31, 0x00	; 0
    2984:	82 e8       	ldi	r24, 0x82	; 130
    2986:	80 83       	st	Z, r24
	/*Enable TWI peripheral*/
	TWCR = (1<<TWEN);
    2988:	e6 e5       	ldi	r30, 0x56	; 86
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	84 e0       	ldi	r24, 0x04	; 4
    298e:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    2990:	19 82       	std	Y+1, r1	; 0x01
	return Local_enuErrorState;
    2992:	89 81       	ldd	r24, Y+1	; 0x01
}
    2994:	0f 90       	pop	r0
    2996:	cf 91       	pop	r28
    2998:	df 91       	pop	r29
    299a:	08 95       	ret

0000299c <TWI_enuMasterSendStartCondition>:



ES_t TWI_enuMasterSendStartCondition(void)
{
    299c:	df 93       	push	r29
    299e:	cf 93       	push	r28
    29a0:	0f 92       	push	r0
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    29a6:	81 e0       	ldi	r24, 0x01	; 1
    29a8:	89 83       	std	Y+1, r24	; 0x01

	/*Send start condition*/
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    29aa:	e6 e5       	ldi	r30, 0x56	; 86
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	84 ea       	ldi	r24, 0xA4	; 164
    29b0:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    29b2:	e6 e5       	ldi	r30, 0x56	; 86
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	88 23       	and	r24, r24
    29ba:	dc f7       	brge	.-10     	; 0x29b2 <TWI_enuMasterSendStartCondition+0x16>

	/*Read the status register*/
	if((TWSR&0xf8) == TWI_SATRT_COND_TRANSMIT)
    29bc:	e1 e2       	ldi	r30, 0x21	; 33
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	88 7f       	andi	r24, 0xF8	; 248
    29c8:	90 70       	andi	r25, 0x00	; 0
    29ca:	88 30       	cpi	r24, 0x08	; 8
    29cc:	91 05       	cpc	r25, r1
    29ce:	11 f4       	brne	.+4      	; 0x29d4 <TWI_enuMasterSendStartCondition+0x38>
	{
		Local_enuErrorState = ES_OK;
    29d0:	19 82       	std	Y+1, r1	; 0x01
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <TWI_enuMasterSendStartCondition+0x3c>
	}
	else
	{
		Local_enuErrorState = ES_TWI_START_COND_ERROR;
    29d4:	87 e0       	ldi	r24, 0x07	; 7
    29d6:	89 83       	std	Y+1, r24	; 0x01
		//CLEAR_BIT(TWCR,TWSTA); //clear start condition bit
	}

	return Local_enuErrorState;
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    29da:	0f 90       	pop	r0
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <TWI_enuSendReapeatedStart>:

ES_t TWI_enuSendReapeatedStart(void)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	0f 92       	push	r0
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    29ec:	81 e0       	ldi	r24, 0x01	; 1
    29ee:	89 83       	std	Y+1, r24	; 0x01

	/*Send start condition*/
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    29f0:	e6 e5       	ldi	r30, 0x56	; 86
    29f2:	f0 e0       	ldi	r31, 0x00	; 0
    29f4:	84 ea       	ldi	r24, 0xA4	; 164
    29f6:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    29f8:	e6 e5       	ldi	r30, 0x56	; 86
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	88 23       	and	r24, r24
    2a00:	dc f7       	brge	.-10     	; 0x29f8 <TWI_enuSendReapeatedStart+0x16>

	/*Read the status register*/
	if((TWSR&0xf8) == TWI_REP_START_TRANSMIT)
    2a02:	e1 e2       	ldi	r30, 0x21	; 33
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	80 81       	ld	r24, Z
    2a08:	88 2f       	mov	r24, r24
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	88 7f       	andi	r24, 0xF8	; 248
    2a0e:	90 70       	andi	r25, 0x00	; 0
    2a10:	80 31       	cpi	r24, 0x10	; 16
    2a12:	91 05       	cpc	r25, r1
    2a14:	11 f4       	brne	.+4      	; 0x2a1a <TWI_enuSendReapeatedStart+0x38>
	{
		Local_enuErrorState = ES_OK;
    2a16:	19 82       	std	Y+1, r1	; 0x01
    2a18:	02 c0       	rjmp	.+4      	; 0x2a1e <TWI_enuSendReapeatedStart+0x3c>
	}
	else
	{
		Local_enuErrorState = ES_TWI_REP_START_COND_ERROR;
    2a1a:	88 e0       	ldi	r24, 0x08	; 8
    2a1c:	89 83       	std	Y+1, r24	; 0x01
		//CLEAR_BIT(TWCR,TWSTA);//clear start condition bit
	}

	return Local_enuErrorState;
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <TWI_enuSendSlaveAddressWithWriteReq>:

ES_t TWI_enuSendSlaveAddressWithWriteReq(u8 Copy_u8SlaveAddress)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <TWI_enuSendSlaveAddressWithWriteReq+0x6>
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	89 83       	std	Y+1, r24	; 0x01

	/*set the slave address in msb in the data register and clear the bit0*/
	TWDR = (u8)(Copy_u8SlaveAddress<<1) ;
    2a38:	e3 e2       	ldi	r30, 0x23	; 35
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3e:	88 0f       	add	r24, r24
    2a40:	80 83       	st	Z, r24


	/*Clear the TWI flag to do the operation*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    2a42:	e6 e5       	ldi	r30, 0x56	; 86
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	84 e8       	ldi	r24, 0x84	; 132
    2a48:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2a4a:	e6 e5       	ldi	r30, 0x56	; 86
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	80 81       	ld	r24, Z
    2a50:	88 23       	and	r24, r24
    2a52:	dc f7       	brge	.-10     	; 0x2a4a <TWI_enuSendSlaveAddressWithWriteReq+0x22>

	/*Read the status register*/
	if((TWSR&0xf8) == SLAVE_ADDR_AND_WRITE)
    2a54:	e1 e2       	ldi	r30, 0x21	; 33
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	88 2f       	mov	r24, r24
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	88 7f       	andi	r24, 0xF8	; 248
    2a60:	90 70       	andi	r25, 0x00	; 0
    2a62:	88 31       	cpi	r24, 0x18	; 24
    2a64:	91 05       	cpc	r25, r1
    2a66:	11 f4       	brne	.+4      	; 0x2a6c <TWI_enuSendSlaveAddressWithWriteReq+0x44>
	{
		Local_enuErrorState = ES_OK;
    2a68:	19 82       	std	Y+1, r1	; 0x01
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <TWI_enuSendSlaveAddressWithWriteReq+0x48>
	}
	else
	{
		Local_enuErrorState = ES_TWI_SLAVE_ADD_WRITE_ERROR;
    2a6c:	89 e0       	ldi	r24, 0x09	; 9
    2a6e:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <TWI_enuSendSlaveAddressWithReadReq>:

ES_t TWI_enuSendSlaveAddressWithReadReq(u8 Copy_u8SlaveAddress)
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <TWI_enuSendSlaveAddressWithReadReq+0x6>
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	89 83       	std	Y+1, r24	; 0x01

	/*set the slave address in msb in the data register and set the bit0*/
	TWDR = (u8)((Copy_u8SlaveAddress<<1) |1);
    2a8c:	e3 e2       	ldi	r30, 0x23	; 35
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	8a 81       	ldd	r24, Y+2	; 0x02
    2a92:	88 2f       	mov	r24, r24
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	88 0f       	add	r24, r24
    2a98:	99 1f       	adc	r25, r25
    2a9a:	81 60       	ori	r24, 0x01	; 1
    2a9c:	80 83       	st	Z, r24


	/*Clear the TWI flag to do the operation*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    2a9e:	e6 e5       	ldi	r30, 0x56	; 86
    2aa0:	f0 e0       	ldi	r31, 0x00	; 0
    2aa2:	84 e8       	ldi	r24, 0x84	; 132
    2aa4:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2aa6:	e6 e5       	ldi	r30, 0x56	; 86
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	80 81       	ld	r24, Z
    2aac:	88 23       	and	r24, r24
    2aae:	dc f7       	brge	.-10     	; 0x2aa6 <TWI_enuSendSlaveAddressWithReadReq+0x2a>

	/*Read the status register*/
	if(( TWSR&0xf8) == SLAVE_ADDR_AND_READ)
    2ab0:	e1 e2       	ldi	r30, 0x21	; 33
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	80 81       	ld	r24, Z
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	88 7f       	andi	r24, 0xF8	; 248
    2abc:	90 70       	andi	r25, 0x00	; 0
    2abe:	80 34       	cpi	r24, 0x40	; 64
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	11 f4       	brne	.+4      	; 0x2ac8 <TWI_enuSendSlaveAddressWithReadReq+0x4c>
	{
		Local_enuErrorState = ES_OK;
    2ac4:	19 82       	std	Y+1, r1	; 0x01
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <TWI_enuSendSlaveAddressWithReadReq+0x50>
	}
	else
	{
		Local_enuErrorState = ES_TWI_SLAVE_ADD_READ_ERROR;
    2ac8:	8a e0       	ldi	r24, 0x0A	; 10
    2aca:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <TWI_enuMasterWriteDataByte>:

ES_t TWI_enuMasterWriteDataByte(u8 Copy_u8Data)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <TWI_enuMasterWriteDataByte+0x6>
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
    2ae2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	89 83       	std	Y+1, r24	; 0x01

	/*Write the data in data register*/
	TWDR = Copy_u8Data;
    2ae8:	e3 e2       	ldi	r30, 0x23	; 35
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	80 83       	st	Z, r24

	/*Clear the TWI flag to do the operation*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    2af0:	e6 e5       	ldi	r30, 0x56	; 86
    2af2:	f0 e0       	ldi	r31, 0x00	; 0
    2af4:	84 e8       	ldi	r24, 0x84	; 132
    2af6:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2af8:	e6 e5       	ldi	r30, 0x56	; 86
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	80 81       	ld	r24, Z
    2afe:	88 23       	and	r24, r24
    2b00:	dc f7       	brge	.-10     	; 0x2af8 <TWI_enuMasterWriteDataByte+0x20>

	/*Read the status register*/
	if((TWSR&0xf8) == MASTER_TRANSMIT_DATA)
    2b02:	e1 e2       	ldi	r30, 0x21	; 33
    2b04:	f0 e0       	ldi	r31, 0x00	; 0
    2b06:	80 81       	ld	r24, Z
    2b08:	88 2f       	mov	r24, r24
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	88 7f       	andi	r24, 0xF8	; 248
    2b0e:	90 70       	andi	r25, 0x00	; 0
    2b10:	88 32       	cpi	r24, 0x28	; 40
    2b12:	91 05       	cpc	r25, r1
    2b14:	11 f4       	brne	.+4      	; 0x2b1a <TWI_enuMasterWriteDataByte+0x42>
	{
		Local_enuErrorState = ES_OK;
    2b16:	19 82       	std	Y+1, r1	; 0x01
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <TWI_enuMasterWriteDataByte+0x46>
	}
	else
	{
		Local_enuErrorState = ES_TWI_MASTER_WRITE_DATA_BYTE_ERROR;
    2b1a:	8b e0       	ldi	r24, 0x0B	; 11
    2b1c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <TWI_enuMasterReadDataByte>:

ES_t TWI_enuMasterReadDataByte(u8* Copy_pu8Data)
{
    2b2a:	df 93       	push	r29
    2b2c:	cf 93       	push	r28
    2b2e:	00 d0       	rcall	.+0      	; 0x2b30 <TWI_enuMasterReadDataByte+0x6>
    2b30:	0f 92       	push	r0
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	9b 83       	std	Y+3, r25	; 0x03
    2b38:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	89 83       	std	Y+1, r24	; 0x01

	/*Clear the TWI flag to let the slave sending the data*/
	TWCR = (1 << TWINT) | (1 << TWEN);
    2b3e:	e6 e5       	ldi	r30, 0x56	; 86
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	84 e8       	ldi	r24, 0x84	; 132
    2b44:	80 83       	st	Z, r24

	/*wait until the flag set again*/
	while((GET_BIT(TWCR,TWINT))==0);
    2b46:	e6 e5       	ldi	r30, 0x56	; 86
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	88 23       	and	r24, r24
    2b4e:	dc f7       	brge	.-10     	; 0x2b46 <TWI_enuMasterReadDataByte+0x1c>

	*Copy_pu8Data = TWDR;
    2b50:	e3 e2       	ldi	r30, 0x23	; 35
    2b52:	f0 e0       	ldi	r31, 0x00	; 0
    2b54:	80 81       	ld	r24, Z
    2b56:	ea 81       	ldd	r30, Y+2	; 0x02
    2b58:	fb 81       	ldd	r31, Y+3	; 0x03
    2b5a:	80 83       	st	Z, r24

	/*Read the status register*/
	if((TWSR&0xf8) == MASTER_RECEIVED_DATA_WITH_ACK)
    2b5c:	e1 e2       	ldi	r30, 0x21	; 33
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	88 2f       	mov	r24, r24
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	88 7f       	andi	r24, 0xF8	; 248
    2b68:	90 70       	andi	r25, 0x00	; 0
    2b6a:	80 35       	cpi	r24, 0x50	; 80
    2b6c:	91 05       	cpc	r25, r1
    2b6e:	11 f4       	brne	.+4      	; 0x2b74 <TWI_enuMasterReadDataByte+0x4a>
	{
		/*Read received data*/
		Local_enuErrorState = ES_OK;
    2b70:	19 82       	std	Y+1, r1	; 0x01
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <TWI_enuMasterReadDataByte+0x4e>
	}
	else
	{
		Local_enuErrorState = ES_TWI_MASTER_READ_DATA_BYTE_ERROR;
    2b74:	8c e0       	ldi	r24, 0x0C	; 12
    2b76:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b7a:	0f 90       	pop	r0
    2b7c:	0f 90       	pop	r0
    2b7e:	0f 90       	pop	r0
    2b80:	cf 91       	pop	r28
    2b82:	df 91       	pop	r29
    2b84:	08 95       	ret

00002b86 <TWI_enuMasterSendStopCondition>:

ES_t TWI_enuMasterSendStopCondition(void)
{
    2b86:	df 93       	push	r29
    2b88:	cf 93       	push	r28
    2b8a:	0f 92       	push	r0
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	89 83       	std	Y+1, r24	; 0x01

	/*Set stop condition bit*/
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2b94:	e6 e5       	ldi	r30, 0x56	; 86
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	84 e9       	ldi	r24, 0x94	; 148
    2b9a:	80 83       	st	Z, r24

	/*Clear the TWI flag to send the stop condition*/
	SET_BIT(TWCR,TWINT);
    2b9c:	a6 e5       	ldi	r26, 0x56	; 86
    2b9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ba0:	e6 e5       	ldi	r30, 0x56	; 86
    2ba2:	f0 e0       	ldi	r31, 0x00	; 0
    2ba4:	80 81       	ld	r24, Z
    2ba6:	80 68       	ori	r24, 0x80	; 128
    2ba8:	8c 93       	st	X, r24

	return Local_enuErrorState;
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bac:	0f 90       	pop	r0
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	08 95       	ret

00002bb4 <EEPROM_enuWriteDataByte>:
#include "EEPROM_priv.h"
#include "TWI_int.h"


ES_t EEPROM_enuWriteDataByte(u8 Copy_u8Data  , u16 Copy_u16Address)
{
    2bb4:	df 93       	push	r29
    2bb6:	cf 93       	push	r28
    2bb8:	00 d0       	rcall	.+0      	; 0x2bba <EEPROM_enuWriteDataByte+0x6>
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <EEPROM_enuWriteDataByte+0x8>
    2bbc:	0f 92       	push	r0
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	8b 83       	std	Y+3, r24	; 0x03
    2bc4:	7d 83       	std	Y+5, r23	; 0x05
    2bc6:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	8a 83       	std	Y+2, r24	; 0x02

#if EEPROM_TYPE == EEPROM_24C08_
	SalveAddr=(((0b01010<<3) |EEPROM_PIN_A2_CON | (Copy_u16Address & 0x0300)>>8)) ;

#elif EEPROM_TYPE == EEPROM_24C16_
	SalveAddr= (u8)((0b01010000)|(Copy_u16Address & 0x0700)>>8) ;
    2bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2bce:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd0:	80 70       	andi	r24, 0x00	; 0
    2bd2:	97 70       	andi	r25, 0x07	; 7
    2bd4:	89 2f       	mov	r24, r25
    2bd6:	99 27       	eor	r25, r25
    2bd8:	80 65       	ori	r24, 0x50	; 80
    2bda:	89 83       	std	Y+1, r24	; 0x01
#endif

	TWI_enuMasterSendStartCondition();
    2bdc:	0e 94 ce 14 	call	0x299c	; 0x299c <TWI_enuMasterSendStartCondition>

	TWI_enuSendSlaveAddressWithWriteReq(SalveAddr);
    2be0:	89 81       	ldd	r24, Y+1	; 0x01
    2be2:	0e 94 14 15 	call	0x2a28	; 0x2a28 <TWI_enuSendSlaveAddressWithWriteReq>

	TWI_enuMasterWriteDataByte((u8)Copy_u16Address);
    2be6:	8c 81       	ldd	r24, Y+4	; 0x04
    2be8:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <TWI_enuMasterWriteDataByte>

	TWI_enuMasterWriteDataByte(Copy_u8Data);
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <TWI_enuMasterWriteDataByte>

	TWI_enuMasterSendStopCondition();
    2bf2:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_enuMasterSendStopCondition>

	return Local_enuErrorState;
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <EEPROM_enuReadDataByte>:


ES_t EEPROM_enuReadDataByte(u8 *Copy_pu8Data , u16 Copy_u16Address)
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	00 d0       	rcall	.+0      	; 0x2c0e <EEPROM_enuReadDataByte+0x6>
    2c0e:	00 d0       	rcall	.+0      	; 0x2c10 <EEPROM_enuReadDataByte+0x8>
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <EEPROM_enuReadDataByte+0xa>
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	9c 83       	std	Y+4, r25	; 0x04
    2c18:	8b 83       	std	Y+3, r24	; 0x03
    2c1a:	7e 83       	std	Y+6, r23	; 0x06
    2c1c:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState = ES_NOK;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	8a 83       	std	Y+2, r24	; 0x02

#if EEPROM_TYPE == EEPROM_24C08_
	SalveAddr=(((0b01010<<3) |EEPROM_PIN_A2_CON | (Copy_u16Address & 0x0300)>>8)) ;

#elif EEPROM_TYPE == EEPROM_24C16_
	SalveAddr= (u8)((0b01010000)|(Copy_u16Address & 0x0700)>>8) ;
    2c22:	8d 81       	ldd	r24, Y+5	; 0x05
    2c24:	9e 81       	ldd	r25, Y+6	; 0x06
    2c26:	80 70       	andi	r24, 0x00	; 0
    2c28:	97 70       	andi	r25, 0x07	; 7
    2c2a:	89 2f       	mov	r24, r25
    2c2c:	99 27       	eor	r25, r25
    2c2e:	80 65       	ori	r24, 0x50	; 80
    2c30:	89 83       	std	Y+1, r24	; 0x01
#endif

	TWI_enuMasterSendStartCondition();
    2c32:	0e 94 ce 14 	call	0x299c	; 0x299c <TWI_enuMasterSendStartCondition>

	TWI_enuSendSlaveAddressWithWriteReq(SalveAddr);
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	0e 94 14 15 	call	0x2a28	; 0x2a28 <TWI_enuSendSlaveAddressWithWriteReq>

	TWI_enuMasterWriteDataByte((u8)Copy_u16Address);
    2c3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <TWI_enuMasterWriteDataByte>

	TWI_enuSendReapeatedStart();
    2c42:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <TWI_enuSendReapeatedStart>

	TWI_enuSendSlaveAddressWithReadReq(SalveAddr);
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <TWI_enuSendSlaveAddressWithReadReq>

	TWI_enuMasterReadDataByte(Copy_pu8Data);
    2c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    2c50:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <TWI_enuMasterReadDataByte>

	TWI_enuMasterSendStopCondition();
    2c54:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <TWI_enuMasterSendStopCondition>

	return Local_enuErrorState;
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2c5a:	26 96       	adiw	r28, 0x06	; 6
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <LCD_enuInit>:
#include "LCD_priv.h"
#include "LCD_config.h"


ES_t LCD_enuInit(void)
{
    2c6c:	0f 93       	push	r16
    2c6e:	1f 93       	push	r17
    2c70:	df 93       	push	r29
    2c72:	cf 93       	push	r28
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	c5 55       	subi	r28, 0x55	; 85
    2c7a:	d0 40       	sbci	r29, 0x00	; 0
    2c7c:	0f b6       	in	r0, 0x3f	; 63
    2c7e:	f8 94       	cli
    2c80:	de bf       	out	0x3e, r29	; 62
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	cd bf       	out	0x3d, r28	; 61
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_OK;
    2c86:	fe 01       	movw	r30, r28
    2c88:	eb 5a       	subi	r30, 0xAB	; 171
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	10 82       	st	Z, r1
    2c8e:	fe 01       	movw	r30, r28
    2c90:	ef 5a       	subi	r30, 0xAF	; 175
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a8 e4       	ldi	r26, 0x48	; 72
    2c9a:	b2 e4       	ldi	r27, 0x42	; 66
    2c9c:	80 83       	st	Z, r24
    2c9e:	91 83       	std	Z+1, r25	; 0x01
    2ca0:	a2 83       	std	Z+2, r26	; 0x02
    2ca2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca4:	8e 01       	movw	r16, r28
    2ca6:	03 5b       	subi	r16, 0xB3	; 179
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	fe 01       	movw	r30, r28
    2cac:	ef 5a       	subi	r30, 0xAF	; 175
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	4a e7       	ldi	r20, 0x7A	; 122
    2cbe:	53 e4       	ldi	r21, 0x43	; 67
    2cc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	f8 01       	movw	r30, r16
    2cca:	80 83       	st	Z, r24
    2ccc:	91 83       	std	Z+1, r25	; 0x01
    2cce:	a2 83       	std	Z+2, r26	; 0x02
    2cd0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e3 5b       	subi	r30, 0xB3	; 179
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	60 81       	ld	r22, Z
    2cda:	71 81       	ldd	r23, Z+1	; 0x01
    2cdc:	82 81       	ldd	r24, Z+2	; 0x02
    2cde:	93 81       	ldd	r25, Z+3	; 0x03
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	44 f4       	brge	.+16     	; 0x2d00 <LCD_enuInit+0x94>
		__ticks = 1;
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	e5 5b       	subi	r30, 0xB5	; 181
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	80 83       	st	Z, r24
    2cfe:	64 c0       	rjmp	.+200    	; 0x2dc8 <LCD_enuInit+0x15c>
	else if (__tmp > 65535)
    2d00:	fe 01       	movw	r30, r28
    2d02:	e3 5b       	subi	r30, 0xB3	; 179
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	0c f0       	brlt	.+2      	; 0x2d20 <LCD_enuInit+0xb4>
    2d1e:	43 c0       	rjmp	.+134    	; 0x2da6 <LCD_enuInit+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d20:	fe 01       	movw	r30, r28
    2d22:	ef 5a       	subi	r30, 0xAF	; 175
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	40 e2       	ldi	r20, 0x20	; 32
    2d34:	51 e4       	ldi	r21, 0x41	; 65
    2d36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2d3a:	dc 01       	movw	r26, r24
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	8e 01       	movw	r16, r28
    2d40:	05 5b       	subi	r16, 0xB5	; 181
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	bc 01       	movw	r22, r24
    2d46:	cd 01       	movw	r24, r26
    2d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	f8 01       	movw	r30, r16
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
    2d56:	1f c0       	rjmp	.+62     	; 0x2d96 <LCD_enuInit+0x12a>
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e7 5b       	subi	r30, 0xB7	; 183
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	89 e1       	ldi	r24, 0x19	; 25
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	80 83       	st	Z, r24
    2d66:	fe 01       	movw	r30, r28
    2d68:	e7 5b       	subi	r30, 0xB7	; 183
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	80 81       	ld	r24, Z
    2d6e:	91 81       	ldd	r25, Z+1	; 0x01
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	f1 f7       	brne	.-4      	; 0x2d70 <LCD_enuInit+0x104>
    2d74:	fe 01       	movw	r30, r28
    2d76:	e7 5b       	subi	r30, 0xB7	; 183
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	91 83       	std	Z+1, r25	; 0x01
    2d7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7e:	de 01       	movw	r26, r28
    2d80:	a5 5b       	subi	r26, 0xB5	; 181
    2d82:	bf 4f       	sbci	r27, 0xFF	; 255
    2d84:	fe 01       	movw	r30, r28
    2d86:	e5 5b       	subi	r30, 0xB5	; 181
    2d88:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8a:	80 81       	ld	r24, Z
    2d8c:	91 81       	ldd	r25, Z+1	; 0x01
    2d8e:	01 97       	sbiw	r24, 0x01	; 1
    2d90:	11 96       	adiw	r26, 0x01	; 1
    2d92:	9c 93       	st	X, r25
    2d94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d96:	fe 01       	movw	r30, r28
    2d98:	e5 5b       	subi	r30, 0xB5	; 181
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	00 97       	sbiw	r24, 0x00	; 0
    2da2:	d1 f6       	brne	.-76     	; 0x2d58 <LCD_enuInit+0xec>
    2da4:	27 c0       	rjmp	.+78     	; 0x2df4 <LCD_enuInit+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da6:	8e 01       	movw	r16, r28
    2da8:	05 5b       	subi	r16, 0xB5	; 181
    2daa:	1f 4f       	sbci	r17, 0xFF	; 255
    2dac:	fe 01       	movw	r30, r28
    2dae:	e3 5b       	subi	r30, 0xB3	; 179
    2db0:	ff 4f       	sbci	r31, 0xFF	; 255
    2db2:	60 81       	ld	r22, Z
    2db4:	71 81       	ldd	r23, Z+1	; 0x01
    2db6:	82 81       	ldd	r24, Z+2	; 0x02
    2db8:	93 81       	ldd	r25, Z+3	; 0x03
    2dba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	91 83       	std	Z+1, r25	; 0x01
    2dc6:	80 83       	st	Z, r24
    2dc8:	de 01       	movw	r26, r28
    2dca:	a9 5b       	subi	r26, 0xB9	; 185
    2dcc:	bf 4f       	sbci	r27, 0xFF	; 255
    2dce:	fe 01       	movw	r30, r28
    2dd0:	e5 5b       	subi	r30, 0xB5	; 181
    2dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd4:	80 81       	ld	r24, Z
    2dd6:	91 81       	ldd	r25, Z+1	; 0x01
    2dd8:	8d 93       	st	X+, r24
    2dda:	9c 93       	st	X, r25
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e9 5b       	subi	r30, 0xB9	; 185
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	80 81       	ld	r24, Z
    2de4:	91 81       	ldd	r25, Z+1	; 0x01
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <LCD_enuInit+0x17a>
    2dea:	fe 01       	movw	r30, r28
    2dec:	e9 5b       	subi	r30, 0xB9	; 185
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	91 83       	std	Z+1, r25	; 0x01
    2df2:	80 83       	st	Z, r24
	_delay_ms(50);
	/* We must set RS , RW and EN as output */
	DIO_enuSetPinDirection(RS_PORT, RS_PIN,DIO_u8PIN_OUTPUT);
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	41 e0       	ldi	r20, 0x01	; 1
    2dfa:	0e 94 94 11 	call	0x2328	; 0x2328 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN,DIO_u8PIN_OUTPUT);
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	61 e0       	ldi	r22, 0x01	; 1
    2e02:	41 e0       	ldi	r20, 0x01	; 1
    2e04:	0e 94 94 11 	call	0x2328	; 0x2328 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN,DIO_u8PIN_OUTPUT);
    2e08:	81 e0       	ldi	r24, 0x01	; 1
    2e0a:	62 e0       	ldi	r22, 0x02	; 2
    2e0c:	41 e0       	ldi	r20, 0x01	; 1
    2e0e:	0e 94 94 11 	call	0x2328	; 0x2328 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D4_PORT, D4_PIN,DIO_u8PIN_OUTPUT);
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	64 e0       	ldi	r22, 0x04	; 4
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	0e 94 94 11 	call	0x2328	; 0x2328 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN,DIO_u8PIN_OUTPUT);
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	65 e0       	ldi	r22, 0x05	; 5
    2e20:	41 e0       	ldi	r20, 0x01	; 1
    2e22:	0e 94 94 11 	call	0x2328	; 0x2328 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN,DIO_u8PIN_OUTPUT);
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	66 e0       	ldi	r22, 0x06	; 6
    2e2a:	41 e0       	ldi	r20, 0x01	; 1
    2e2c:	0e 94 94 11 	call	0x2328	; 0x2328 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D7_PORT, D7_PIN,DIO_u8PIN_OUTPUT);
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	67 e0       	ldi	r22, 0x07	; 7
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 94 11 	call	0x2328	; 0x2328 <DIO_enuSetPinDirection>
    2e3a:	fe 01       	movw	r30, r28
    2e3c:	ed 5b       	subi	r30, 0xBD	; 189
    2e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	a0 e8       	ldi	r26, 0x80	; 128
    2e46:	bf e3       	ldi	r27, 0x3F	; 63
    2e48:	80 83       	st	Z, r24
    2e4a:	91 83       	std	Z+1, r25	; 0x01
    2e4c:	a2 83       	std	Z+2, r26	; 0x02
    2e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e50:	8e 01       	movw	r16, r28
    2e52:	01 5c       	subi	r16, 0xC1	; 193
    2e54:	1f 4f       	sbci	r17, 0xFF	; 255
    2e56:	fe 01       	movw	r30, r28
    2e58:	ed 5b       	subi	r30, 0xBD	; 189
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	60 81       	ld	r22, Z
    2e5e:	71 81       	ldd	r23, Z+1	; 0x01
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	4a e7       	ldi	r20, 0x7A	; 122
    2e6a:	53 e4       	ldi	r21, 0x43	; 67
    2e6c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	f8 01       	movw	r30, r16
    2e76:	80 83       	st	Z, r24
    2e78:	91 83       	std	Z+1, r25	; 0x01
    2e7a:	a2 83       	std	Z+2, r26	; 0x02
    2e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e7e:	fe 01       	movw	r30, r28
    2e80:	ff 96       	adiw	r30, 0x3f	; 63
    2e82:	60 81       	ld	r22, Z
    2e84:	71 81       	ldd	r23, Z+1	; 0x01
    2e86:	82 81       	ldd	r24, Z+2	; 0x02
    2e88:	93 81       	ldd	r25, Z+3	; 0x03
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e8       	ldi	r20, 0x80	; 128
    2e90:	5f e3       	ldi	r21, 0x3F	; 63
    2e92:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2e96:	88 23       	and	r24, r24
    2e98:	2c f4       	brge	.+10     	; 0x2ea4 <LCD_enuInit+0x238>
		__ticks = 1;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	9e af       	std	Y+62, r25	; 0x3e
    2ea0:	8d af       	std	Y+61, r24	; 0x3d
    2ea2:	46 c0       	rjmp	.+140    	; 0x2f30 <LCD_enuInit+0x2c4>
	else if (__tmp > 65535)
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	ff 96       	adiw	r30, 0x3f	; 63
    2ea8:	60 81       	ld	r22, Z
    2eaa:	71 81       	ldd	r23, Z+1	; 0x01
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	93 81       	ldd	r25, Z+3	; 0x03
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	3f ef       	ldi	r19, 0xFF	; 255
    2eb4:	4f e7       	ldi	r20, 0x7F	; 127
    2eb6:	57 e4       	ldi	r21, 0x47	; 71
    2eb8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2ebc:	18 16       	cp	r1, r24
    2ebe:	64 f5       	brge	.+88     	; 0x2f18 <LCD_enuInit+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec0:	fe 01       	movw	r30, r28
    2ec2:	ed 5b       	subi	r30, 0xBD	; 189
    2ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec6:	60 81       	ld	r22, Z
    2ec8:	71 81       	ldd	r23, Z+1	; 0x01
    2eca:	82 81       	ldd	r24, Z+2	; 0x02
    2ecc:	93 81       	ldd	r25, Z+3	; 0x03
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	40 e2       	ldi	r20, 0x20	; 32
    2ed4:	51 e4       	ldi	r21, 0x41	; 65
    2ed6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	bc 01       	movw	r22, r24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	9e af       	std	Y+62, r25	; 0x3e
    2eec:	8d af       	std	Y+61, r24	; 0x3d
    2eee:	0f c0       	rjmp	.+30     	; 0x2f0e <LCD_enuInit+0x2a2>
    2ef0:	89 e1       	ldi	r24, 0x19	; 25
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	9c af       	std	Y+60, r25	; 0x3c
    2ef6:	8b af       	std	Y+59, r24	; 0x3b
    2ef8:	8b ad       	ldd	r24, Y+59	; 0x3b
    2efa:	9c ad       	ldd	r25, Y+60	; 0x3c
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <LCD_enuInit+0x290>
    2f00:	9c af       	std	Y+60, r25	; 0x3c
    2f02:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f04:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f06:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	9e af       	std	Y+62, r25	; 0x3e
    2f0c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f10:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	69 f7       	brne	.-38     	; 0x2ef0 <LCD_enuInit+0x284>
    2f16:	16 c0       	rjmp	.+44     	; 0x2f44 <LCD_enuInit+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f18:	fe 01       	movw	r30, r28
    2f1a:	ff 96       	adiw	r30, 0x3f	; 63
    2f1c:	60 81       	ld	r22, Z
    2f1e:	71 81       	ldd	r23, Z+1	; 0x01
    2f20:	82 81       	ldd	r24, Z+2	; 0x02
    2f22:	93 81       	ldd	r25, Z+3	; 0x03
    2f24:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	9e af       	std	Y+62, r25	; 0x3e
    2f2e:	8d af       	std	Y+61, r24	; 0x3d
    2f30:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f32:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f34:	9a af       	std	Y+58, r25	; 0x3a
    2f36:	89 af       	std	Y+57, r24	; 0x39
    2f38:	89 ad       	ldd	r24, Y+57	; 0x39
    2f3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <LCD_enuInit+0x2d0>
    2f40:	9a af       	std	Y+58, r25	; 0x3a
    2f42:	89 af       	std	Y+57, r24	; 0x39

#elif LCD_MODE == FOUR_BIT
	/*Function set*/
	/*4 Bit mode*/
	_delay_ms(1);
	LCD_invidSendCommand(LCD_FOUR_BIT_DATA);
    2f44:	82 e0       	ldi	r24, 0x02	; 2
    2f46:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_invidSendCommand>
    2f4a:	80 e0       	ldi	r24, 0x00	; 0
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	a0 e8       	ldi	r26, 0x80	; 128
    2f50:	bf e3       	ldi	r27, 0x3F	; 63
    2f52:	8d ab       	std	Y+53, r24	; 0x35
    2f54:	9e ab       	std	Y+54, r25	; 0x36
    2f56:	af ab       	std	Y+55, r26	; 0x37
    2f58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f60:	98 ad       	ldd	r25, Y+56	; 0x38
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	4a e7       	ldi	r20, 0x7A	; 122
    2f68:	53 e4       	ldi	r21, 0x43	; 67
    2f6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	89 ab       	std	Y+49, r24	; 0x31
    2f74:	9a ab       	std	Y+50, r25	; 0x32
    2f76:	ab ab       	std	Y+51, r26	; 0x33
    2f78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f80:	9c a9       	ldd	r25, Y+52	; 0x34
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e8       	ldi	r20, 0x80	; 128
    2f88:	5f e3       	ldi	r21, 0x3F	; 63
    2f8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2f8e:	88 23       	and	r24, r24
    2f90:	2c f4       	brge	.+10     	; 0x2f9c <LCD_enuInit+0x330>
		__ticks = 1;
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	98 ab       	std	Y+48, r25	; 0x30
    2f98:	8f a7       	std	Y+47, r24	; 0x2f
    2f9a:	3f c0       	rjmp	.+126    	; 0x301a <LCD_enuInit+0x3ae>
	else if (__tmp > 65535)
    2f9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2fa0:	8b a9       	ldd	r24, Y+51	; 0x33
    2fa2:	9c a9       	ldd	r25, Y+52	; 0x34
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	3f ef       	ldi	r19, 0xFF	; 255
    2fa8:	4f e7       	ldi	r20, 0x7F	; 127
    2faa:	57 e4       	ldi	r21, 0x47	; 71
    2fac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2fb0:	18 16       	cp	r1, r24
    2fb2:	4c f5       	brge	.+82     	; 0x3006 <LCD_enuInit+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb4:	6d a9       	ldd	r22, Y+53	; 0x35
    2fb6:	7e a9       	ldd	r23, Y+54	; 0x36
    2fb8:	8f a9       	ldd	r24, Y+55	; 0x37
    2fba:	98 ad       	ldd	r25, Y+56	; 0x38
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	40 e2       	ldi	r20, 0x20	; 32
    2fc2:	51 e4       	ldi	r21, 0x41	; 65
    2fc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fc8:	dc 01       	movw	r26, r24
    2fca:	cb 01       	movw	r24, r22
    2fcc:	bc 01       	movw	r22, r24
    2fce:	cd 01       	movw	r24, r26
    2fd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	98 ab       	std	Y+48, r25	; 0x30
    2fda:	8f a7       	std	Y+47, r24	; 0x2f
    2fdc:	0f c0       	rjmp	.+30     	; 0x2ffc <LCD_enuInit+0x390>
    2fde:	89 e1       	ldi	r24, 0x19	; 25
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	9e a7       	std	Y+46, r25	; 0x2e
    2fe4:	8d a7       	std	Y+45, r24	; 0x2d
    2fe6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fe8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <LCD_enuInit+0x37e>
    2fee:	9e a7       	std	Y+46, r25	; 0x2e
    2ff0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff4:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	98 ab       	std	Y+48, r25	; 0x30
    2ffa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    3000:	00 97       	sbiw	r24, 0x00	; 0
    3002:	69 f7       	brne	.-38     	; 0x2fde <LCD_enuInit+0x372>
    3004:	14 c0       	rjmp	.+40     	; 0x302e <LCD_enuInit+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3006:	69 a9       	ldd	r22, Y+49	; 0x31
    3008:	7a a9       	ldd	r23, Y+50	; 0x32
    300a:	8b a9       	ldd	r24, Y+51	; 0x33
    300c:	9c a9       	ldd	r25, Y+52	; 0x34
    300e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	98 ab       	std	Y+48, r25	; 0x30
    3018:	8f a7       	std	Y+47, r24	; 0x2f
    301a:	8f a5       	ldd	r24, Y+47	; 0x2f
    301c:	98 a9       	ldd	r25, Y+48	; 0x30
    301e:	9c a7       	std	Y+44, r25	; 0x2c
    3020:	8b a7       	std	Y+43, r24	; 0x2b
    3022:	8b a5       	ldd	r24, Y+43	; 0x2b
    3024:	9c a5       	ldd	r25, Y+44	; 0x2c
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	f1 f7       	brne	.-4      	; 0x3026 <LCD_enuInit+0x3ba>
    302a:	9c a7       	std	Y+44, r25	; 0x2c
    302c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_invidSendCommand(LCD_FOUR_BIT_TWO_LINES);
    302e:	88 e2       	ldi	r24, 0x28	; 40
    3030:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_invidSendCommand>
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	a0 e8       	ldi	r26, 0x80	; 128
    303a:	bf e3       	ldi	r27, 0x3F	; 63
    303c:	8f a3       	std	Y+39, r24	; 0x27
    303e:	98 a7       	std	Y+40, r25	; 0x28
    3040:	a9 a7       	std	Y+41, r26	; 0x29
    3042:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3044:	6f a1       	ldd	r22, Y+39	; 0x27
    3046:	78 a5       	ldd	r23, Y+40	; 0x28
    3048:	89 a5       	ldd	r24, Y+41	; 0x29
    304a:	9a a5       	ldd	r25, Y+42	; 0x2a
    304c:	20 e0       	ldi	r18, 0x00	; 0
    304e:	30 e0       	ldi	r19, 0x00	; 0
    3050:	4a e7       	ldi	r20, 0x7A	; 122
    3052:	53 e4       	ldi	r21, 0x43	; 67
    3054:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8b a3       	std	Y+35, r24	; 0x23
    305e:	9c a3       	std	Y+36, r25	; 0x24
    3060:	ad a3       	std	Y+37, r26	; 0x25
    3062:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3064:	6b a1       	ldd	r22, Y+35	; 0x23
    3066:	7c a1       	ldd	r23, Y+36	; 0x24
    3068:	8d a1       	ldd	r24, Y+37	; 0x25
    306a:	9e a1       	ldd	r25, Y+38	; 0x26
    306c:	20 e0       	ldi	r18, 0x00	; 0
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	40 e8       	ldi	r20, 0x80	; 128
    3072:	5f e3       	ldi	r21, 0x3F	; 63
    3074:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3078:	88 23       	and	r24, r24
    307a:	2c f4       	brge	.+10     	; 0x3086 <LCD_enuInit+0x41a>
		__ticks = 1;
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	9a a3       	std	Y+34, r25	; 0x22
    3082:	89 a3       	std	Y+33, r24	; 0x21
    3084:	3f c0       	rjmp	.+126    	; 0x3104 <LCD_enuInit+0x498>
	else if (__tmp > 65535)
    3086:	6b a1       	ldd	r22, Y+35	; 0x23
    3088:	7c a1       	ldd	r23, Y+36	; 0x24
    308a:	8d a1       	ldd	r24, Y+37	; 0x25
    308c:	9e a1       	ldd	r25, Y+38	; 0x26
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	3f ef       	ldi	r19, 0xFF	; 255
    3092:	4f e7       	ldi	r20, 0x7F	; 127
    3094:	57 e4       	ldi	r21, 0x47	; 71
    3096:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    309a:	18 16       	cp	r1, r24
    309c:	4c f5       	brge	.+82     	; 0x30f0 <LCD_enuInit+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    309e:	6f a1       	ldd	r22, Y+39	; 0x27
    30a0:	78 a5       	ldd	r23, Y+40	; 0x28
    30a2:	89 a5       	ldd	r24, Y+41	; 0x29
    30a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30a6:	20 e0       	ldi	r18, 0x00	; 0
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	40 e2       	ldi	r20, 0x20	; 32
    30ac:	51 e4       	ldi	r21, 0x41	; 65
    30ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	bc 01       	movw	r22, r24
    30b8:	cd 01       	movw	r24, r26
    30ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	9a a3       	std	Y+34, r25	; 0x22
    30c4:	89 a3       	std	Y+33, r24	; 0x21
    30c6:	0f c0       	rjmp	.+30     	; 0x30e6 <LCD_enuInit+0x47a>
    30c8:	89 e1       	ldi	r24, 0x19	; 25
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	98 a3       	std	Y+32, r25	; 0x20
    30ce:	8f 8f       	std	Y+31, r24	; 0x1f
    30d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30d2:	98 a1       	ldd	r25, Y+32	; 0x20
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	f1 f7       	brne	.-4      	; 0x30d4 <LCD_enuInit+0x468>
    30d8:	98 a3       	std	Y+32, r25	; 0x20
    30da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30dc:	89 a1       	ldd	r24, Y+33	; 0x21
    30de:	9a a1       	ldd	r25, Y+34	; 0x22
    30e0:	01 97       	sbiw	r24, 0x01	; 1
    30e2:	9a a3       	std	Y+34, r25	; 0x22
    30e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e6:	89 a1       	ldd	r24, Y+33	; 0x21
    30e8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	69 f7       	brne	.-38     	; 0x30c8 <LCD_enuInit+0x45c>
    30ee:	14 c0       	rjmp	.+40     	; 0x3118 <LCD_enuInit+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f0:	6b a1       	ldd	r22, Y+35	; 0x23
    30f2:	7c a1       	ldd	r23, Y+36	; 0x24
    30f4:	8d a1       	ldd	r24, Y+37	; 0x25
    30f6:	9e a1       	ldd	r25, Y+38	; 0x26
    30f8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    30fc:	dc 01       	movw	r26, r24
    30fe:	cb 01       	movw	r24, r22
    3100:	9a a3       	std	Y+34, r25	; 0x22
    3102:	89 a3       	std	Y+33, r24	; 0x21
    3104:	89 a1       	ldd	r24, Y+33	; 0x21
    3106:	9a a1       	ldd	r25, Y+34	; 0x22
    3108:	9e 8f       	std	Y+30, r25	; 0x1e
    310a:	8d 8f       	std	Y+29, r24	; 0x1d
    310c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    310e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	f1 f7       	brne	.-4      	; 0x3110 <LCD_enuInit+0x4a4>
    3114:	9e 8f       	std	Y+30, r25	; 0x1e
    3116:	8d 8f       	std	Y+29, r24	; 0x1d
#endif

	_delay_ms(1);
	LCD_invidSendCommand(0x0f);
    3118:	8f e0       	ldi	r24, 0x0F	; 15
    311a:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_invidSendCommand>
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	a0 e0       	ldi	r26, 0x00	; 0
    3124:	b0 e4       	ldi	r27, 0x40	; 64
    3126:	89 8f       	std	Y+25, r24	; 0x19
    3128:	9a 8f       	std	Y+26, r25	; 0x1a
    312a:	ab 8f       	std	Y+27, r26	; 0x1b
    312c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    312e:	69 8d       	ldd	r22, Y+25	; 0x19
    3130:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3132:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3134:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	4a e7       	ldi	r20, 0x7A	; 122
    313c:	53 e4       	ldi	r21, 0x43	; 67
    313e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	8d 8b       	std	Y+21, r24	; 0x15
    3148:	9e 8b       	std	Y+22, r25	; 0x16
    314a:	af 8b       	std	Y+23, r26	; 0x17
    314c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    314e:	6d 89       	ldd	r22, Y+21	; 0x15
    3150:	7e 89       	ldd	r23, Y+22	; 0x16
    3152:	8f 89       	ldd	r24, Y+23	; 0x17
    3154:	98 8d       	ldd	r25, Y+24	; 0x18
    3156:	20 e0       	ldi	r18, 0x00	; 0
    3158:	30 e0       	ldi	r19, 0x00	; 0
    315a:	40 e8       	ldi	r20, 0x80	; 128
    315c:	5f e3       	ldi	r21, 0x3F	; 63
    315e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3162:	88 23       	and	r24, r24
    3164:	2c f4       	brge	.+10     	; 0x3170 <LCD_enuInit+0x504>
		__ticks = 1;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	9c 8b       	std	Y+20, r25	; 0x14
    316c:	8b 8b       	std	Y+19, r24	; 0x13
    316e:	3f c0       	rjmp	.+126    	; 0x31ee <LCD_enuInit+0x582>
	else if (__tmp > 65535)
    3170:	6d 89       	ldd	r22, Y+21	; 0x15
    3172:	7e 89       	ldd	r23, Y+22	; 0x16
    3174:	8f 89       	ldd	r24, Y+23	; 0x17
    3176:	98 8d       	ldd	r25, Y+24	; 0x18
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	3f ef       	ldi	r19, 0xFF	; 255
    317c:	4f e7       	ldi	r20, 0x7F	; 127
    317e:	57 e4       	ldi	r21, 0x47	; 71
    3180:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3184:	18 16       	cp	r1, r24
    3186:	4c f5       	brge	.+82     	; 0x31da <LCD_enuInit+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3188:	69 8d       	ldd	r22, Y+25	; 0x19
    318a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    318c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    318e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3190:	20 e0       	ldi	r18, 0x00	; 0
    3192:	30 e0       	ldi	r19, 0x00	; 0
    3194:	40 e2       	ldi	r20, 0x20	; 32
    3196:	51 e4       	ldi	r21, 0x41	; 65
    3198:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    319c:	dc 01       	movw	r26, r24
    319e:	cb 01       	movw	r24, r22
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	9c 8b       	std	Y+20, r25	; 0x14
    31ae:	8b 8b       	std	Y+19, r24	; 0x13
    31b0:	0f c0       	rjmp	.+30     	; 0x31d0 <LCD_enuInit+0x564>
    31b2:	89 e1       	ldi	r24, 0x19	; 25
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	9a 8b       	std	Y+18, r25	; 0x12
    31b8:	89 8b       	std	Y+17, r24	; 0x11
    31ba:	89 89       	ldd	r24, Y+17	; 0x11
    31bc:	9a 89       	ldd	r25, Y+18	; 0x12
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <LCD_enuInit+0x552>
    31c2:	9a 8b       	std	Y+18, r25	; 0x12
    31c4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31c6:	8b 89       	ldd	r24, Y+19	; 0x13
    31c8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	9c 8b       	std	Y+20, r25	; 0x14
    31ce:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d0:	8b 89       	ldd	r24, Y+19	; 0x13
    31d2:	9c 89       	ldd	r25, Y+20	; 0x14
    31d4:	00 97       	sbiw	r24, 0x00	; 0
    31d6:	69 f7       	brne	.-38     	; 0x31b2 <LCD_enuInit+0x546>
    31d8:	14 c0       	rjmp	.+40     	; 0x3202 <LCD_enuInit+0x596>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31da:	6d 89       	ldd	r22, Y+21	; 0x15
    31dc:	7e 89       	ldd	r23, Y+22	; 0x16
    31de:	8f 89       	ldd	r24, Y+23	; 0x17
    31e0:	98 8d       	ldd	r25, Y+24	; 0x18
    31e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	9c 8b       	std	Y+20, r25	; 0x14
    31ec:	8b 8b       	std	Y+19, r24	; 0x13
    31ee:	8b 89       	ldd	r24, Y+19	; 0x13
    31f0:	9c 89       	ldd	r25, Y+20	; 0x14
    31f2:	98 8b       	std	Y+16, r25	; 0x10
    31f4:	8f 87       	std	Y+15, r24	; 0x0f
    31f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31f8:	98 89       	ldd	r25, Y+16	; 0x10
    31fa:	01 97       	sbiw	r24, 0x01	; 1
    31fc:	f1 f7       	brne	.-4      	; 0x31fa <LCD_enuInit+0x58e>
    31fe:	98 8b       	std	Y+16, r25	; 0x10
    3200:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	LCD_invidSendCommand(LCD_INCREASE_DDRAM_ADRESS);
    3202:	86 e0       	ldi	r24, 0x06	; 6
    3204:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_invidSendCommand>
    3208:	80 e0       	ldi	r24, 0x00	; 0
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	a0 e8       	ldi	r26, 0x80	; 128
    320e:	bf e3       	ldi	r27, 0x3F	; 63
    3210:	8b 87       	std	Y+11, r24	; 0x0b
    3212:	9c 87       	std	Y+12, r25	; 0x0c
    3214:	ad 87       	std	Y+13, r26	; 0x0d
    3216:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3218:	6b 85       	ldd	r22, Y+11	; 0x0b
    321a:	7c 85       	ldd	r23, Y+12	; 0x0c
    321c:	8d 85       	ldd	r24, Y+13	; 0x0d
    321e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	4a e7       	ldi	r20, 0x7A	; 122
    3226:	53 e4       	ldi	r21, 0x43	; 67
    3228:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	8f 83       	std	Y+7, r24	; 0x07
    3232:	98 87       	std	Y+8, r25	; 0x08
    3234:	a9 87       	std	Y+9, r26	; 0x09
    3236:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3238:	6f 81       	ldd	r22, Y+7	; 0x07
    323a:	78 85       	ldd	r23, Y+8	; 0x08
    323c:	89 85       	ldd	r24, Y+9	; 0x09
    323e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e8       	ldi	r20, 0x80	; 128
    3246:	5f e3       	ldi	r21, 0x3F	; 63
    3248:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    324c:	88 23       	and	r24, r24
    324e:	2c f4       	brge	.+10     	; 0x325a <LCD_enuInit+0x5ee>
		__ticks = 1;
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	9e 83       	std	Y+6, r25	; 0x06
    3256:	8d 83       	std	Y+5, r24	; 0x05
    3258:	3f c0       	rjmp	.+126    	; 0x32d8 <LCD_enuInit+0x66c>
	else if (__tmp > 65535)
    325a:	6f 81       	ldd	r22, Y+7	; 0x07
    325c:	78 85       	ldd	r23, Y+8	; 0x08
    325e:	89 85       	ldd	r24, Y+9	; 0x09
    3260:	9a 85       	ldd	r25, Y+10	; 0x0a
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	3f ef       	ldi	r19, 0xFF	; 255
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	57 e4       	ldi	r21, 0x47	; 71
    326a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	4c f5       	brge	.+82     	; 0x32c4 <LCD_enuInit+0x658>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3272:	6b 85       	ldd	r22, Y+11	; 0x0b
    3274:	7c 85       	ldd	r23, Y+12	; 0x0c
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	40 e2       	ldi	r20, 0x20	; 32
    3280:	51 e4       	ldi	r21, 0x41	; 65
    3282:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	bc 01       	movw	r22, r24
    328c:	cd 01       	movw	r24, r26
    328e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	0f c0       	rjmp	.+30     	; 0x32ba <LCD_enuInit+0x64e>
    329c:	89 e1       	ldi	r24, 0x19	; 25
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	9c 83       	std	Y+4, r25	; 0x04
    32a2:	8b 83       	std	Y+3, r24	; 0x03
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
    32a6:	9c 81       	ldd	r25, Y+4	; 0x04
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <LCD_enuInit+0x63c>
    32ac:	9c 83       	std	Y+4, r25	; 0x04
    32ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b0:	8d 81       	ldd	r24, Y+5	; 0x05
    32b2:	9e 81       	ldd	r25, Y+6	; 0x06
    32b4:	01 97       	sbiw	r24, 0x01	; 1
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ba:	8d 81       	ldd	r24, Y+5	; 0x05
    32bc:	9e 81       	ldd	r25, Y+6	; 0x06
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	69 f7       	brne	.-38     	; 0x329c <LCD_enuInit+0x630>
    32c2:	14 c0       	rjmp	.+40     	; 0x32ec <LCD_enuInit+0x680>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c4:	6f 81       	ldd	r22, Y+7	; 0x07
    32c6:	78 85       	ldd	r23, Y+8	; 0x08
    32c8:	89 85       	ldd	r24, Y+9	; 0x09
    32ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    32cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    32d0:	dc 01       	movw	r26, r24
    32d2:	cb 01       	movw	r24, r22
    32d4:	9e 83       	std	Y+6, r25	; 0x06
    32d6:	8d 83       	std	Y+5, r24	; 0x05
    32d8:	8d 81       	ldd	r24, Y+5	; 0x05
    32da:	9e 81       	ldd	r25, Y+6	; 0x06
    32dc:	9a 83       	std	Y+2, r25	; 0x02
    32de:	89 83       	std	Y+1, r24	; 0x01
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	9a 81       	ldd	r25, Y+2	; 0x02
    32e4:	01 97       	sbiw	r24, 0x01	; 1
    32e6:	f1 f7       	brne	.-4      	; 0x32e4 <LCD_enuInit+0x678>
    32e8:	9a 83       	std	Y+2, r25	; 0x02
    32ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_invidSendCommand(LCD_CLEAR_SCREEN);
    32ec:	81 e0       	ldi	r24, 0x01	; 1
    32ee:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_invidSendCommand>

	/*Then return error state variable*/
	return Local_enuErrorState;
    32f2:	fe 01       	movw	r30, r28
    32f4:	eb 5a       	subi	r30, 0xAB	; 171
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	80 81       	ld	r24, Z
}
    32fa:	cb 5a       	subi	r28, 0xAB	; 171
    32fc:	df 4f       	sbci	r29, 0xFF	; 255
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	cf 91       	pop	r28
    330a:	df 91       	pop	r29
    330c:	1f 91       	pop	r17
    330e:	0f 91       	pop	r16
    3310:	08 95       	ret

00003312 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Char)
{
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	00 d0       	rcall	.+0      	; 0x3318 <LCD_enuDisplayChar+0x6>
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	8a 83       	std	Y+2, r24	; 0x02
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8PIN_HIGH);
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	41 e0       	ldi	r20, 0x01	; 1
    3328:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Char);
    332c:	8a 81       	ldd	r24, Y+2	; 0x02
    332e:	0e 94 05 1c 	call	0x380a	; 0x380a <LCD_vidLatch>

	/*Then return error state variable*/
	return Local_enuErrorState;
    3332:	89 81       	ldd	r24, Y+1	; 0x01
}
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	08 95       	ret

0000333e <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	00 d0       	rcall	.+0      	; 0x3344 <LCD_enuSendCommand+0x6>
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	8a 83       	std	Y+2, r24	; 0x02
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	89 83       	std	Y+1, r24	; 0x01

	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8PIN_LOW);
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	40 e0       	ldi	r20, 0x00	; 0
    3354:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>

	LCD_vidLatch(Copy_u8Command);
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	0e 94 05 1c 	call	0x380a	; 0x380a <LCD_vidLatch>

	/*Then return error state variable*/
	return Local_enuErrorState;
    335e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <LCD_invidSendCommand>:


static inline void LCD_invidSendCommand(u8 Copy_u8Command)
{
    336a:	df 93       	push	r29
    336c:	cf 93       	push	r28
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	e9 97       	sbiw	r28, 0x39	; 57
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	89 af       	std	Y+57, r24	; 0x39
	/*To send command we have to clear RS and RW pins all time*/
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8PIN_LOW);
    3380:	81 e0       	ldi	r24, 0x01	; 1
    3382:	60 e0       	ldi	r22, 0x00	; 0
    3384:	40 e0       	ldi	r20, 0x00	; 0
    3386:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8PIN_LOW);
    338a:	81 e0       	ldi	r24, 0x01	; 1
    338c:	61 e0       	ldi	r22, 0x01	; 1
    338e:	40 e0       	ldi	r20, 0x00	; 0
    3390:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	/*At first Disable LCD*/
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_LOW);
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	62 e0       	ldi	r22, 0x02	; 2
    3398:	40 e0       	ldi	r20, 0x00	; 0
    339a:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	_delay_ms(1);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_LOW);
	_delay_ms(1);
#elif LCD_MODE == FOUR_BIT
	/*Send the uper command*/
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Command>>4)&1));
    339e:	89 ad       	ldd	r24, Y+57	; 0x39
    33a0:	82 95       	swap	r24
    33a2:	8f 70       	andi	r24, 0x0F	; 15
    33a4:	98 2f       	mov	r25, r24
    33a6:	91 70       	andi	r25, 0x01	; 1
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	64 e0       	ldi	r22, 0x04	; 4
    33ac:	49 2f       	mov	r20, r25
    33ae:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Command>>5)&1));
    33b2:	89 ad       	ldd	r24, Y+57	; 0x39
    33b4:	82 95       	swap	r24
    33b6:	86 95       	lsr	r24
    33b8:	87 70       	andi	r24, 0x07	; 7
    33ba:	98 2f       	mov	r25, r24
    33bc:	91 70       	andi	r25, 0x01	; 1
    33be:	81 e0       	ldi	r24, 0x01	; 1
    33c0:	65 e0       	ldi	r22, 0x05	; 5
    33c2:	49 2f       	mov	r20, r25
    33c4:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Command>>6)&1));
    33c8:	89 ad       	ldd	r24, Y+57	; 0x39
    33ca:	82 95       	swap	r24
    33cc:	86 95       	lsr	r24
    33ce:	86 95       	lsr	r24
    33d0:	83 70       	andi	r24, 0x03	; 3
    33d2:	98 2f       	mov	r25, r24
    33d4:	91 70       	andi	r25, 0x01	; 1
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	66 e0       	ldi	r22, 0x06	; 6
    33da:	49 2f       	mov	r20, r25
    33dc:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Command>>7)&1));
    33e0:	89 ad       	ldd	r24, Y+57	; 0x39
    33e2:	98 2f       	mov	r25, r24
    33e4:	99 1f       	adc	r25, r25
    33e6:	99 27       	eor	r25, r25
    33e8:	99 1f       	adc	r25, r25
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	67 e0       	ldi	r22, 0x07	; 7
    33ee:	49 2f       	mov	r20, r25
    33f0:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	/*Latch the enable*/
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_HIGH);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	62 e0       	ldi	r22, 0x02	; 2
    33f8:	41 e0       	ldi	r20, 0x01	; 1
    33fa:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    33fe:	80 e0       	ldi	r24, 0x00	; 0
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	a0 e8       	ldi	r26, 0x80	; 128
    3404:	bf e3       	ldi	r27, 0x3F	; 63
    3406:	8d ab       	std	Y+53, r24	; 0x35
    3408:	9e ab       	std	Y+54, r25	; 0x36
    340a:	af ab       	std	Y+55, r26	; 0x37
    340c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340e:	6d a9       	ldd	r22, Y+53	; 0x35
    3410:	7e a9       	ldd	r23, Y+54	; 0x36
    3412:	8f a9       	ldd	r24, Y+55	; 0x37
    3414:	98 ad       	ldd	r25, Y+56	; 0x38
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	4a e7       	ldi	r20, 0x7A	; 122
    341c:	53 e4       	ldi	r21, 0x43	; 67
    341e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3422:	dc 01       	movw	r26, r24
    3424:	cb 01       	movw	r24, r22
    3426:	89 ab       	std	Y+49, r24	; 0x31
    3428:	9a ab       	std	Y+50, r25	; 0x32
    342a:	ab ab       	std	Y+51, r26	; 0x33
    342c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    342e:	69 a9       	ldd	r22, Y+49	; 0x31
    3430:	7a a9       	ldd	r23, Y+50	; 0x32
    3432:	8b a9       	ldd	r24, Y+51	; 0x33
    3434:	9c a9       	ldd	r25, Y+52	; 0x34
    3436:	20 e0       	ldi	r18, 0x00	; 0
    3438:	30 e0       	ldi	r19, 0x00	; 0
    343a:	40 e8       	ldi	r20, 0x80	; 128
    343c:	5f e3       	ldi	r21, 0x3F	; 63
    343e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3442:	88 23       	and	r24, r24
    3444:	2c f4       	brge	.+10     	; 0x3450 <LCD_invidSendCommand+0xe6>
		__ticks = 1;
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	98 ab       	std	Y+48, r25	; 0x30
    344c:	8f a7       	std	Y+47, r24	; 0x2f
    344e:	3f c0       	rjmp	.+126    	; 0x34ce <LCD_invidSendCommand+0x164>
	else if (__tmp > 65535)
    3450:	69 a9       	ldd	r22, Y+49	; 0x31
    3452:	7a a9       	ldd	r23, Y+50	; 0x32
    3454:	8b a9       	ldd	r24, Y+51	; 0x33
    3456:	9c a9       	ldd	r25, Y+52	; 0x34
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	3f ef       	ldi	r19, 0xFF	; 255
    345c:	4f e7       	ldi	r20, 0x7F	; 127
    345e:	57 e4       	ldi	r21, 0x47	; 71
    3460:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3464:	18 16       	cp	r1, r24
    3466:	4c f5       	brge	.+82     	; 0x34ba <LCD_invidSendCommand+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3468:	6d a9       	ldd	r22, Y+53	; 0x35
    346a:	7e a9       	ldd	r23, Y+54	; 0x36
    346c:	8f a9       	ldd	r24, Y+55	; 0x37
    346e:	98 ad       	ldd	r25, Y+56	; 0x38
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	40 e2       	ldi	r20, 0x20	; 32
    3476:	51 e4       	ldi	r21, 0x41	; 65
    3478:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	bc 01       	movw	r22, r24
    3482:	cd 01       	movw	r24, r26
    3484:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	98 ab       	std	Y+48, r25	; 0x30
    348e:	8f a7       	std	Y+47, r24	; 0x2f
    3490:	0f c0       	rjmp	.+30     	; 0x34b0 <LCD_invidSendCommand+0x146>
    3492:	89 e1       	ldi	r24, 0x19	; 25
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	9e a7       	std	Y+46, r25	; 0x2e
    3498:	8d a7       	std	Y+45, r24	; 0x2d
    349a:	8d a5       	ldd	r24, Y+45	; 0x2d
    349c:	9e a5       	ldd	r25, Y+46	; 0x2e
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <LCD_invidSendCommand+0x134>
    34a2:	9e a7       	std	Y+46, r25	; 0x2e
    34a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a8:	98 a9       	ldd	r25, Y+48	; 0x30
    34aa:	01 97       	sbiw	r24, 0x01	; 1
    34ac:	98 ab       	std	Y+48, r25	; 0x30
    34ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    34b2:	98 a9       	ldd	r25, Y+48	; 0x30
    34b4:	00 97       	sbiw	r24, 0x00	; 0
    34b6:	69 f7       	brne	.-38     	; 0x3492 <LCD_invidSendCommand+0x128>
    34b8:	14 c0       	rjmp	.+40     	; 0x34e2 <LCD_invidSendCommand+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ba:	69 a9       	ldd	r22, Y+49	; 0x31
    34bc:	7a a9       	ldd	r23, Y+50	; 0x32
    34be:	8b a9       	ldd	r24, Y+51	; 0x33
    34c0:	9c a9       	ldd	r25, Y+52	; 0x34
    34c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	98 ab       	std	Y+48, r25	; 0x30
    34cc:	8f a7       	std	Y+47, r24	; 0x2f
    34ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    34d0:	98 a9       	ldd	r25, Y+48	; 0x30
    34d2:	9c a7       	std	Y+44, r25	; 0x2c
    34d4:	8b a7       	std	Y+43, r24	; 0x2b
    34d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    34d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <LCD_invidSendCommand+0x170>
    34de:	9c a7       	std	Y+44, r25	; 0x2c
    34e0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_LOW);
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	62 e0       	ldi	r22, 0x02	; 2
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    34ec:	80 e0       	ldi	r24, 0x00	; 0
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	a0 e8       	ldi	r26, 0x80	; 128
    34f2:	bf e3       	ldi	r27, 0x3F	; 63
    34f4:	8f a3       	std	Y+39, r24	; 0x27
    34f6:	98 a7       	std	Y+40, r25	; 0x28
    34f8:	a9 a7       	std	Y+41, r26	; 0x29
    34fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fc:	6f a1       	ldd	r22, Y+39	; 0x27
    34fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3500:	89 a5       	ldd	r24, Y+41	; 0x29
    3502:	9a a5       	ldd	r25, Y+42	; 0x2a
    3504:	20 e0       	ldi	r18, 0x00	; 0
    3506:	30 e0       	ldi	r19, 0x00	; 0
    3508:	4a e7       	ldi	r20, 0x7A	; 122
    350a:	53 e4       	ldi	r21, 0x43	; 67
    350c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3510:	dc 01       	movw	r26, r24
    3512:	cb 01       	movw	r24, r22
    3514:	8b a3       	std	Y+35, r24	; 0x23
    3516:	9c a3       	std	Y+36, r25	; 0x24
    3518:	ad a3       	std	Y+37, r26	; 0x25
    351a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    351c:	6b a1       	ldd	r22, Y+35	; 0x23
    351e:	7c a1       	ldd	r23, Y+36	; 0x24
    3520:	8d a1       	ldd	r24, Y+37	; 0x25
    3522:	9e a1       	ldd	r25, Y+38	; 0x26
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e8       	ldi	r20, 0x80	; 128
    352a:	5f e3       	ldi	r21, 0x3F	; 63
    352c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3530:	88 23       	and	r24, r24
    3532:	2c f4       	brge	.+10     	; 0x353e <LCD_invidSendCommand+0x1d4>
		__ticks = 1;
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	9a a3       	std	Y+34, r25	; 0x22
    353a:	89 a3       	std	Y+33, r24	; 0x21
    353c:	3f c0       	rjmp	.+126    	; 0x35bc <LCD_invidSendCommand+0x252>
	else if (__tmp > 65535)
    353e:	6b a1       	ldd	r22, Y+35	; 0x23
    3540:	7c a1       	ldd	r23, Y+36	; 0x24
    3542:	8d a1       	ldd	r24, Y+37	; 0x25
    3544:	9e a1       	ldd	r25, Y+38	; 0x26
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	3f ef       	ldi	r19, 0xFF	; 255
    354a:	4f e7       	ldi	r20, 0x7F	; 127
    354c:	57 e4       	ldi	r21, 0x47	; 71
    354e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3552:	18 16       	cp	r1, r24
    3554:	4c f5       	brge	.+82     	; 0x35a8 <LCD_invidSendCommand+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3556:	6f a1       	ldd	r22, Y+39	; 0x27
    3558:	78 a5       	ldd	r23, Y+40	; 0x28
    355a:	89 a5       	ldd	r24, Y+41	; 0x29
    355c:	9a a5       	ldd	r25, Y+42	; 0x2a
    355e:	20 e0       	ldi	r18, 0x00	; 0
    3560:	30 e0       	ldi	r19, 0x00	; 0
    3562:	40 e2       	ldi	r20, 0x20	; 32
    3564:	51 e4       	ldi	r21, 0x41	; 65
    3566:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	bc 01       	movw	r22, r24
    3570:	cd 01       	movw	r24, r26
    3572:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3576:	dc 01       	movw	r26, r24
    3578:	cb 01       	movw	r24, r22
    357a:	9a a3       	std	Y+34, r25	; 0x22
    357c:	89 a3       	std	Y+33, r24	; 0x21
    357e:	0f c0       	rjmp	.+30     	; 0x359e <LCD_invidSendCommand+0x234>
    3580:	89 e1       	ldi	r24, 0x19	; 25
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	98 a3       	std	Y+32, r25	; 0x20
    3586:	8f 8f       	std	Y+31, r24	; 0x1f
    3588:	8f 8d       	ldd	r24, Y+31	; 0x1f
    358a:	98 a1       	ldd	r25, Y+32	; 0x20
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	f1 f7       	brne	.-4      	; 0x358c <LCD_invidSendCommand+0x222>
    3590:	98 a3       	std	Y+32, r25	; 0x20
    3592:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3594:	89 a1       	ldd	r24, Y+33	; 0x21
    3596:	9a a1       	ldd	r25, Y+34	; 0x22
    3598:	01 97       	sbiw	r24, 0x01	; 1
    359a:	9a a3       	std	Y+34, r25	; 0x22
    359c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    359e:	89 a1       	ldd	r24, Y+33	; 0x21
    35a0:	9a a1       	ldd	r25, Y+34	; 0x22
    35a2:	00 97       	sbiw	r24, 0x00	; 0
    35a4:	69 f7       	brne	.-38     	; 0x3580 <LCD_invidSendCommand+0x216>
    35a6:	14 c0       	rjmp	.+40     	; 0x35d0 <LCD_invidSendCommand+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35a8:	6b a1       	ldd	r22, Y+35	; 0x23
    35aa:	7c a1       	ldd	r23, Y+36	; 0x24
    35ac:	8d a1       	ldd	r24, Y+37	; 0x25
    35ae:	9e a1       	ldd	r25, Y+38	; 0x26
    35b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    35b4:	dc 01       	movw	r26, r24
    35b6:	cb 01       	movw	r24, r22
    35b8:	9a a3       	std	Y+34, r25	; 0x22
    35ba:	89 a3       	std	Y+33, r24	; 0x21
    35bc:	89 a1       	ldd	r24, Y+33	; 0x21
    35be:	9a a1       	ldd	r25, Y+34	; 0x22
    35c0:	9e 8f       	std	Y+30, r25	; 0x1e
    35c2:	8d 8f       	std	Y+29, r24	; 0x1d
    35c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35c8:	01 97       	sbiw	r24, 0x01	; 1
    35ca:	f1 f7       	brne	.-4      	; 0x35c8 <LCD_invidSendCommand+0x25e>
    35cc:	9e 8f       	std	Y+30, r25	; 0x1e
    35ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Then send the lower command*/
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Command>>0)&1));
    35d0:	89 ad       	ldd	r24, Y+57	; 0x39
    35d2:	98 2f       	mov	r25, r24
    35d4:	91 70       	andi	r25, 0x01	; 1
    35d6:	81 e0       	ldi	r24, 0x01	; 1
    35d8:	64 e0       	ldi	r22, 0x04	; 4
    35da:	49 2f       	mov	r20, r25
    35dc:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Command>>1)&1));
    35e0:	89 ad       	ldd	r24, Y+57	; 0x39
    35e2:	86 95       	lsr	r24
    35e4:	98 2f       	mov	r25, r24
    35e6:	91 70       	andi	r25, 0x01	; 1
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	65 e0       	ldi	r22, 0x05	; 5
    35ec:	49 2f       	mov	r20, r25
    35ee:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Command>>2)&1));
    35f2:	89 ad       	ldd	r24, Y+57	; 0x39
    35f4:	86 95       	lsr	r24
    35f6:	86 95       	lsr	r24
    35f8:	98 2f       	mov	r25, r24
    35fa:	91 70       	andi	r25, 0x01	; 1
    35fc:	81 e0       	ldi	r24, 0x01	; 1
    35fe:	66 e0       	ldi	r22, 0x06	; 6
    3600:	49 2f       	mov	r20, r25
    3602:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Command>>3)&1));
    3606:	89 ad       	ldd	r24, Y+57	; 0x39
    3608:	86 95       	lsr	r24
    360a:	86 95       	lsr	r24
    360c:	86 95       	lsr	r24
    360e:	98 2f       	mov	r25, r24
    3610:	91 70       	andi	r25, 0x01	; 1
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	67 e0       	ldi	r22, 0x07	; 7
    3616:	49 2f       	mov	r20, r25
    3618:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	/*Latch the enable*/
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_HIGH);
    361c:	81 e0       	ldi	r24, 0x01	; 1
    361e:	62 e0       	ldi	r22, 0x02	; 2
    3620:	41 e0       	ldi	r20, 0x01	; 1
    3622:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    3626:	80 e0       	ldi	r24, 0x00	; 0
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	a0 e8       	ldi	r26, 0x80	; 128
    362c:	bf e3       	ldi	r27, 0x3F	; 63
    362e:	89 8f       	std	Y+25, r24	; 0x19
    3630:	9a 8f       	std	Y+26, r25	; 0x1a
    3632:	ab 8f       	std	Y+27, r26	; 0x1b
    3634:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3636:	69 8d       	ldd	r22, Y+25	; 0x19
    3638:	7a 8d       	ldd	r23, Y+26	; 0x1a
    363a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    363c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    363e:	20 e0       	ldi	r18, 0x00	; 0
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	4a e7       	ldi	r20, 0x7A	; 122
    3644:	53 e4       	ldi	r21, 0x43	; 67
    3646:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	8d 8b       	std	Y+21, r24	; 0x15
    3650:	9e 8b       	std	Y+22, r25	; 0x16
    3652:	af 8b       	std	Y+23, r26	; 0x17
    3654:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3656:	6d 89       	ldd	r22, Y+21	; 0x15
    3658:	7e 89       	ldd	r23, Y+22	; 0x16
    365a:	8f 89       	ldd	r24, Y+23	; 0x17
    365c:	98 8d       	ldd	r25, Y+24	; 0x18
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	40 e8       	ldi	r20, 0x80	; 128
    3664:	5f e3       	ldi	r21, 0x3F	; 63
    3666:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    366a:	88 23       	and	r24, r24
    366c:	2c f4       	brge	.+10     	; 0x3678 <LCD_invidSendCommand+0x30e>
		__ticks = 1;
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	9c 8b       	std	Y+20, r25	; 0x14
    3674:	8b 8b       	std	Y+19, r24	; 0x13
    3676:	3f c0       	rjmp	.+126    	; 0x36f6 <LCD_invidSendCommand+0x38c>
	else if (__tmp > 65535)
    3678:	6d 89       	ldd	r22, Y+21	; 0x15
    367a:	7e 89       	ldd	r23, Y+22	; 0x16
    367c:	8f 89       	ldd	r24, Y+23	; 0x17
    367e:	98 8d       	ldd	r25, Y+24	; 0x18
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	3f ef       	ldi	r19, 0xFF	; 255
    3684:	4f e7       	ldi	r20, 0x7F	; 127
    3686:	57 e4       	ldi	r21, 0x47	; 71
    3688:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    368c:	18 16       	cp	r1, r24
    368e:	4c f5       	brge	.+82     	; 0x36e2 <LCD_invidSendCommand+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3690:	69 8d       	ldd	r22, Y+25	; 0x19
    3692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e2       	ldi	r20, 0x20	; 32
    369e:	51 e4       	ldi	r21, 0x41	; 65
    36a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	bc 01       	movw	r22, r24
    36aa:	cd 01       	movw	r24, r26
    36ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	9c 8b       	std	Y+20, r25	; 0x14
    36b6:	8b 8b       	std	Y+19, r24	; 0x13
    36b8:	0f c0       	rjmp	.+30     	; 0x36d8 <LCD_invidSendCommand+0x36e>
    36ba:	89 e1       	ldi	r24, 0x19	; 25
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	9a 8b       	std	Y+18, r25	; 0x12
    36c0:	89 8b       	std	Y+17, r24	; 0x11
    36c2:	89 89       	ldd	r24, Y+17	; 0x11
    36c4:	9a 89       	ldd	r25, Y+18	; 0x12
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	f1 f7       	brne	.-4      	; 0x36c6 <LCD_invidSendCommand+0x35c>
    36ca:	9a 8b       	std	Y+18, r25	; 0x12
    36cc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ce:	8b 89       	ldd	r24, Y+19	; 0x13
    36d0:	9c 89       	ldd	r25, Y+20	; 0x14
    36d2:	01 97       	sbiw	r24, 0x01	; 1
    36d4:	9c 8b       	std	Y+20, r25	; 0x14
    36d6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36d8:	8b 89       	ldd	r24, Y+19	; 0x13
    36da:	9c 89       	ldd	r25, Y+20	; 0x14
    36dc:	00 97       	sbiw	r24, 0x00	; 0
    36de:	69 f7       	brne	.-38     	; 0x36ba <LCD_invidSendCommand+0x350>
    36e0:	14 c0       	rjmp	.+40     	; 0x370a <LCD_invidSendCommand+0x3a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36e2:	6d 89       	ldd	r22, Y+21	; 0x15
    36e4:	7e 89       	ldd	r23, Y+22	; 0x16
    36e6:	8f 89       	ldd	r24, Y+23	; 0x17
    36e8:	98 8d       	ldd	r25, Y+24	; 0x18
    36ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    36ee:	dc 01       	movw	r26, r24
    36f0:	cb 01       	movw	r24, r22
    36f2:	9c 8b       	std	Y+20, r25	; 0x14
    36f4:	8b 8b       	std	Y+19, r24	; 0x13
    36f6:	8b 89       	ldd	r24, Y+19	; 0x13
    36f8:	9c 89       	ldd	r25, Y+20	; 0x14
    36fa:	98 8b       	std	Y+16, r25	; 0x10
    36fc:	8f 87       	std	Y+15, r24	; 0x0f
    36fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3700:	98 89       	ldd	r25, Y+16	; 0x10
    3702:	01 97       	sbiw	r24, 0x01	; 1
    3704:	f1 f7       	brne	.-4      	; 0x3702 <LCD_invidSendCommand+0x398>
    3706:	98 8b       	std	Y+16, r25	; 0x10
    3708:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_LOW);
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	62 e0       	ldi	r22, 0x02	; 2
    370e:	40 e0       	ldi	r20, 0x00	; 0
    3710:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    3714:	80 e0       	ldi	r24, 0x00	; 0
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	a0 e8       	ldi	r26, 0x80	; 128
    371a:	bf e3       	ldi	r27, 0x3F	; 63
    371c:	8b 87       	std	Y+11, r24	; 0x0b
    371e:	9c 87       	std	Y+12, r25	; 0x0c
    3720:	ad 87       	std	Y+13, r26	; 0x0d
    3722:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3724:	6b 85       	ldd	r22, Y+11	; 0x0b
    3726:	7c 85       	ldd	r23, Y+12	; 0x0c
    3728:	8d 85       	ldd	r24, Y+13	; 0x0d
    372a:	9e 85       	ldd	r25, Y+14	; 0x0e
    372c:	20 e0       	ldi	r18, 0x00	; 0
    372e:	30 e0       	ldi	r19, 0x00	; 0
    3730:	4a e7       	ldi	r20, 0x7A	; 122
    3732:	53 e4       	ldi	r21, 0x43	; 67
    3734:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	8f 83       	std	Y+7, r24	; 0x07
    373e:	98 87       	std	Y+8, r25	; 0x08
    3740:	a9 87       	std	Y+9, r26	; 0x09
    3742:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3744:	6f 81       	ldd	r22, Y+7	; 0x07
    3746:	78 85       	ldd	r23, Y+8	; 0x08
    3748:	89 85       	ldd	r24, Y+9	; 0x09
    374a:	9a 85       	ldd	r25, Y+10	; 0x0a
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	40 e8       	ldi	r20, 0x80	; 128
    3752:	5f e3       	ldi	r21, 0x3F	; 63
    3754:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3758:	88 23       	and	r24, r24
    375a:	2c f4       	brge	.+10     	; 0x3766 <LCD_invidSendCommand+0x3fc>
		__ticks = 1;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	9e 83       	std	Y+6, r25	; 0x06
    3762:	8d 83       	std	Y+5, r24	; 0x05
    3764:	3f c0       	rjmp	.+126    	; 0x37e4 <LCD_invidSendCommand+0x47a>
	else if (__tmp > 65535)
    3766:	6f 81       	ldd	r22, Y+7	; 0x07
    3768:	78 85       	ldd	r23, Y+8	; 0x08
    376a:	89 85       	ldd	r24, Y+9	; 0x09
    376c:	9a 85       	ldd	r25, Y+10	; 0x0a
    376e:	20 e0       	ldi	r18, 0x00	; 0
    3770:	3f ef       	ldi	r19, 0xFF	; 255
    3772:	4f e7       	ldi	r20, 0x7F	; 127
    3774:	57 e4       	ldi	r21, 0x47	; 71
    3776:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    377a:	18 16       	cp	r1, r24
    377c:	4c f5       	brge	.+82     	; 0x37d0 <LCD_invidSendCommand+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3780:	7c 85       	ldd	r23, Y+12	; 0x0c
    3782:	8d 85       	ldd	r24, Y+13	; 0x0d
    3784:	9e 85       	ldd	r25, Y+14	; 0x0e
    3786:	20 e0       	ldi	r18, 0x00	; 0
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e2       	ldi	r20, 0x20	; 32
    378c:	51 e4       	ldi	r21, 0x41	; 65
    378e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	bc 01       	movw	r22, r24
    3798:	cd 01       	movw	r24, r26
    379a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	9e 83       	std	Y+6, r25	; 0x06
    37a4:	8d 83       	std	Y+5, r24	; 0x05
    37a6:	0f c0       	rjmp	.+30     	; 0x37c6 <LCD_invidSendCommand+0x45c>
    37a8:	89 e1       	ldi	r24, 0x19	; 25
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	9c 83       	std	Y+4, r25	; 0x04
    37ae:	8b 83       	std	Y+3, r24	; 0x03
    37b0:	8b 81       	ldd	r24, Y+3	; 0x03
    37b2:	9c 81       	ldd	r25, Y+4	; 0x04
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	f1 f7       	brne	.-4      	; 0x37b4 <LCD_invidSendCommand+0x44a>
    37b8:	9c 83       	std	Y+4, r25	; 0x04
    37ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37bc:	8d 81       	ldd	r24, Y+5	; 0x05
    37be:	9e 81       	ldd	r25, Y+6	; 0x06
    37c0:	01 97       	sbiw	r24, 0x01	; 1
    37c2:	9e 83       	std	Y+6, r25	; 0x06
    37c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c6:	8d 81       	ldd	r24, Y+5	; 0x05
    37c8:	9e 81       	ldd	r25, Y+6	; 0x06
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	69 f7       	brne	.-38     	; 0x37a8 <LCD_invidSendCommand+0x43e>
    37ce:	14 c0       	rjmp	.+40     	; 0x37f8 <LCD_invidSendCommand+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d0:	6f 81       	ldd	r22, Y+7	; 0x07
    37d2:	78 85       	ldd	r23, Y+8	; 0x08
    37d4:	89 85       	ldd	r24, Y+9	; 0x09
    37d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	9e 83       	std	Y+6, r25	; 0x06
    37e2:	8d 83       	std	Y+5, r24	; 0x05
    37e4:	8d 81       	ldd	r24, Y+5	; 0x05
    37e6:	9e 81       	ldd	r25, Y+6	; 0x06
    37e8:	9a 83       	std	Y+2, r25	; 0x02
    37ea:	89 83       	std	Y+1, r24	; 0x01
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	9a 81       	ldd	r25, Y+2	; 0x02
    37f0:	01 97       	sbiw	r24, 0x01	; 1
    37f2:	f1 f7       	brne	.-4      	; 0x37f0 <LCD_invidSendCommand+0x486>
    37f4:	9a 83       	std	Y+2, r25	; 0x02
    37f6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif

}
    37f8:	e9 96       	adiw	r28, 0x39	; 57
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <LCD_vidLatch>:

static inline void LCD_vidLatch(u8 Copy_u8Data)
{
    380a:	df 93       	push	r29
    380c:	cf 93       	push	r28
    380e:	cd b7       	in	r28, 0x3d	; 61
    3810:	de b7       	in	r29, 0x3e	; 62
    3812:	e9 97       	sbiw	r28, 0x39	; 57
    3814:	0f b6       	in	r0, 0x3f	; 63
    3816:	f8 94       	cli
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	0f be       	out	0x3f, r0	; 63
    381c:	cd bf       	out	0x3d, r28	; 61
    381e:	89 af       	std	Y+57, r24	; 0x39
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8PIN_LOW);
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	61 e0       	ldi	r22, 0x01	; 1
    3824:	40 e0       	ldi	r20, 0x00	; 0
    3826:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	/*At first Disable LCD*/
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_LOW);
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	62 e0       	ldi	r22, 0x02	; 2
    382e:	40 e0       	ldi	r20, 0x00	; 0
    3830:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_LOW);
	_delay_ms(1);

#elif LCD_MODE == FOUR_BIT
	/*Send the uper command*/
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data>>4)&1));
    3834:	89 ad       	ldd	r24, Y+57	; 0x39
    3836:	82 95       	swap	r24
    3838:	8f 70       	andi	r24, 0x0F	; 15
    383a:	98 2f       	mov	r25, r24
    383c:	91 70       	andi	r25, 0x01	; 1
    383e:	81 e0       	ldi	r24, 0x01	; 1
    3840:	64 e0       	ldi	r22, 0x04	; 4
    3842:	49 2f       	mov	r20, r25
    3844:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data>>5)&1));
    3848:	89 ad       	ldd	r24, Y+57	; 0x39
    384a:	82 95       	swap	r24
    384c:	86 95       	lsr	r24
    384e:	87 70       	andi	r24, 0x07	; 7
    3850:	98 2f       	mov	r25, r24
    3852:	91 70       	andi	r25, 0x01	; 1
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	65 e0       	ldi	r22, 0x05	; 5
    3858:	49 2f       	mov	r20, r25
    385a:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data>>6)&1));
    385e:	89 ad       	ldd	r24, Y+57	; 0x39
    3860:	82 95       	swap	r24
    3862:	86 95       	lsr	r24
    3864:	86 95       	lsr	r24
    3866:	83 70       	andi	r24, 0x03	; 3
    3868:	98 2f       	mov	r25, r24
    386a:	91 70       	andi	r25, 0x01	; 1
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	66 e0       	ldi	r22, 0x06	; 6
    3870:	49 2f       	mov	r20, r25
    3872:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Data>>7)&1));
    3876:	89 ad       	ldd	r24, Y+57	; 0x39
    3878:	98 2f       	mov	r25, r24
    387a:	99 1f       	adc	r25, r25
    387c:	99 27       	eor	r25, r25
    387e:	99 1f       	adc	r25, r25
    3880:	81 e0       	ldi	r24, 0x01	; 1
    3882:	67 e0       	ldi	r22, 0x07	; 7
    3884:	49 2f       	mov	r20, r25
    3886:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	/*Latch the enable*/
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_HIGH);
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	62 e0       	ldi	r22, 0x02	; 2
    388e:	41 e0       	ldi	r20, 0x01	; 1
    3890:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    3894:	80 e0       	ldi	r24, 0x00	; 0
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	a0 e8       	ldi	r26, 0x80	; 128
    389a:	bf e3       	ldi	r27, 0x3F	; 63
    389c:	8d ab       	std	Y+53, r24	; 0x35
    389e:	9e ab       	std	Y+54, r25	; 0x36
    38a0:	af ab       	std	Y+55, r26	; 0x37
    38a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a4:	6d a9       	ldd	r22, Y+53	; 0x35
    38a6:	7e a9       	ldd	r23, Y+54	; 0x36
    38a8:	8f a9       	ldd	r24, Y+55	; 0x37
    38aa:	98 ad       	ldd	r25, Y+56	; 0x38
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	4a e7       	ldi	r20, 0x7A	; 122
    38b2:	53 e4       	ldi	r21, 0x43	; 67
    38b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	89 ab       	std	Y+49, r24	; 0x31
    38be:	9a ab       	std	Y+50, r25	; 0x32
    38c0:	ab ab       	std	Y+51, r26	; 0x33
    38c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38c4:	69 a9       	ldd	r22, Y+49	; 0x31
    38c6:	7a a9       	ldd	r23, Y+50	; 0x32
    38c8:	8b a9       	ldd	r24, Y+51	; 0x33
    38ca:	9c a9       	ldd	r25, Y+52	; 0x34
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e8       	ldi	r20, 0x80	; 128
    38d2:	5f e3       	ldi	r21, 0x3F	; 63
    38d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    38d8:	88 23       	and	r24, r24
    38da:	2c f4       	brge	.+10     	; 0x38e6 <LCD_vidLatch+0xdc>
		__ticks = 1;
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	98 ab       	std	Y+48, r25	; 0x30
    38e2:	8f a7       	std	Y+47, r24	; 0x2f
    38e4:	3f c0       	rjmp	.+126    	; 0x3964 <LCD_vidLatch+0x15a>
	else if (__tmp > 65535)
    38e6:	69 a9       	ldd	r22, Y+49	; 0x31
    38e8:	7a a9       	ldd	r23, Y+50	; 0x32
    38ea:	8b a9       	ldd	r24, Y+51	; 0x33
    38ec:	9c a9       	ldd	r25, Y+52	; 0x34
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	3f ef       	ldi	r19, 0xFF	; 255
    38f2:	4f e7       	ldi	r20, 0x7F	; 127
    38f4:	57 e4       	ldi	r21, 0x47	; 71
    38f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    38fa:	18 16       	cp	r1, r24
    38fc:	4c f5       	brge	.+82     	; 0x3950 <LCD_vidLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fe:	6d a9       	ldd	r22, Y+53	; 0x35
    3900:	7e a9       	ldd	r23, Y+54	; 0x36
    3902:	8f a9       	ldd	r24, Y+55	; 0x37
    3904:	98 ad       	ldd	r25, Y+56	; 0x38
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e2       	ldi	r20, 0x20	; 32
    390c:	51 e4       	ldi	r21, 0x41	; 65
    390e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	bc 01       	movw	r22, r24
    3918:	cd 01       	movw	r24, r26
    391a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	98 ab       	std	Y+48, r25	; 0x30
    3924:	8f a7       	std	Y+47, r24	; 0x2f
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <LCD_vidLatch+0x13c>
    3928:	89 e1       	ldi	r24, 0x19	; 25
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	9e a7       	std	Y+46, r25	; 0x2e
    392e:	8d a7       	std	Y+45, r24	; 0x2d
    3930:	8d a5       	ldd	r24, Y+45	; 0x2d
    3932:	9e a5       	ldd	r25, Y+46	; 0x2e
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCD_vidLatch+0x12a>
    3938:	9e a7       	std	Y+46, r25	; 0x2e
    393a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393c:	8f a5       	ldd	r24, Y+47	; 0x2f
    393e:	98 a9       	ldd	r25, Y+48	; 0x30
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	98 ab       	std	Y+48, r25	; 0x30
    3944:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3946:	8f a5       	ldd	r24, Y+47	; 0x2f
    3948:	98 a9       	ldd	r25, Y+48	; 0x30
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	69 f7       	brne	.-38     	; 0x3928 <LCD_vidLatch+0x11e>
    394e:	14 c0       	rjmp	.+40     	; 0x3978 <LCD_vidLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3950:	69 a9       	ldd	r22, Y+49	; 0x31
    3952:	7a a9       	ldd	r23, Y+50	; 0x32
    3954:	8b a9       	ldd	r24, Y+51	; 0x33
    3956:	9c a9       	ldd	r25, Y+52	; 0x34
    3958:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	98 ab       	std	Y+48, r25	; 0x30
    3962:	8f a7       	std	Y+47, r24	; 0x2f
    3964:	8f a5       	ldd	r24, Y+47	; 0x2f
    3966:	98 a9       	ldd	r25, Y+48	; 0x30
    3968:	9c a7       	std	Y+44, r25	; 0x2c
    396a:	8b a7       	std	Y+43, r24	; 0x2b
    396c:	8b a5       	ldd	r24, Y+43	; 0x2b
    396e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <LCD_vidLatch+0x166>
    3974:	9c a7       	std	Y+44, r25	; 0x2c
    3976:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_LOW);
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	62 e0       	ldi	r22, 0x02	; 2
    397c:	40 e0       	ldi	r20, 0x00	; 0
    397e:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	a0 e8       	ldi	r26, 0x80	; 128
    3988:	bf e3       	ldi	r27, 0x3F	; 63
    398a:	8f a3       	std	Y+39, r24	; 0x27
    398c:	98 a7       	std	Y+40, r25	; 0x28
    398e:	a9 a7       	std	Y+41, r26	; 0x29
    3990:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3992:	6f a1       	ldd	r22, Y+39	; 0x27
    3994:	78 a5       	ldd	r23, Y+40	; 0x28
    3996:	89 a5       	ldd	r24, Y+41	; 0x29
    3998:	9a a5       	ldd	r25, Y+42	; 0x2a
    399a:	20 e0       	ldi	r18, 0x00	; 0
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	4a e7       	ldi	r20, 0x7A	; 122
    39a0:	53 e4       	ldi	r21, 0x43	; 67
    39a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    39a6:	dc 01       	movw	r26, r24
    39a8:	cb 01       	movw	r24, r22
    39aa:	8b a3       	std	Y+35, r24	; 0x23
    39ac:	9c a3       	std	Y+36, r25	; 0x24
    39ae:	ad a3       	std	Y+37, r26	; 0x25
    39b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39b2:	6b a1       	ldd	r22, Y+35	; 0x23
    39b4:	7c a1       	ldd	r23, Y+36	; 0x24
    39b6:	8d a1       	ldd	r24, Y+37	; 0x25
    39b8:	9e a1       	ldd	r25, Y+38	; 0x26
    39ba:	20 e0       	ldi	r18, 0x00	; 0
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	40 e8       	ldi	r20, 0x80	; 128
    39c0:	5f e3       	ldi	r21, 0x3F	; 63
    39c2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    39c6:	88 23       	and	r24, r24
    39c8:	2c f4       	brge	.+10     	; 0x39d4 <LCD_vidLatch+0x1ca>
		__ticks = 1;
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	9a a3       	std	Y+34, r25	; 0x22
    39d0:	89 a3       	std	Y+33, r24	; 0x21
    39d2:	3f c0       	rjmp	.+126    	; 0x3a52 <LCD_vidLatch+0x248>
	else if (__tmp > 65535)
    39d4:	6b a1       	ldd	r22, Y+35	; 0x23
    39d6:	7c a1       	ldd	r23, Y+36	; 0x24
    39d8:	8d a1       	ldd	r24, Y+37	; 0x25
    39da:	9e a1       	ldd	r25, Y+38	; 0x26
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	3f ef       	ldi	r19, 0xFF	; 255
    39e0:	4f e7       	ldi	r20, 0x7F	; 127
    39e2:	57 e4       	ldi	r21, 0x47	; 71
    39e4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    39e8:	18 16       	cp	r1, r24
    39ea:	4c f5       	brge	.+82     	; 0x3a3e <LCD_vidLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ec:	6f a1       	ldd	r22, Y+39	; 0x27
    39ee:	78 a5       	ldd	r23, Y+40	; 0x28
    39f0:	89 a5       	ldd	r24, Y+41	; 0x29
    39f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	30 e0       	ldi	r19, 0x00	; 0
    39f8:	40 e2       	ldi	r20, 0x20	; 32
    39fa:	51 e4       	ldi	r21, 0x41	; 65
    39fc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	bc 01       	movw	r22, r24
    3a06:	cd 01       	movw	r24, r26
    3a08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	9a a3       	std	Y+34, r25	; 0x22
    3a12:	89 a3       	std	Y+33, r24	; 0x21
    3a14:	0f c0       	rjmp	.+30     	; 0x3a34 <LCD_vidLatch+0x22a>
    3a16:	89 e1       	ldi	r24, 0x19	; 25
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	98 a3       	std	Y+32, r25	; 0x20
    3a1c:	8f 8f       	std	Y+31, r24	; 0x1f
    3a1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a20:	98 a1       	ldd	r25, Y+32	; 0x20
    3a22:	01 97       	sbiw	r24, 0x01	; 1
    3a24:	f1 f7       	brne	.-4      	; 0x3a22 <LCD_vidLatch+0x218>
    3a26:	98 a3       	std	Y+32, r25	; 0x20
    3a28:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a2a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a2c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a2e:	01 97       	sbiw	r24, 0x01	; 1
    3a30:	9a a3       	std	Y+34, r25	; 0x22
    3a32:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a34:	89 a1       	ldd	r24, Y+33	; 0x21
    3a36:	9a a1       	ldd	r25, Y+34	; 0x22
    3a38:	00 97       	sbiw	r24, 0x00	; 0
    3a3a:	69 f7       	brne	.-38     	; 0x3a16 <LCD_vidLatch+0x20c>
    3a3c:	14 c0       	rjmp	.+40     	; 0x3a66 <LCD_vidLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a3e:	6b a1       	ldd	r22, Y+35	; 0x23
    3a40:	7c a1       	ldd	r23, Y+36	; 0x24
    3a42:	8d a1       	ldd	r24, Y+37	; 0x25
    3a44:	9e a1       	ldd	r25, Y+38	; 0x26
    3a46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	cb 01       	movw	r24, r22
    3a4e:	9a a3       	std	Y+34, r25	; 0x22
    3a50:	89 a3       	std	Y+33, r24	; 0x21
    3a52:	89 a1       	ldd	r24, Y+33	; 0x21
    3a54:	9a a1       	ldd	r25, Y+34	; 0x22
    3a56:	9e 8f       	std	Y+30, r25	; 0x1e
    3a58:	8d 8f       	std	Y+29, r24	; 0x1d
    3a5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a5c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	f1 f7       	brne	.-4      	; 0x3a5e <LCD_vidLatch+0x254>
    3a62:	9e 8f       	std	Y+30, r25	; 0x1e
    3a64:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*Then send the lower command*/
	DIO_enuSetPinValue(D4_PORT, D4_PIN, ((Copy_u8Data>>0)&1));
    3a66:	89 ad       	ldd	r24, Y+57	; 0x39
    3a68:	98 2f       	mov	r25, r24
    3a6a:	91 70       	andi	r25, 0x01	; 1
    3a6c:	81 e0       	ldi	r24, 0x01	; 1
    3a6e:	64 e0       	ldi	r22, 0x04	; 4
    3a70:	49 2f       	mov	r20, r25
    3a72:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT, D5_PIN, ((Copy_u8Data>>1)&1));
    3a76:	89 ad       	ldd	r24, Y+57	; 0x39
    3a78:	86 95       	lsr	r24
    3a7a:	98 2f       	mov	r25, r24
    3a7c:	91 70       	andi	r25, 0x01	; 1
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	65 e0       	ldi	r22, 0x05	; 5
    3a82:	49 2f       	mov	r20, r25
    3a84:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT, D6_PIN, ((Copy_u8Data>>2)&1));
    3a88:	89 ad       	ldd	r24, Y+57	; 0x39
    3a8a:	86 95       	lsr	r24
    3a8c:	86 95       	lsr	r24
    3a8e:	98 2f       	mov	r25, r24
    3a90:	91 70       	andi	r25, 0x01	; 1
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	66 e0       	ldi	r22, 0x06	; 6
    3a96:	49 2f       	mov	r20, r25
    3a98:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D7_PORT, D7_PIN, ((Copy_u8Data>>3)&1));
    3a9c:	89 ad       	ldd	r24, Y+57	; 0x39
    3a9e:	86 95       	lsr	r24
    3aa0:	86 95       	lsr	r24
    3aa2:	86 95       	lsr	r24
    3aa4:	98 2f       	mov	r25, r24
    3aa6:	91 70       	andi	r25, 0x01	; 1
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	67 e0       	ldi	r22, 0x07	; 7
    3aac:	49 2f       	mov	r20, r25
    3aae:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	/*Latch the enable*/
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_HIGH);
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	62 e0       	ldi	r22, 0x02	; 2
    3ab6:	41 e0       	ldi	r20, 0x01	; 1
    3ab8:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	a0 e8       	ldi	r26, 0x80	; 128
    3ac2:	bf e3       	ldi	r27, 0x3F	; 63
    3ac4:	89 8f       	std	Y+25, r24	; 0x19
    3ac6:	9a 8f       	std	Y+26, r25	; 0x1a
    3ac8:	ab 8f       	std	Y+27, r26	; 0x1b
    3aca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3acc:	69 8d       	ldd	r22, Y+25	; 0x19
    3ace:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ad0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ad4:	20 e0       	ldi	r18, 0x00	; 0
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	4a e7       	ldi	r20, 0x7A	; 122
    3ada:	53 e4       	ldi	r21, 0x43	; 67
    3adc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3ae0:	dc 01       	movw	r26, r24
    3ae2:	cb 01       	movw	r24, r22
    3ae4:	8d 8b       	std	Y+21, r24	; 0x15
    3ae6:	9e 8b       	std	Y+22, r25	; 0x16
    3ae8:	af 8b       	std	Y+23, r26	; 0x17
    3aea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3aec:	6d 89       	ldd	r22, Y+21	; 0x15
    3aee:	7e 89       	ldd	r23, Y+22	; 0x16
    3af0:	8f 89       	ldd	r24, Y+23	; 0x17
    3af2:	98 8d       	ldd	r25, Y+24	; 0x18
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	40 e8       	ldi	r20, 0x80	; 128
    3afa:	5f e3       	ldi	r21, 0x3F	; 63
    3afc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3b00:	88 23       	and	r24, r24
    3b02:	2c f4       	brge	.+10     	; 0x3b0e <LCD_vidLatch+0x304>
		__ticks = 1;
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	9c 8b       	std	Y+20, r25	; 0x14
    3b0a:	8b 8b       	std	Y+19, r24	; 0x13
    3b0c:	3f c0       	rjmp	.+126    	; 0x3b8c <LCD_vidLatch+0x382>
	else if (__tmp > 65535)
    3b0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3b10:	7e 89       	ldd	r23, Y+22	; 0x16
    3b12:	8f 89       	ldd	r24, Y+23	; 0x17
    3b14:	98 8d       	ldd	r25, Y+24	; 0x18
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	3f ef       	ldi	r19, 0xFF	; 255
    3b1a:	4f e7       	ldi	r20, 0x7F	; 127
    3b1c:	57 e4       	ldi	r21, 0x47	; 71
    3b1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3b22:	18 16       	cp	r1, r24
    3b24:	4c f5       	brge	.+82     	; 0x3b78 <LCD_vidLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b26:	69 8d       	ldd	r22, Y+25	; 0x19
    3b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	40 e2       	ldi	r20, 0x20	; 32
    3b34:	51 e4       	ldi	r21, 0x41	; 65
    3b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	bc 01       	movw	r22, r24
    3b40:	cd 01       	movw	r24, r26
    3b42:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b46:	dc 01       	movw	r26, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	9c 8b       	std	Y+20, r25	; 0x14
    3b4c:	8b 8b       	std	Y+19, r24	; 0x13
    3b4e:	0f c0       	rjmp	.+30     	; 0x3b6e <LCD_vidLatch+0x364>
    3b50:	89 e1       	ldi	r24, 0x19	; 25
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	9a 8b       	std	Y+18, r25	; 0x12
    3b56:	89 8b       	std	Y+17, r24	; 0x11
    3b58:	89 89       	ldd	r24, Y+17	; 0x11
    3b5a:	9a 89       	ldd	r25, Y+18	; 0x12
    3b5c:	01 97       	sbiw	r24, 0x01	; 1
    3b5e:	f1 f7       	brne	.-4      	; 0x3b5c <LCD_vidLatch+0x352>
    3b60:	9a 8b       	std	Y+18, r25	; 0x12
    3b62:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b64:	8b 89       	ldd	r24, Y+19	; 0x13
    3b66:	9c 89       	ldd	r25, Y+20	; 0x14
    3b68:	01 97       	sbiw	r24, 0x01	; 1
    3b6a:	9c 8b       	std	Y+20, r25	; 0x14
    3b6c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b70:	9c 89       	ldd	r25, Y+20	; 0x14
    3b72:	00 97       	sbiw	r24, 0x00	; 0
    3b74:	69 f7       	brne	.-38     	; 0x3b50 <LCD_vidLatch+0x346>
    3b76:	14 c0       	rjmp	.+40     	; 0x3ba0 <LCD_vidLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b78:	6d 89       	ldd	r22, Y+21	; 0x15
    3b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    3b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    3b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    3b80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3b84:	dc 01       	movw	r26, r24
    3b86:	cb 01       	movw	r24, r22
    3b88:	9c 8b       	std	Y+20, r25	; 0x14
    3b8a:	8b 8b       	std	Y+19, r24	; 0x13
    3b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3b90:	98 8b       	std	Y+16, r25	; 0x10
    3b92:	8f 87       	std	Y+15, r24	; 0x0f
    3b94:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b96:	98 89       	ldd	r25, Y+16	; 0x10
    3b98:	01 97       	sbiw	r24, 0x01	; 1
    3b9a:	f1 f7       	brne	.-4      	; 0x3b98 <LCD_vidLatch+0x38e>
    3b9c:	98 8b       	std	Y+16, r25	; 0x10
    3b9e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8PIN_LOW);
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	62 e0       	ldi	r22, 0x02	; 2
    3ba4:	40 e0       	ldi	r20, 0x00	; 0
    3ba6:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	a0 e8       	ldi	r26, 0x80	; 128
    3bb0:	bf e3       	ldi	r27, 0x3F	; 63
    3bb2:	8b 87       	std	Y+11, r24	; 0x0b
    3bb4:	9c 87       	std	Y+12, r25	; 0x0c
    3bb6:	ad 87       	std	Y+13, r26	; 0x0d
    3bb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc2:	20 e0       	ldi	r18, 0x00	; 0
    3bc4:	30 e0       	ldi	r19, 0x00	; 0
    3bc6:	4a e7       	ldi	r20, 0x7A	; 122
    3bc8:	53 e4       	ldi	r21, 0x43	; 67
    3bca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3bce:	dc 01       	movw	r26, r24
    3bd0:	cb 01       	movw	r24, r22
    3bd2:	8f 83       	std	Y+7, r24	; 0x07
    3bd4:	98 87       	std	Y+8, r25	; 0x08
    3bd6:	a9 87       	std	Y+9, r26	; 0x09
    3bd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bda:	6f 81       	ldd	r22, Y+7	; 0x07
    3bdc:	78 85       	ldd	r23, Y+8	; 0x08
    3bde:	89 85       	ldd	r24, Y+9	; 0x09
    3be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be2:	20 e0       	ldi	r18, 0x00	; 0
    3be4:	30 e0       	ldi	r19, 0x00	; 0
    3be6:	40 e8       	ldi	r20, 0x80	; 128
    3be8:	5f e3       	ldi	r21, 0x3F	; 63
    3bea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    3bee:	88 23       	and	r24, r24
    3bf0:	2c f4       	brge	.+10     	; 0x3bfc <LCD_vidLatch+0x3f2>
		__ticks = 1;
    3bf2:	81 e0       	ldi	r24, 0x01	; 1
    3bf4:	90 e0       	ldi	r25, 0x00	; 0
    3bf6:	9e 83       	std	Y+6, r25	; 0x06
    3bf8:	8d 83       	std	Y+5, r24	; 0x05
    3bfa:	3f c0       	rjmp	.+126    	; 0x3c7a <LCD_vidLatch+0x470>
	else if (__tmp > 65535)
    3bfc:	6f 81       	ldd	r22, Y+7	; 0x07
    3bfe:	78 85       	ldd	r23, Y+8	; 0x08
    3c00:	89 85       	ldd	r24, Y+9	; 0x09
    3c02:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	3f ef       	ldi	r19, 0xFF	; 255
    3c08:	4f e7       	ldi	r20, 0x7F	; 127
    3c0a:	57 e4       	ldi	r21, 0x47	; 71
    3c0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    3c10:	18 16       	cp	r1, r24
    3c12:	4c f5       	brge	.+82     	; 0x3c66 <LCD_vidLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c14:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c16:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c18:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c1c:	20 e0       	ldi	r18, 0x00	; 0
    3c1e:	30 e0       	ldi	r19, 0x00	; 0
    3c20:	40 e2       	ldi	r20, 0x20	; 32
    3c22:	51 e4       	ldi	r21, 0x41	; 65
    3c24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3c28:	dc 01       	movw	r26, r24
    3c2a:	cb 01       	movw	r24, r22
    3c2c:	bc 01       	movw	r22, r24
    3c2e:	cd 01       	movw	r24, r26
    3c30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c34:	dc 01       	movw	r26, r24
    3c36:	cb 01       	movw	r24, r22
    3c38:	9e 83       	std	Y+6, r25	; 0x06
    3c3a:	8d 83       	std	Y+5, r24	; 0x05
    3c3c:	0f c0       	rjmp	.+30     	; 0x3c5c <LCD_vidLatch+0x452>
    3c3e:	89 e1       	ldi	r24, 0x19	; 25
    3c40:	90 e0       	ldi	r25, 0x00	; 0
    3c42:	9c 83       	std	Y+4, r25	; 0x04
    3c44:	8b 83       	std	Y+3, r24	; 0x03
    3c46:	8b 81       	ldd	r24, Y+3	; 0x03
    3c48:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4a:	01 97       	sbiw	r24, 0x01	; 1
    3c4c:	f1 f7       	brne	.-4      	; 0x3c4a <LCD_vidLatch+0x440>
    3c4e:	9c 83       	std	Y+4, r25	; 0x04
    3c50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c52:	8d 81       	ldd	r24, Y+5	; 0x05
    3c54:	9e 81       	ldd	r25, Y+6	; 0x06
    3c56:	01 97       	sbiw	r24, 0x01	; 1
    3c58:	9e 83       	std	Y+6, r25	; 0x06
    3c5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c60:	00 97       	sbiw	r24, 0x00	; 0
    3c62:	69 f7       	brne	.-38     	; 0x3c3e <LCD_vidLatch+0x434>
    3c64:	14 c0       	rjmp	.+40     	; 0x3c8e <LCD_vidLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c66:	6f 81       	ldd	r22, Y+7	; 0x07
    3c68:	78 85       	ldd	r23, Y+8	; 0x08
    3c6a:	89 85       	ldd	r24, Y+9	; 0x09
    3c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	9e 83       	std	Y+6, r25	; 0x06
    3c78:	8d 83       	std	Y+5, r24	; 0x05
    3c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c7e:	9a 83       	std	Y+2, r25	; 0x02
    3c80:	89 83       	std	Y+1, r24	; 0x01
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	9a 81       	ldd	r25, Y+2	; 0x02
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	f1 f7       	brne	.-4      	; 0x3c86 <LCD_vidLatch+0x47c>
    3c8a:	9a 83       	std	Y+2, r25	; 0x02
    3c8c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif

}
    3c8e:	e9 96       	adiw	r28, 0x39	; 57
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	cf 91       	pop	r28
    3c9c:	df 91       	pop	r29
    3c9e:	08 95       	ret

00003ca0 <LCD_enuDisplayString>:



ES_t LCD_enuDisplayString(const char* Copy_pu8String)
{
    3ca0:	df 93       	push	r29
    3ca2:	cf 93       	push	r28
    3ca4:	00 d0       	rcall	.+0      	; 0x3ca6 <LCD_enuDisplayString+0x6>
    3ca6:	00 d0       	rcall	.+0      	; 0x3ca8 <LCD_enuDisplayString+0x8>
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    3cac:	9c 83       	std	Y+4, r25	; 0x04
    3cae:	8b 83       	std	Y+3, r24	; 0x03
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_pu8String != NULL)
    3cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb8:	00 97       	sbiw	r24, 0x00	; 0
    3cba:	e9 f0       	breq	.+58     	; 0x3cf6 <LCD_enuDisplayString+0x56>
	{
		u8 Local_u8Index = 0;
    3cbc:	19 82       	std	Y+1, r1	; 0x01
    3cbe:	0f c0       	rjmp	.+30     	; 0x3cde <LCD_enuDisplayString+0x3e>
		while(Copy_pu8String[Local_u8Index]!='\0')
		{
			Local_enuErrorState = LCD_enuDisplayChar(Copy_pu8String[Local_u8Index]);
    3cc0:	89 81       	ldd	r24, Y+1	; 0x01
    3cc2:	28 2f       	mov	r18, r24
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cca:	fc 01       	movw	r30, r24
    3ccc:	e2 0f       	add	r30, r18
    3cce:	f3 1f       	adc	r31, r19
    3cd0:	80 81       	ld	r24, Z
    3cd2:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayChar>
    3cd6:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8Index++;
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	8f 5f       	subi	r24, 0xFF	; 255
    3cdc:	89 83       	std	Y+1, r24	; 0x01
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
	if(Copy_pu8String != NULL)
	{
		u8 Local_u8Index = 0;
		while(Copy_pu8String[Local_u8Index]!='\0')
    3cde:	89 81       	ldd	r24, Y+1	; 0x01
    3ce0:	28 2f       	mov	r18, r24
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ce6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ce8:	fc 01       	movw	r30, r24
    3cea:	e2 0f       	add	r30, r18
    3cec:	f3 1f       	adc	r31, r19
    3cee:	80 81       	ld	r24, Z
    3cf0:	88 23       	and	r24, r24
    3cf2:	31 f7       	brne	.-52     	; 0x3cc0 <LCD_enuDisplayString+0x20>
    3cf4:	02 c0       	rjmp	.+4      	; 0x3cfa <LCD_enuDisplayString+0x5a>
			Local_u8Index++;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    3cf6:	82 e0       	ldi	r24, 0x02	; 2
    3cf8:	8a 83       	std	Y+2, r24	; 0x02
	}


	/*Then return error state variable*/
	return Local_enuErrorState;
    3cfa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3cfc:	0f 90       	pop	r0
    3cfe:	0f 90       	pop	r0
    3d00:	0f 90       	pop	r0
    3d02:	0f 90       	pop	r0
    3d04:	cf 91       	pop	r28
    3d06:	df 91       	pop	r29
    3d08:	08 95       	ret

00003d0a <LCD_enuGoToRowCol>:

ES_t LCD_enuGoToRowCol(u8 Copy_u8Row , u8 Copy_u8Col)
{
    3d0a:	df 93       	push	r29
    3d0c:	cf 93       	push	r28
    3d0e:	00 d0       	rcall	.+0      	; 0x3d10 <LCD_enuGoToRowCol+0x6>
    3d10:	00 d0       	rcall	.+0      	; 0x3d12 <LCD_enuGoToRowCol+0x8>
    3d12:	00 d0       	rcall	.+0      	; 0x3d14 <LCD_enuGoToRowCol+0xa>
    3d14:	cd b7       	in	r28, 0x3d	; 61
    3d16:	de b7       	in	r29, 0x3e	; 62
    3d18:	8b 83       	std	Y+3, r24	; 0x03
    3d1a:	6c 83       	std	Y+4, r22	; 0x04
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	8a 83       	std	Y+2, r24	; 0x02

		u8 Local_u8ADDRAM_Address;

		switch(Copy_u8Row)
    3d20:	8b 81       	ldd	r24, Y+3	; 0x03
    3d22:	28 2f       	mov	r18, r24
    3d24:	30 e0       	ldi	r19, 0x00	; 0
    3d26:	3e 83       	std	Y+6, r19	; 0x06
    3d28:	2d 83       	std	Y+5, r18	; 0x05
    3d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d2e:	81 30       	cpi	r24, 0x01	; 1
    3d30:	91 05       	cpc	r25, r1
    3d32:	c1 f0       	breq	.+48     	; 0x3d64 <LCD_enuGoToRowCol+0x5a>
    3d34:	2d 81       	ldd	r18, Y+5	; 0x05
    3d36:	3e 81       	ldd	r19, Y+6	; 0x06
    3d38:	22 30       	cpi	r18, 0x02	; 2
    3d3a:	31 05       	cpc	r19, r1
    3d3c:	2c f4       	brge	.+10     	; 0x3d48 <LCD_enuGoToRowCol+0x3e>
    3d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d40:	9e 81       	ldd	r25, Y+6	; 0x06
    3d42:	00 97       	sbiw	r24, 0x00	; 0
    3d44:	61 f0       	breq	.+24     	; 0x3d5e <LCD_enuGoToRowCol+0x54>
    3d46:	19 c0       	rjmp	.+50     	; 0x3d7a <LCD_enuGoToRowCol+0x70>
    3d48:	2d 81       	ldd	r18, Y+5	; 0x05
    3d4a:	3e 81       	ldd	r19, Y+6	; 0x06
    3d4c:	22 30       	cpi	r18, 0x02	; 2
    3d4e:	31 05       	cpc	r19, r1
    3d50:	69 f0       	breq	.+26     	; 0x3d6c <LCD_enuGoToRowCol+0x62>
    3d52:	8d 81       	ldd	r24, Y+5	; 0x05
    3d54:	9e 81       	ldd	r25, Y+6	; 0x06
    3d56:	83 30       	cpi	r24, 0x03	; 3
    3d58:	91 05       	cpc	r25, r1
    3d5a:	61 f0       	breq	.+24     	; 0x3d74 <LCD_enuGoToRowCol+0x6a>
    3d5c:	0e c0       	rjmp	.+28     	; 0x3d7a <LCD_enuGoToRowCol+0x70>
		{
		case 0: Local_u8ADDRAM_Address = Copy_u8Col;           break;
    3d5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d60:	89 83       	std	Y+1, r24	; 0x01
    3d62:	0b c0       	rjmp	.+22     	; 0x3d7a <LCD_enuGoToRowCol+0x70>
		case 1: Local_u8ADDRAM_Address = (Copy_u8Col+(0x40));      break;
    3d64:	8c 81       	ldd	r24, Y+4	; 0x04
    3d66:	80 5c       	subi	r24, 0xC0	; 192
    3d68:	89 83       	std	Y+1, r24	; 0x01
    3d6a:	07 c0       	rjmp	.+14     	; 0x3d7a <LCD_enuGoToRowCol+0x70>
		case 2: Local_u8ADDRAM_Address = (Copy_u8Col+0x10);      break;
    3d6c:	8c 81       	ldd	r24, Y+4	; 0x04
    3d6e:	80 5f       	subi	r24, 0xF0	; 240
    3d70:	89 83       	std	Y+1, r24	; 0x01
    3d72:	03 c0       	rjmp	.+6      	; 0x3d7a <LCD_enuGoToRowCol+0x70>
		case 3: Local_u8ADDRAM_Address = (Copy_u8Col+0x50);      break;
    3d74:	8c 81       	ldd	r24, Y+4	; 0x04
    3d76:	80 5b       	subi	r24, 0xB0	; 176
    3d78:	89 83       	std	Y+1, r24	; 0x01
		}

		LCD_invidSendCommand(Local_u8ADDRAM_Address|LCD_SET_CURSOR_LOCATION);
    3d7a:	89 81       	ldd	r24, Y+1	; 0x01
    3d7c:	80 68       	ori	r24, 0x80	; 128
    3d7e:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_invidSendCommand>
		Local_enuErrorState = ES_OK;
    3d82:	1a 82       	std	Y+2, r1	; 0x02



	/*Then return error state variable*/
	return Local_enuErrorState;
    3d84:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3d86:	26 96       	adiw	r28, 0x06	; 6
    3d88:	0f b6       	in	r0, 0x3f	; 63
    3d8a:	f8 94       	cli
    3d8c:	de bf       	out	0x3e, r29	; 62
    3d8e:	0f be       	out	0x3f, r0	; 63
    3d90:	cd bf       	out	0x3d, r28	; 61
    3d92:	cf 91       	pop	r28
    3d94:	df 91       	pop	r29
    3d96:	08 95       	ret

00003d98 <LCD_enuDisplayNumber>:

ES_t LCD_enuDisplayNumber(s16 Copy_s16Number)
{
    3d98:	df 93       	push	r29
    3d9a:	cf 93       	push	r28
    3d9c:	00 d0       	rcall	.+0      	; 0x3d9e <LCD_enuDisplayNumber+0x6>
    3d9e:	00 d0       	rcall	.+0      	; 0x3da0 <LCD_enuDisplayNumber+0x8>
    3da0:	0f 92       	push	r0
    3da2:	cd b7       	in	r28, 0x3d	; 61
    3da4:	de b7       	in	r29, 0x3e	; 62
    3da6:	9d 83       	std	Y+5, r25	; 0x05
    3da8:	8c 83       	std	Y+4, r24	; 0x04
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	8b 83       	std	Y+3, r24	; 0x03

	if(Copy_s16Number == 0)
    3dae:	8c 81       	ldd	r24, Y+4	; 0x04
    3db0:	9d 81       	ldd	r25, Y+5	; 0x05
    3db2:	00 97       	sbiw	r24, 0x00	; 0
    3db4:	21 f4       	brne	.+8      	; 0x3dbe <LCD_enuDisplayNumber+0x26>
	{
		LCD_enuDisplayChar('0');
    3db6:	80 e3       	ldi	r24, 0x30	; 48
    3db8:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayChar>
    3dbc:	50 c0       	rjmp	.+160    	; 0x3e5e <LCD_enuDisplayNumber+0xc6>
	}
	else
	{
		if(Copy_s16Number<0)
    3dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc2:	99 23       	and	r25, r25
    3dc4:	54 f4       	brge	.+20     	; 0x3dda <LCD_enuDisplayNumber+0x42>
		{
			Copy_s16Number*=-1;
    3dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc8:	9d 81       	ldd	r25, Y+5	; 0x05
    3dca:	90 95       	com	r25
    3dcc:	81 95       	neg	r24
    3dce:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd0:	9d 83       	std	Y+5, r25	; 0x05
    3dd2:	8c 83       	std	Y+4, r24	; 0x04
			LCD_enuDisplayChar('-');
    3dd4:	8d e2       	ldi	r24, 0x2D	; 45
    3dd6:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayChar>

		}

		s16 temp = 0;
    3dda:	1a 82       	std	Y+2, r1	; 0x02
    3ddc:	19 82       	std	Y+1, r1	; 0x01
    3dde:	22 c0       	rjmp	.+68     	; 0x3e24 <LCD_enuDisplayNumber+0x8c>
		while(Copy_s16Number!=0)
		{
			// number = 53613

			temp = Copy_s16Number%10 + temp*10 ;
    3de0:	8c 81       	ldd	r24, Y+4	; 0x04
    3de2:	9d 81       	ldd	r25, Y+5	; 0x05
    3de4:	2a e0       	ldi	r18, 0x0A	; 10
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	b9 01       	movw	r22, r18
    3dea:	0e 94 ab 20 	call	0x4156	; 0x4156 <__divmodhi4>
    3dee:	ac 01       	movw	r20, r24
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	9a 81       	ldd	r25, Y+2	; 0x02
    3df4:	9c 01       	movw	r18, r24
    3df6:	22 0f       	add	r18, r18
    3df8:	33 1f       	adc	r19, r19
    3dfa:	c9 01       	movw	r24, r18
    3dfc:	88 0f       	add	r24, r24
    3dfe:	99 1f       	adc	r25, r25
    3e00:	88 0f       	add	r24, r24
    3e02:	99 1f       	adc	r25, r25
    3e04:	82 0f       	add	r24, r18
    3e06:	93 1f       	adc	r25, r19
    3e08:	84 0f       	add	r24, r20
    3e0a:	95 1f       	adc	r25, r21
    3e0c:	9a 83       	std	Y+2, r25	; 0x02
    3e0e:	89 83       	std	Y+1, r24	; 0x01
			Copy_s16Number/=10;
    3e10:	8c 81       	ldd	r24, Y+4	; 0x04
    3e12:	9d 81       	ldd	r25, Y+5	; 0x05
    3e14:	2a e0       	ldi	r18, 0x0A	; 10
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	b9 01       	movw	r22, r18
    3e1a:	0e 94 ab 20 	call	0x4156	; 0x4156 <__divmodhi4>
    3e1e:	cb 01       	movw	r24, r22
    3e20:	9d 83       	std	Y+5, r25	; 0x05
    3e22:	8c 83       	std	Y+4, r24	; 0x04
			LCD_enuDisplayChar('-');

		}

		s16 temp = 0;
		while(Copy_s16Number!=0)
    3e24:	8c 81       	ldd	r24, Y+4	; 0x04
    3e26:	9d 81       	ldd	r25, Y+5	; 0x05
    3e28:	00 97       	sbiw	r24, 0x00	; 0
    3e2a:	d1 f6       	brne	.-76     	; 0x3de0 <LCD_enuDisplayNumber+0x48>
    3e2c:	14 c0       	rjmp	.+40     	; 0x3e56 <LCD_enuDisplayNumber+0xbe>

		}

		while(temp!=0)
		{
			LCD_enuDisplayChar((temp%10)+'0');
    3e2e:	89 81       	ldd	r24, Y+1	; 0x01
    3e30:	9a 81       	ldd	r25, Y+2	; 0x02
    3e32:	2a e0       	ldi	r18, 0x0A	; 10
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	b9 01       	movw	r22, r18
    3e38:	0e 94 ab 20 	call	0x4156	; 0x4156 <__divmodhi4>
    3e3c:	80 5d       	subi	r24, 0xD0	; 208
    3e3e:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayChar>
			temp/=10;
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	9a 81       	ldd	r25, Y+2	; 0x02
    3e46:	2a e0       	ldi	r18, 0x0A	; 10
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	b9 01       	movw	r22, r18
    3e4c:	0e 94 ab 20 	call	0x4156	; 0x4156 <__divmodhi4>
    3e50:	cb 01       	movw	r24, r22
    3e52:	9a 83       	std	Y+2, r25	; 0x02
    3e54:	89 83       	std	Y+1, r24	; 0x01
			temp = Copy_s16Number%10 + temp*10 ;
			Copy_s16Number/=10;

		}

		while(temp!=0)
    3e56:	89 81       	ldd	r24, Y+1	; 0x01
    3e58:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5a:	00 97       	sbiw	r24, 0x00	; 0
    3e5c:	41 f7       	brne	.-48     	; 0x3e2e <LCD_enuDisplayNumber+0x96>
			temp/=10;
		}
	}

	/*Then return error state variable*/
	return Local_enuErrorState;
    3e5e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3e60:	0f 90       	pop	r0
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	0f 90       	pop	r0
    3e6a:	cf 91       	pop	r28
    3e6c:	df 91       	pop	r29
    3e6e:	08 95       	ret

00003e70 <LCD_enuClear>:

ES_t LCD_enuClear()
{
    3e70:	df 93       	push	r29
    3e72:	cf 93       	push	r28
    3e74:	0f 92       	push	r0
    3e76:	cd b7       	in	r28, 0x3d	; 61
    3e78:	de b7       	in	r29, 0x3e	; 62
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	89 83       	std	Y+1, r24	; 0x01

	LCD_invidSendCommand(LCD_CLEAR_SCREEN);
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_invidSendCommand>
	Local_enuErrorState = ES_OK;
    3e84:	19 82       	std	Y+1, r1	; 0x01

	/*Then return error state variable*/
	return Local_enuErrorState;
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e88:	0f 90       	pop	r0
    3e8a:	cf 91       	pop	r28
    3e8c:	df 91       	pop	r29
    3e8e:	08 95       	ret

00003e90 <LCD_enuDisplayStringRowCol>:

ES_t LCD_enuDisplayStringRowCol(u8 Copy_u8Row , u8 Copy_u8Col , const char* Copy_pu8String )
{
    3e90:	df 93       	push	r29
    3e92:	cf 93       	push	r28
    3e94:	00 d0       	rcall	.+0      	; 0x3e96 <LCD_enuDisplayStringRowCol+0x6>
    3e96:	00 d0       	rcall	.+0      	; 0x3e98 <LCD_enuDisplayStringRowCol+0x8>
    3e98:	0f 92       	push	r0
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
    3e9e:	8a 83       	std	Y+2, r24	; 0x02
    3ea0:	6b 83       	std	Y+3, r22	; 0x03
    3ea2:	5d 83       	std	Y+5, r21	; 0x05
    3ea4:	4c 83       	std	Y+4, r20	; 0x04
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    3ea6:	81 e0       	ldi	r24, 0x01	; 1
    3ea8:	89 83       	std	Y+1, r24	; 0x01

	LCD_enuGoToRowCol(Copy_u8Row , Copy_u8Col);
    3eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3eac:	6b 81       	ldd	r22, Y+3	; 0x03
    3eae:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <LCD_enuGoToRowCol>

	LCD_enuDisplayString(Copy_pu8String);
    3eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    3eb4:	9d 81       	ldd	r25, Y+5	; 0x05
    3eb6:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <LCD_enuDisplayString>

	/*Then return error state variable*/
	return Local_enuErrorState;
    3eba:	89 81       	ldd	r24, Y+1	; 0x01
}
    3ebc:	0f 90       	pop	r0
    3ebe:	0f 90       	pop	r0
    3ec0:	0f 90       	pop	r0
    3ec2:	0f 90       	pop	r0
    3ec4:	0f 90       	pop	r0
    3ec6:	cf 91       	pop	r28
    3ec8:	df 91       	pop	r29
    3eca:	08 95       	ret

00003ecc <LCD_enuCreateCharacter>:

ES_t LCD_enuCreateCharacter(u8 *Copy_pu8Pattern , u8 Copy_u8Address)
{
    3ecc:	df 93       	push	r29
    3ece:	cf 93       	push	r28
    3ed0:	00 d0       	rcall	.+0      	; 0x3ed2 <LCD_enuCreateCharacter+0x6>
    3ed2:	00 d0       	rcall	.+0      	; 0x3ed4 <LCD_enuCreateCharacter+0x8>
    3ed4:	0f 92       	push	r0
    3ed6:	cd b7       	in	r28, 0x3d	; 61
    3ed8:	de b7       	in	r29, 0x3e	; 62
    3eda:	9c 83       	std	Y+4, r25	; 0x04
    3edc:	8b 83       	std	Y+3, r24	; 0x03
    3ede:	6d 83       	std	Y+5, r22	; 0x05
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iterator = 0 ;
    3ee4:	19 82       	std	Y+1, r1	; 0x01

	LCD_invidSendCommand(LCD_SET_CGRAM_LOCATION|(Copy_u8Address*8));
    3ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee8:	88 2f       	mov	r24, r24
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	88 0f       	add	r24, r24
    3eee:	99 1f       	adc	r25, r25
    3ef0:	88 0f       	add	r24, r24
    3ef2:	99 1f       	adc	r25, r25
    3ef4:	88 0f       	add	r24, r24
    3ef6:	99 1f       	adc	r25, r25
    3ef8:	80 64       	ori	r24, 0x40	; 64
    3efa:	0e 94 b5 19 	call	0x336a	; 0x336a <LCD_invidSendCommand>

	for(Local_u8Iterator=0 ; Local_u8Iterator<8 ;Local_u8Iterator++)
    3efe:	19 82       	std	Y+1, r1	; 0x01
    3f00:	0e c0       	rjmp	.+28     	; 0x3f1e <LCD_enuCreateCharacter+0x52>
	{
		LCD_enuDisplayChar(Copy_pu8Pattern[Local_u8Iterator]);
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	e2 0f       	add	r30, r18
    3f10:	f3 1f       	adc	r31, r19
    3f12:	80 81       	ld	r24, Z
    3f14:	0e 94 89 19 	call	0x3312	; 0x3312 <LCD_enuDisplayChar>

	u8 Local_u8Iterator = 0 ;

	LCD_invidSendCommand(LCD_SET_CGRAM_LOCATION|(Copy_u8Address*8));

	for(Local_u8Iterator=0 ; Local_u8Iterator<8 ;Local_u8Iterator++)
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	8f 5f       	subi	r24, 0xFF	; 255
    3f1c:	89 83       	std	Y+1, r24	; 0x01
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	88 30       	cpi	r24, 0x08	; 8
    3f22:	78 f3       	brcs	.-34     	; 0x3f02 <LCD_enuCreateCharacter+0x36>

	//0x40 --> 0b 0100 0000
	//            0111 1111

	/*Then return error state variable*/
	return Local_enuErrorState;
    3f24:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3f26:	0f 90       	pop	r0
    3f28:	0f 90       	pop	r0
    3f2a:	0f 90       	pop	r0
    3f2c:	0f 90       	pop	r0
    3f2e:	0f 90       	pop	r0
    3f30:	cf 91       	pop	r28
    3f32:	df 91       	pop	r29
    3f34:	08 95       	ret

00003f36 <LCD_enuDisplayBinary>:

ES_t LCD_enuDisplayBinary(u16 Copy_u16Number)
{
    3f36:	df 93       	push	r29
    3f38:	cf 93       	push	r28
    3f3a:	00 d0       	rcall	.+0      	; 0x3f3c <LCD_enuDisplayBinary+0x6>
    3f3c:	00 d0       	rcall	.+0      	; 0x3f3e <LCD_enuDisplayBinary+0x8>
    3f3e:	0f 92       	push	r0
    3f40:	cd b7       	in	r28, 0x3d	; 61
    3f42:	de b7       	in	r29, 0x3e	; 62
    3f44:	9d 83       	std	Y+5, r25	; 0x05
    3f46:	8c 83       	std	Y+4, r24	; 0x04
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	8b 83       	std	Y+3, r24	; 0x03

	// 00010 1011

	if(Copy_u16Number == 0 || Copy_u16Number == 1)
    3f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f50:	00 97       	sbiw	r24, 0x00	; 0
    3f52:	29 f0       	breq	.+10     	; 0x3f5e <LCD_enuDisplayBinary+0x28>
    3f54:	8c 81       	ldd	r24, Y+4	; 0x04
    3f56:	9d 81       	ldd	r25, Y+5	; 0x05
    3f58:	81 30       	cpi	r24, 0x01	; 1
    3f5a:	91 05       	cpc	r25, r1
    3f5c:	29 f4       	brne	.+10     	; 0x3f68 <LCD_enuDisplayBinary+0x32>
	{
		LCD_enuDisplayNumber(Copy_u16Number);
    3f5e:	8c 81       	ldd	r24, Y+4	; 0x04
    3f60:	9d 81       	ldd	r25, Y+5	; 0x05
    3f62:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_enuDisplayNumber>
    3f66:	31 c0       	rjmp	.+98     	; 0x3fca <LCD_enuDisplayBinary+0x94>
	}
	else
	{
		s8 Local_u8Iterator = 0;
    3f68:	1a 82       	std	Y+2, r1	; 0x02
		u8 Local_u8Flag = 0;
    3f6a:	19 82       	std	Y+1, r1	; 0x01
		for(Local_u8Iterator=7 ; Local_u8Iterator>=0 ; Local_u8Iterator--)
    3f6c:	87 e0       	ldi	r24, 0x07	; 7
    3f6e:	8a 83       	std	Y+2, r24	; 0x02
    3f70:	29 c0       	rjmp	.+82     	; 0x3fc4 <LCD_enuDisplayBinary+0x8e>
		{
			if(((Copy_u16Number>>Local_u8Iterator)&1)==1)
    3f72:	8a 81       	ldd	r24, Y+2	; 0x02
    3f74:	28 2f       	mov	r18, r24
    3f76:	33 27       	eor	r19, r19
    3f78:	27 fd       	sbrc	r18, 7
    3f7a:	30 95       	com	r19
    3f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f80:	02 2e       	mov	r0, r18
    3f82:	02 c0       	rjmp	.+4      	; 0x3f88 <LCD_enuDisplayBinary+0x52>
    3f84:	96 95       	lsr	r25
    3f86:	87 95       	ror	r24
    3f88:	0a 94       	dec	r0
    3f8a:	e2 f7       	brpl	.-8      	; 0x3f84 <LCD_enuDisplayBinary+0x4e>
    3f8c:	81 70       	andi	r24, 0x01	; 1
    3f8e:	90 70       	andi	r25, 0x00	; 0
    3f90:	88 23       	and	r24, r24
    3f92:	11 f0       	breq	.+4      	; 0x3f98 <LCD_enuDisplayBinary+0x62>
			{
				Local_u8Flag=1;
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	89 83       	std	Y+1, r24	; 0x01
			}

			if(Local_u8Flag==1)
    3f98:	89 81       	ldd	r24, Y+1	; 0x01
    3f9a:	81 30       	cpi	r24, 0x01	; 1
    3f9c:	81 f4       	brne	.+32     	; 0x3fbe <LCD_enuDisplayBinary+0x88>
			{
				LCD_enuDisplayNumber((Copy_u16Number>>Local_u8Iterator)&1);
    3f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3fa0:	28 2f       	mov	r18, r24
    3fa2:	33 27       	eor	r19, r19
    3fa4:	27 fd       	sbrc	r18, 7
    3fa6:	30 95       	com	r19
    3fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    3faa:	9d 81       	ldd	r25, Y+5	; 0x05
    3fac:	02 c0       	rjmp	.+4      	; 0x3fb2 <LCD_enuDisplayBinary+0x7c>
    3fae:	96 95       	lsr	r25
    3fb0:	87 95       	ror	r24
    3fb2:	2a 95       	dec	r18
    3fb4:	e2 f7       	brpl	.-8      	; 0x3fae <LCD_enuDisplayBinary+0x78>
    3fb6:	81 70       	andi	r24, 0x01	; 1
    3fb8:	90 70       	andi	r25, 0x00	; 0
    3fba:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_enuDisplayNumber>
	}
	else
	{
		s8 Local_u8Iterator = 0;
		u8 Local_u8Flag = 0;
		for(Local_u8Iterator=7 ; Local_u8Iterator>=0 ; Local_u8Iterator--)
    3fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc0:	81 50       	subi	r24, 0x01	; 1
    3fc2:	8a 83       	std	Y+2, r24	; 0x02
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	88 23       	and	r24, r24
    3fc8:	a4 f6       	brge	.-88     	; 0x3f72 <LCD_enuDisplayBinary+0x3c>
		}
	}


	/*Then return error state variable*/
	return Local_enuErrorState;
    3fca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3fcc:	0f 90       	pop	r0
    3fce:	0f 90       	pop	r0
    3fd0:	0f 90       	pop	r0
    3fd2:	0f 90       	pop	r0
    3fd4:	0f 90       	pop	r0
    3fd6:	cf 91       	pop	r28
    3fd8:	df 91       	pop	r29
    3fda:	08 95       	ret

00003fdc <LCD_enuDisplayNumber_4Digit>:

ES_t LCD_enuDisplayNumber_4Digit(u16 Copy_u16Number)
{
    3fdc:	df 93       	push	r29
    3fde:	cf 93       	push	r28
    3fe0:	00 d0       	rcall	.+0      	; 0x3fe2 <LCD_enuDisplayNumber_4Digit+0x6>
    3fe2:	0f 92       	push	r0
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
    3fe8:	9b 83       	std	Y+3, r25	; 0x03
    3fea:	8a 83       	std	Y+2, r24	; 0x02
	/*At first set the error state variable by "NOT OK" state*/
	ES_t Local_enuErrorState = ES_NOK;
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	89 83       	std	Y+1, r24	; 0x01
	// 2514

	LCD_enuDisplayNumber(Copy_u16Number/10000);
    3ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff4:	20 e1       	ldi	r18, 0x10	; 16
    3ff6:	37 e2       	ldi	r19, 0x27	; 39
    3ff8:	b9 01       	movw	r22, r18
    3ffa:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    3ffe:	cb 01       	movw	r24, r22
    4000:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_enuDisplayNumber>

	LCD_enuDisplayNumber((Copy_u16Number%1000)/100);
    4004:	8a 81       	ldd	r24, Y+2	; 0x02
    4006:	9b 81       	ldd	r25, Y+3	; 0x03
    4008:	28 ee       	ldi	r18, 0xE8	; 232
    400a:	33 e0       	ldi	r19, 0x03	; 3
    400c:	b9 01       	movw	r22, r18
    400e:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    4012:	24 e6       	ldi	r18, 0x64	; 100
    4014:	30 e0       	ldi	r19, 0x00	; 0
    4016:	b9 01       	movw	r22, r18
    4018:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    401c:	cb 01       	movw	r24, r22
    401e:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_enuDisplayNumber>

	LCD_enuDisplayNumber((Copy_u16Number%100)/10);
    4022:	8a 81       	ldd	r24, Y+2	; 0x02
    4024:	9b 81       	ldd	r25, Y+3	; 0x03
    4026:	24 e6       	ldi	r18, 0x64	; 100
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	b9 01       	movw	r22, r18
    402c:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    4030:	2a e0       	ldi	r18, 0x0A	; 10
    4032:	30 e0       	ldi	r19, 0x00	; 0
    4034:	b9 01       	movw	r22, r18
    4036:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    403a:	cb 01       	movw	r24, r22
    403c:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_enuDisplayNumber>

	LCD_enuDisplayNumber((Copy_u16Number%10));
    4040:	8a 81       	ldd	r24, Y+2	; 0x02
    4042:	9b 81       	ldd	r25, Y+3	; 0x03
    4044:	2a e0       	ldi	r18, 0x0A	; 10
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	b9 01       	movw	r22, r18
    404a:	0e 94 97 20 	call	0x412e	; 0x412e <__udivmodhi4>
    404e:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_enuDisplayNumber>


	/*Then return error state variable*/
	return Local_enuErrorState;
    4052:	89 81       	ldd	r24, Y+1	; 0x01
}
    4054:	0f 90       	pop	r0
    4056:	0f 90       	pop	r0
    4058:	0f 90       	pop	r0
    405a:	cf 91       	pop	r28
    405c:	df 91       	pop	r29
    405e:	08 95       	ret

00004060 <main>:




int main(void)
{
    4060:	df 93       	push	r29
    4062:	cf 93       	push	r28
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
    4068:	c4 55       	subi	r28, 0x54	; 84
    406a:	d0 40       	sbci	r29, 0x00	; 0
    406c:	0f b6       	in	r0, 0x3f	; 63
    406e:	f8 94       	cli
    4070:	de bf       	out	0x3e, r29	; 62
    4072:	0f be       	out	0x3f, r0	; 63
    4074:	cd bf       	out	0x3d, r28	; 61
	DIO_enuInit();
    4076:	0e 94 1b 10 	call	0x2036	; 0x2036 <DIO_enuInit>
	TWI_enuInitMaster();
    407a:	0e 94 9d 14 	call	0x293a	; 0x293a <TWI_enuInitMaster>
	LCD_enuInit();
    407e:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_enuInit>


	EEPROM_enuInit();
    4082:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <EEPROM_enuInit>


	EEPROM_Handler_t hn;

	EEPROM_enuRestoreData(&hn);
    4086:	ce 01       	movw	r24, r28
    4088:	01 96       	adiw	r24, 0x01	; 1
    408a:	0e 94 9b 05 	call	0xb36	; 0xb36 <EEPROM_enuRestoreData>


	if(hn.AdminID[0] == 50)
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	82 33       	cpi	r24, 0x32	; 50
    4092:	31 f4       	brne	.+12     	; 0x40a0 <main+0x40>
	{
		DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_HIGH);
    4094:	80 e0       	ldi	r24, 0x00	; 0
    4096:	60 e0       	ldi	r22, 0x00	; 0
    4098:	41 e0       	ldi	r20, 0x01	; 1
    409a:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    409e:	05 c0       	rjmp	.+10     	; 0x40aa <main+0x4a>
	}
	else
	{
		DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN0, DIO_u8PIN_LOW);
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	60 e0       	ldi	r22, 0x00	; 0
    40a4:	40 e0       	ldi	r20, 0x00	; 0
    40a6:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	}


	if(hn.AdminPAS[0] == 11)
    40aa:	8d 89       	ldd	r24, Y+21	; 0x15
    40ac:	8b 30       	cpi	r24, 0x0B	; 11
    40ae:	31 f4       	brne	.+12     	; 0x40bc <main+0x5c>
	{
		DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN1, DIO_u8PIN_HIGH);
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	61 e0       	ldi	r22, 0x01	; 1
    40b4:	41 e0       	ldi	r20, 0x01	; 1
    40b6:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    40ba:	05 c0       	rjmp	.+10     	; 0x40c6 <main+0x66>
	}
	else
	{
		DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN1, DIO_u8PIN_LOW);
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	61 e0       	ldi	r22, 0x01	; 1
    40c0:	40 e0       	ldi	r20, 0x00	; 0
    40c2:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	}


	if(hn.UserID[0] == 92)
    40c6:	8a a5       	ldd	r24, Y+42	; 0x2a
    40c8:	8c 35       	cpi	r24, 0x5C	; 92
    40ca:	31 f4       	brne	.+12     	; 0x40d8 <main+0x78>
	{
		DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN5, DIO_u8PIN_HIGH);
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	65 e0       	ldi	r22, 0x05	; 5
    40d0:	41 e0       	ldi	r20, 0x01	; 1
    40d2:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    40d6:	05 c0       	rjmp	.+10     	; 0x40e2 <main+0x82>
	}
	else
	{
		DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN5, DIO_u8PIN_LOW);
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	65 e0       	ldi	r22, 0x05	; 5
    40dc:	40 e0       	ldi	r20, 0x00	; 0
    40de:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	}

	if(hn.UserPAS[0] == 15)
    40e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    40e4:	8f 30       	cpi	r24, 0x0F	; 15
    40e6:	31 f4       	brne	.+12     	; 0x40f4 <main+0x94>
	{
		DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN6, DIO_u8PIN_HIGH);
    40e8:	80 e0       	ldi	r24, 0x00	; 0
    40ea:	66 e0       	ldi	r22, 0x06	; 6
    40ec:	41 e0       	ldi	r20, 0x01	; 1
    40ee:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
    40f2:	05 c0       	rjmp	.+10     	; 0x40fe <main+0x9e>
	}
	else
	{
		DIO_enuSetPinValue(DIO_u8PORTA, DIO_u8PIN6, DIO_u8PIN_LOW);
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	66 e0       	ldi	r22, 0x06	; 6
    40f8:	40 e0       	ldi	r20, 0x00	; 0
    40fa:	0e 94 82 12 	call	0x2504	; 0x2504 <DIO_enuSetPinValue>
	}

	AdminORuser_t NewAdmin = {22 , 13}; //create a new admin with id 22 and password 13
    40fe:	fe 01       	movw	r30, r28
    4100:	ed 5a       	subi	r30, 0xAD	; 173
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	86 e1       	ldi	r24, 0x16	; 22
    4106:	80 83       	st	Z, r24
    4108:	fe 01       	movw	r30, r28
    410a:	ed 5a       	subi	r30, 0xAD	; 173
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	8d e0       	ldi	r24, 0x0D	; 13
    4110:	81 83       	std	Z+1, r24	; 0x01
	EEPROM_enuAddAdmin(&hn, &NewAdmin);
    4112:	9e 01       	movw	r18, r28
    4114:	2d 5a       	subi	r18, 0xAD	; 173
    4116:	3f 4f       	sbci	r19, 0xFF	; 255
    4118:	ce 01       	movw	r24, r28
    411a:	01 96       	adiw	r24, 0x01	; 1
    411c:	b9 01       	movw	r22, r18
    411e:	0e 94 66 08 	call	0x10cc	; 0x10cc <EEPROM_enuAddAdmin>


	LCD_enuDisplayNumber((s16)hn.UserID[0]);
    4122:	8a a5       	ldd	r24, Y+42	; 0x2a
    4124:	88 2f       	mov	r24, r24
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <LCD_enuDisplayNumber>
    412c:	ff cf       	rjmp	.-2      	; 0x412c <main+0xcc>

0000412e <__udivmodhi4>:
    412e:	aa 1b       	sub	r26, r26
    4130:	bb 1b       	sub	r27, r27
    4132:	51 e1       	ldi	r21, 0x11	; 17
    4134:	07 c0       	rjmp	.+14     	; 0x4144 <__udivmodhi4_ep>

00004136 <__udivmodhi4_loop>:
    4136:	aa 1f       	adc	r26, r26
    4138:	bb 1f       	adc	r27, r27
    413a:	a6 17       	cp	r26, r22
    413c:	b7 07       	cpc	r27, r23
    413e:	10 f0       	brcs	.+4      	; 0x4144 <__udivmodhi4_ep>
    4140:	a6 1b       	sub	r26, r22
    4142:	b7 0b       	sbc	r27, r23

00004144 <__udivmodhi4_ep>:
    4144:	88 1f       	adc	r24, r24
    4146:	99 1f       	adc	r25, r25
    4148:	5a 95       	dec	r21
    414a:	a9 f7       	brne	.-22     	; 0x4136 <__udivmodhi4_loop>
    414c:	80 95       	com	r24
    414e:	90 95       	com	r25
    4150:	bc 01       	movw	r22, r24
    4152:	cd 01       	movw	r24, r26
    4154:	08 95       	ret

00004156 <__divmodhi4>:
    4156:	97 fb       	bst	r25, 7
    4158:	09 2e       	mov	r0, r25
    415a:	07 26       	eor	r0, r23
    415c:	0a d0       	rcall	.+20     	; 0x4172 <__divmodhi4_neg1>
    415e:	77 fd       	sbrc	r23, 7
    4160:	04 d0       	rcall	.+8      	; 0x416a <__divmodhi4_neg2>
    4162:	e5 df       	rcall	.-54     	; 0x412e <__udivmodhi4>
    4164:	06 d0       	rcall	.+12     	; 0x4172 <__divmodhi4_neg1>
    4166:	00 20       	and	r0, r0
    4168:	1a f4       	brpl	.+6      	; 0x4170 <__divmodhi4_exit>

0000416a <__divmodhi4_neg2>:
    416a:	70 95       	com	r23
    416c:	61 95       	neg	r22
    416e:	7f 4f       	sbci	r23, 0xFF	; 255

00004170 <__divmodhi4_exit>:
    4170:	08 95       	ret

00004172 <__divmodhi4_neg1>:
    4172:	f6 f7       	brtc	.-4      	; 0x4170 <__divmodhi4_exit>
    4174:	90 95       	com	r25
    4176:	81 95       	neg	r24
    4178:	9f 4f       	sbci	r25, 0xFF	; 255
    417a:	08 95       	ret

0000417c <__prologue_saves__>:
    417c:	2f 92       	push	r2
    417e:	3f 92       	push	r3
    4180:	4f 92       	push	r4
    4182:	5f 92       	push	r5
    4184:	6f 92       	push	r6
    4186:	7f 92       	push	r7
    4188:	8f 92       	push	r8
    418a:	9f 92       	push	r9
    418c:	af 92       	push	r10
    418e:	bf 92       	push	r11
    4190:	cf 92       	push	r12
    4192:	df 92       	push	r13
    4194:	ef 92       	push	r14
    4196:	ff 92       	push	r15
    4198:	0f 93       	push	r16
    419a:	1f 93       	push	r17
    419c:	cf 93       	push	r28
    419e:	df 93       	push	r29
    41a0:	cd b7       	in	r28, 0x3d	; 61
    41a2:	de b7       	in	r29, 0x3e	; 62
    41a4:	ca 1b       	sub	r28, r26
    41a6:	db 0b       	sbc	r29, r27
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	f8 94       	cli
    41ac:	de bf       	out	0x3e, r29	; 62
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	cd bf       	out	0x3d, r28	; 61
    41b2:	09 94       	ijmp

000041b4 <__epilogue_restores__>:
    41b4:	2a 88       	ldd	r2, Y+18	; 0x12
    41b6:	39 88       	ldd	r3, Y+17	; 0x11
    41b8:	48 88       	ldd	r4, Y+16	; 0x10
    41ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    41bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    41be:	7d 84       	ldd	r7, Y+13	; 0x0d
    41c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    41c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    41c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    41c6:	b9 84       	ldd	r11, Y+9	; 0x09
    41c8:	c8 84       	ldd	r12, Y+8	; 0x08
    41ca:	df 80       	ldd	r13, Y+7	; 0x07
    41cc:	ee 80       	ldd	r14, Y+6	; 0x06
    41ce:	fd 80       	ldd	r15, Y+5	; 0x05
    41d0:	0c 81       	ldd	r16, Y+4	; 0x04
    41d2:	1b 81       	ldd	r17, Y+3	; 0x03
    41d4:	aa 81       	ldd	r26, Y+2	; 0x02
    41d6:	b9 81       	ldd	r27, Y+1	; 0x01
    41d8:	ce 0f       	add	r28, r30
    41da:	d1 1d       	adc	r29, r1
    41dc:	0f b6       	in	r0, 0x3f	; 63
    41de:	f8 94       	cli
    41e0:	de bf       	out	0x3e, r29	; 62
    41e2:	0f be       	out	0x3f, r0	; 63
    41e4:	cd bf       	out	0x3d, r28	; 61
    41e6:	ed 01       	movw	r28, r26
    41e8:	08 95       	ret

000041ea <_exit>:
    41ea:	f8 94       	cli

000041ec <__stop_program>:
    41ec:	ff cf       	rjmp	.-2      	; 0x41ec <__stop_program>
